// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace IntelMKL.LP64
{
    public enum CBLAS_LAYOUT
    {
        CblasRowMajor = 101,
        CblasColMajor = 102
    }

    public enum CBLAS_TRANSPOSE
    {
        CblasNoTrans = 111,
        CblasTrans = 112,
        CblasConjTrans = 113
    }

    public enum CBLAS_UPLO
    {
        CblasUpper = 121,
        CblasLower = 122
    }

    public enum CBLAS_DIAG
    {
        CblasNonUnit = 131,
        CblasUnit = 132
    }

    public enum CBLAS_SIDE
    {
        CblasLeft = 141,
        CblasRight = 142
    }

    public enum CBLAS_STORAGE
    {
        CblasPacked = 151
    }

    public enum CBLAS_IDENTIFIER
    {
        CblasAMatrix = 161,
        CblasBMatrix = 162
    }

    public enum CBLAS_OFFSET
    {
        CblasRowOffset = 171,
        CblasColOffset = 172,
        CblasFixOffset = 173
    }

    public unsafe partial class CBlas
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dcabs1")]
            internal static extern double Dcabs1(global::System.IntPtr z);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_scabs1")]
            internal static extern float Scabs1(global::System.IntPtr c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sdot")]
            internal static extern float Sdot(int N, float* X, int incX, float* Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sdoti")]
            internal static extern float Sdoti(int N, float* X, int* indx, float* Y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ddot")]
            internal static extern double Ddot(int N, double* X, int incX, double* Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ddoti")]
            internal static extern double Ddoti(int N, double* X, int* indx, double* Y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dsdot")]
            internal static extern double Dsdot(int N, float* X, int incX, float* Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sdsdot")]
            internal static extern float Sdsdot(int N, float sb, float* X, int incX, float* Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cdotu_sub")]
            internal static extern void CdotuSub(int N, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr dotu);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cdotui_sub")]
            internal static extern void CdotuiSub(int N, global::System.IntPtr X, int* indx, global::System.IntPtr Y, global::System.IntPtr dotui);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cdotc_sub")]
            internal static extern void CdotcSub(int N, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr dotc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cdotci_sub")]
            internal static extern void CdotciSub(int N, global::System.IntPtr X, int* indx, global::System.IntPtr Y, global::System.IntPtr dotui);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zdotu_sub")]
            internal static extern void ZdotuSub(int N, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr dotu);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zdotui_sub")]
            internal static extern void ZdotuiSub(int N, global::System.IntPtr X, int* indx, global::System.IntPtr Y, global::System.IntPtr dotui);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zdotc_sub")]
            internal static extern void ZdotcSub(int N, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr dotc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zdotci_sub")]
            internal static extern void ZdotciSub(int N, global::System.IntPtr X, int* indx, global::System.IntPtr Y, global::System.IntPtr dotui);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_snrm2")]
            internal static extern float Snrm2(int N, float* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sasum")]
            internal static extern float Sasum(int N, float* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dnrm2")]
            internal static extern double Dnrm2(int N, double* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dasum")]
            internal static extern double Dasum(int N, double* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_scnrm2")]
            internal static extern float Scnrm2(int N, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_scasum")]
            internal static extern float Scasum(int N, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dznrm2")]
            internal static extern double Dznrm2(int N, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dzasum")]
            internal static extern double Dzasum(int N, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_isamax")]
            internal static extern ulong Isamax(int N, float* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_idamax")]
            internal static extern ulong Idamax(int N, double* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_icamax")]
            internal static extern ulong Icamax(int N, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_izamax")]
            internal static extern ulong Izamax(int N, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_isamin")]
            internal static extern ulong Isamin(int N, float* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_idamin")]
            internal static extern ulong Idamin(int N, double* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_icamin")]
            internal static extern ulong Icamin(int N, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_izamin")]
            internal static extern ulong Izamin(int N, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sswap")]
            internal static extern void Sswap(int N, float* X, int incX, float* Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_scopy")]
            internal static extern void Scopy(int N, float* X, int incX, float* Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_saxpy")]
            internal static extern void Saxpy(int N, float alpha, float* X, int incX, float* Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_saxpby")]
            internal static extern void Saxpby(int N, float alpha, float* X, int incX, float beta, float* Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_saxpyi")]
            internal static extern void Saxpyi(int N, float alpha, float* X, int* indx, float* Y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sgthr")]
            internal static extern void Sgthr(int N, float* Y, float* X, int* indx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sgthrz")]
            internal static extern void Sgthrz(int N, float* Y, float* X, int* indx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ssctr")]
            internal static extern void Ssctr(int N, float* X, int* indx, float* Y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_srotg")]
            internal static extern void Srotg(float* a, float* b, float* c, float* s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dswap")]
            internal static extern void Dswap(int N, double* X, int incX, double* Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dcopy")]
            internal static extern void Dcopy(int N, double* X, int incX, double* Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_daxpy")]
            internal static extern void Daxpy(int N, double alpha, double* X, int incX, double* Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_daxpby")]
            internal static extern void Daxpby(int N, double alpha, double* X, int incX, double beta, double* Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_daxpyi")]
            internal static extern void Daxpyi(int N, double alpha, double* X, int* indx, double* Y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dgthr")]
            internal static extern void Dgthr(int N, double* Y, double* X, int* indx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dgthrz")]
            internal static extern void Dgthrz(int N, double* Y, double* X, int* indx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dsctr")]
            internal static extern void Dsctr(int N, double* X, int* indx, double* Y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_drotg")]
            internal static extern void Drotg(double* a, double* b, double* c, double* s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cswap")]
            internal static extern void Cswap(int N, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ccopy")]
            internal static extern void Ccopy(int N, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_caxpy")]
            internal static extern void Caxpy(int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_caxpby")]
            internal static extern void Caxpby(int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_caxpyi")]
            internal static extern void Caxpyi(int N, global::System.IntPtr alpha, global::System.IntPtr X, int* indx, global::System.IntPtr Y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cgthr")]
            internal static extern void Cgthr(int N, global::System.IntPtr Y, global::System.IntPtr X, int* indx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cgthrz")]
            internal static extern void Cgthrz(int N, global::System.IntPtr Y, global::System.IntPtr X, int* indx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_csctr")]
            internal static extern void Csctr(int N, global::System.IntPtr X, int* indx, global::System.IntPtr Y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_crotg")]
            internal static extern void Crotg(global::System.IntPtr a, global::System.IntPtr b, float* c, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zswap")]
            internal static extern void Zswap(int N, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zcopy")]
            internal static extern void Zcopy(int N, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zaxpy")]
            internal static extern void Zaxpy(int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zaxpby")]
            internal static extern void Zaxpby(int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zaxpyi")]
            internal static extern void Zaxpyi(int N, global::System.IntPtr alpha, global::System.IntPtr X, int* indx, global::System.IntPtr Y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zgthr")]
            internal static extern void Zgthr(int N, global::System.IntPtr Y, global::System.IntPtr X, int* indx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zgthrz")]
            internal static extern void Zgthrz(int N, global::System.IntPtr Y, global::System.IntPtr X, int* indx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zsctr")]
            internal static extern void Zsctr(int N, global::System.IntPtr X, int* indx, global::System.IntPtr Y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zrotg")]
            internal static extern void Zrotg(global::System.IntPtr a, global::System.IntPtr b, double* c, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_srotmg")]
            internal static extern void Srotmg(float* d1, float* d2, float* b1, float b2, float* P);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_srot")]
            internal static extern void Srot(int N, float* X, int incX, float* Y, int incY, float c, float s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sroti")]
            internal static extern void Sroti(int N, float* X, int* indx, float* Y, float c, float s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_srotm")]
            internal static extern void Srotm(int N, float* X, int incX, float* Y, int incY, float* P);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_drotmg")]
            internal static extern void Drotmg(double* d1, double* d2, double* b1, double b2, double* P);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_drot")]
            internal static extern void Drot(int N, double* X, int incX, double* Y, int incY, double c, double s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_drotm")]
            internal static extern void Drotm(int N, double* X, int incX, double* Y, int incY, double* P);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_droti")]
            internal static extern void Droti(int N, double* X, int* indx, double* Y, double c, double s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_csrot")]
            internal static extern void Csrot(int N, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, float c, float s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zdrot")]
            internal static extern void Zdrot(int N, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, double c, double s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sscal")]
            internal static extern void Sscal(int N, float alpha, float* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dscal")]
            internal static extern void Dscal(int N, double alpha, double* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cscal")]
            internal static extern void Cscal(int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zscal")]
            internal static extern void Zscal(int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_csscal")]
            internal static extern void Csscal(int N, float alpha, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zdscal")]
            internal static extern void Zdscal(int N, double alpha, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sgemv")]
            internal static extern void Sgemv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, int M, int N, float alpha, float* A, int lda, float* X, int incX, float beta, float* Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sgbmv")]
            internal static extern void Sgbmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, int M, int N, int KL, int KU, float alpha, float* A, int lda, float* X, int incX, float beta, float* Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_strmv")]
            internal static extern void Strmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, float* A, int lda, float* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_stbmv")]
            internal static extern void Stbmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, int K, float* A, int lda, float* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_stpmv")]
            internal static extern void Stpmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, float* Ap, float* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_strsv")]
            internal static extern void Strsv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, float* A, int lda, float* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_stbsv")]
            internal static extern void Stbsv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, int K, float* A, int lda, float* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_stpsv")]
            internal static extern void Stpsv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, float* Ap, float* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dgemv")]
            internal static extern void Dgemv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, int M, int N, double alpha, double* A, int lda, double* X, int incX, double beta, double* Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dgbmv")]
            internal static extern void Dgbmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, int M, int N, int KL, int KU, double alpha, double* A, int lda, double* X, int incX, double beta, double* Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dtrmv")]
            internal static extern void Dtrmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, double* A, int lda, double* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dtbmv")]
            internal static extern void Dtbmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, int K, double* A, int lda, double* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dtpmv")]
            internal static extern void Dtpmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, double* Ap, double* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dtrsv")]
            internal static extern void Dtrsv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, double* A, int lda, double* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dtbsv")]
            internal static extern void Dtbsv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, int K, double* A, int lda, double* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dtpsv")]
            internal static extern void Dtpsv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, double* Ap, double* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cgemv")]
            internal static extern void Cgemv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cgbmv")]
            internal static extern void Cgbmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, int M, int N, int KL, int KU, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ctrmv")]
            internal static extern void Ctrmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ctbmv")]
            internal static extern void Ctbmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, int K, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ctpmv")]
            internal static extern void Ctpmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, global::System.IntPtr Ap, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ctrsv")]
            internal static extern void Ctrsv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ctbsv")]
            internal static extern void Ctbsv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, int K, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ctpsv")]
            internal static extern void Ctpsv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, global::System.IntPtr Ap, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zgemv")]
            internal static extern void Zgemv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zgbmv")]
            internal static extern void Zgbmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, int M, int N, int KL, int KU, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ztrmv")]
            internal static extern void Ztrmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ztbmv")]
            internal static extern void Ztbmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, int K, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ztpmv")]
            internal static extern void Ztpmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, global::System.IntPtr Ap, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ztrsv")]
            internal static extern void Ztrsv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ztbsv")]
            internal static extern void Ztbsv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, int K, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ztpsv")]
            internal static extern void Ztpsv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, global::System.IntPtr Ap, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ssymv")]
            internal static extern void Ssymv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, float alpha, float* A, int lda, float* X, int incX, float beta, float* Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ssbmv")]
            internal static extern void Ssbmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, int K, float alpha, float* A, int lda, float* X, int incX, float beta, float* Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sspmv")]
            internal static extern void Sspmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, float alpha, float* Ap, float* X, int incX, float beta, float* Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sger")]
            internal static extern void Sger(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, int M, int N, float alpha, float* X, int incX, float* Y, int incY, float* A, int lda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ssyr")]
            internal static extern void Ssyr(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, float alpha, float* X, int incX, float* A, int lda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sspr")]
            internal static extern void Sspr(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, float alpha, float* X, int incX, float* Ap);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ssyr2")]
            internal static extern void Ssyr2(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, float alpha, float* X, int incX, float* Y, int incY, float* A, int lda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sspr2")]
            internal static extern void Sspr2(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, float alpha, float* X, int incX, float* Y, int incY, float* A);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dsymv")]
            internal static extern void Dsymv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, double alpha, double* A, int lda, double* X, int incX, double beta, double* Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dsbmv")]
            internal static extern void Dsbmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, int K, double alpha, double* A, int lda, double* X, int incX, double beta, double* Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dspmv")]
            internal static extern void Dspmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, double alpha, double* Ap, double* X, int incX, double beta, double* Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dger")]
            internal static extern void Dger(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, int M, int N, double alpha, double* X, int incX, double* Y, int incY, double* A, int lda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dsyr")]
            internal static extern void Dsyr(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, double alpha, double* X, int incX, double* A, int lda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dspr")]
            internal static extern void Dspr(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, double alpha, double* X, int incX, double* Ap);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dsyr2")]
            internal static extern void Dsyr2(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, double alpha, double* X, int incX, double* Y, int incY, double* A, int lda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dspr2")]
            internal static extern void Dspr2(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, double alpha, double* X, int incX, double* Y, int incY, double* A);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_chemv")]
            internal static extern void Chemv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_chbmv")]
            internal static extern void Chbmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_chpmv")]
            internal static extern void Chpmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, global::System.IntPtr alpha, global::System.IntPtr Ap, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cgeru")]
            internal static extern void Cgeru(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, int M, int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr A, int lda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cgerc")]
            internal static extern void Cgerc(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, int M, int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr A, int lda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cher")]
            internal static extern void Cher(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, float alpha, global::System.IntPtr X, int incX, global::System.IntPtr A, int lda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_chpr")]
            internal static extern void Chpr(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, float alpha, global::System.IntPtr X, int incX, global::System.IntPtr A);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cher2")]
            internal static extern void Cher2(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr A, int lda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_chpr2")]
            internal static extern void Chpr2(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr Ap);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zhemv")]
            internal static extern void Zhemv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zhbmv")]
            internal static extern void Zhbmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zhpmv")]
            internal static extern void Zhpmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, global::System.IntPtr alpha, global::System.IntPtr Ap, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zgeru")]
            internal static extern void Zgeru(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, int M, int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr A, int lda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zgerc")]
            internal static extern void Zgerc(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, int M, int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr A, int lda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zher")]
            internal static extern void Zher(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, double alpha, global::System.IntPtr X, int incX, global::System.IntPtr A, int lda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zhpr")]
            internal static extern void Zhpr(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, double alpha, global::System.IntPtr X, int incX, global::System.IntPtr A);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zher2")]
            internal static extern void Zher2(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr A, int lda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zhpr2")]
            internal static extern void Zhpr2(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr Ap);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sgemm")]
            internal static extern void Sgemm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransB, int M, int N, int K, float alpha, float* A, int lda, float* B, int ldb, float beta, float* C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sgemm_batch")]
            internal static extern void SgemmBatch(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE* TransA_Array, global::IntelMKL.LP64.CBLAS_TRANSPOSE* TransB_Array, int* M_Array, int* N_Array, int* K_Array, float* alpha_Array, float** A_Array, int* lda_Array, float** B_Array, int* ldb_Array, float* beta_Array, float** C_Array, int* ldc_Array, int group_count, int* group_size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sgemmt")]
            internal static extern void Sgemmt(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransB, int N, int K, float alpha, float* A, int lda, float* B, int ldb, float beta, float* C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ssymm")]
            internal static extern void Ssymm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE Side, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int M, int N, float alpha, float* A, int lda, float* B, int ldb, float beta, float* C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ssyrk")]
            internal static extern void Ssyrk(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE Trans, int N, int K, float alpha, float* A, int lda, float beta, float* C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ssyr2k")]
            internal static extern void Ssyr2k(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE Trans, int N, int K, float alpha, float* A, int lda, float* B, int ldb, float beta, float* C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_strmm")]
            internal static extern void Strmm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE Side, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int M, int N, float alpha, float* A, int lda, float* B, int ldb);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_strsm")]
            internal static extern void Strsm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE Side, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int M, int N, float alpha, float* A, int lda, float* B, int ldb);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_strsm_batch")]
            internal static extern void StrsmBatch(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE* Side_Array, global::IntelMKL.LP64.CBLAS_UPLO* Uplo_Array, global::IntelMKL.LP64.CBLAS_TRANSPOSE* TransA_Array, global::IntelMKL.LP64.CBLAS_DIAG* Diag_Array, int* M_Array, int* N_Array, float* alpha_Array, float** A_Array, int* lda_Array, float** B_Array, int* ldb_Array, int group_count, int* group_size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dgemm")]
            internal static extern void Dgemm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransB, int M, int N, int K, double alpha, double* A, int lda, double* B, int ldb, double beta, double* C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dgemm_batch")]
            internal static extern void DgemmBatch(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE* TransA_Array, global::IntelMKL.LP64.CBLAS_TRANSPOSE* TransB_Array, int* M_Array, int* N_Array, int* K_Array, double* alpha_Array, double** A_Array, int* lda_Array, double** B_Array, int* ldb_Array, double* beta_Array, double** C_Array, int* ldc_Array, int group_count, int* group_size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dgemmt")]
            internal static extern void Dgemmt(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransB, int N, int K, double alpha, double* A, int lda, double* B, int ldb, double beta, double* C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dsymm")]
            internal static extern void Dsymm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE Side, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int M, int N, double alpha, double* A, int lda, double* B, int ldb, double beta, double* C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dsyrk")]
            internal static extern void Dsyrk(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE Trans, int N, int K, double alpha, double* A, int lda, double beta, double* C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dsyr2k")]
            internal static extern void Dsyr2k(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE Trans, int N, int K, double alpha, double* A, int lda, double* B, int ldb, double beta, double* C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dtrmm")]
            internal static extern void Dtrmm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE Side, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int M, int N, double alpha, double* A, int lda, double* B, int ldb);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dtrsm")]
            internal static extern void Dtrsm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE Side, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int M, int N, double alpha, double* A, int lda, double* B, int ldb);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dtrsm_batch")]
            internal static extern void DtrsmBatch(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE* Side_Array, global::IntelMKL.LP64.CBLAS_UPLO* Uplo_Array, global::IntelMKL.LP64.CBLAS_TRANSPOSE* Transa_Array, global::IntelMKL.LP64.CBLAS_DIAG* Diag_Array, int* M_Array, int* N_Array, double* alpha_Array, double** A_Array, int* lda_Array, double** B_Array, int* ldb_Array, int group_count, int* group_size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cgemm")]
            internal static extern void Cgemm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransB, int M, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cgemm3m")]
            internal static extern void Cgemm3m(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransB, int M, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cgemm_batch")]
            internal static extern void CgemmBatch(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE* TransA_Array, global::IntelMKL.LP64.CBLAS_TRANSPOSE* TransB_Array, int* M_Array, int* N_Array, int* K_Array, global::System.IntPtr alpha_Array, void** A_Array, int* lda_Array, void** B_Array, int* ldb_Array, global::System.IntPtr beta_Array, void** C_Array, int* ldc_Array, int group_count, int* group_size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cgemm3m_batch")]
            internal static extern void Cgemm3mBatch(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE* TransA_Array, global::IntelMKL.LP64.CBLAS_TRANSPOSE* TransB_Array, int* M_Array, int* N_Array, int* K_Array, global::System.IntPtr alpha_Array, void** A_Array, int* lda_Array, void** B_Array, int* ldb_Array, global::System.IntPtr beta_Array, void** C_Array, int* ldc_Array, int group_count, int* group_size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cgemmt")]
            internal static extern void Cgemmt(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransB, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_csymm")]
            internal static extern void Csymm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE Side, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_csyrk")]
            internal static extern void Csyrk(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE Trans, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr beta, global::System.IntPtr C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_csyr2k")]
            internal static extern void Csyr2k(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE Trans, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ctrmm")]
            internal static extern void Ctrmm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE Side, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ctrsm")]
            internal static extern void Ctrsm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE Side, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ctrsm_batch")]
            internal static extern void CtrsmBatch(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE* Side_Array, global::IntelMKL.LP64.CBLAS_UPLO* Uplo_Array, global::IntelMKL.LP64.CBLAS_TRANSPOSE* Transa_Array, global::IntelMKL.LP64.CBLAS_DIAG* Diag_Array, int* M_Array, int* N_Array, global::System.IntPtr alpha_Array, void** A_Array, int* lda_Array, void** B_Array, int* ldb_Array, int group_count, int* group_size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zgemm")]
            internal static extern void Zgemm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransB, int M, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zgemm3m")]
            internal static extern void Zgemm3m(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransB, int M, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zgemm_batch")]
            internal static extern void ZgemmBatch(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE* TransA_Array, global::IntelMKL.LP64.CBLAS_TRANSPOSE* TransB_Array, int* M_Array, int* N_Array, int* K_Array, global::System.IntPtr alpha_Array, void** A_Array, int* lda_Array, void** B_Array, int* ldb_Array, global::System.IntPtr beta_Array, void** C_Array, int* ldc_Array, int group_count, int* group_size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zgemm3m_batch")]
            internal static extern void Zgemm3mBatch(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE* TransA_Array, global::IntelMKL.LP64.CBLAS_TRANSPOSE* TransB_Array, int* M_Array, int* N_Array, int* K_Array, global::System.IntPtr alpha_Array, void** A_Array, int* lda_Array, void** B_Array, int* ldb_Array, global::System.IntPtr beta_Array, void** C_Array, int* ldc_Array, int group_count, int* group_size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zgemmt")]
            internal static extern void Zgemmt(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransB, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zsymm")]
            internal static extern void Zsymm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE Side, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zsyrk")]
            internal static extern void Zsyrk(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE Trans, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr beta, global::System.IntPtr C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zsyr2k")]
            internal static extern void Zsyr2k(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE Trans, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ztrmm")]
            internal static extern void Ztrmm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE Side, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ztrsm")]
            internal static extern void Ztrsm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE Side, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ztrsm_batch")]
            internal static extern void ZtrsmBatch(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE* Side_Array, global::IntelMKL.LP64.CBLAS_UPLO* Uplo_Array, global::IntelMKL.LP64.CBLAS_TRANSPOSE* Transa_Array, global::IntelMKL.LP64.CBLAS_DIAG* Diag_Array, int* M_Array, int* N_Array, global::System.IntPtr alpha_Array, void** A_Array, int* lda_Array, void** B_Array, int* ldb_Array, int group_count, int* group_size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_chemm")]
            internal static extern void Chemm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE Side, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cherk")]
            internal static extern void Cherk(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE Trans, int N, int K, float alpha, global::System.IntPtr A, int lda, float beta, global::System.IntPtr C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cher2k")]
            internal static extern void Cher2k(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE Trans, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, float beta, global::System.IntPtr C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zhemm")]
            internal static extern void Zhemm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE Side, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zherk")]
            internal static extern void Zherk(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE Trans, int N, int K, double alpha, global::System.IntPtr A, int lda, double beta, global::System.IntPtr C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zher2k")]
            internal static extern void Zher2k(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE Trans, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, double beta, global::System.IntPtr C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sgemm_alloc")]
            internal static extern float* SgemmAlloc(global::IntelMKL.LP64.CBLAS_IDENTIFIER identifier, int M, int N, int K);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sgemm_pack")]
            internal static extern void SgemmPack(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_IDENTIFIER identifier, global::IntelMKL.LP64.CBLAS_TRANSPOSE Trans, int M, int N, int K, float alpha, float* src, int ld, float* dest);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sgemm_compute")]
            internal static extern void SgemmCompute(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, int TransA, int TransB, int M, int N, int K, float* A, int lda, float* B, int ldb, float beta, float* C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sgemm_free")]
            internal static extern void SgemmFree(float* dest);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dgemm_alloc")]
            internal static extern double* DgemmAlloc(global::IntelMKL.LP64.CBLAS_IDENTIFIER identifier, int M, int N, int K);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dgemm_pack")]
            internal static extern void DgemmPack(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_IDENTIFIER identifier, global::IntelMKL.LP64.CBLAS_TRANSPOSE Trans, int M, int N, int K, double alpha, double* src, int ld, double* dest);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dgemm_compute")]
            internal static extern void DgemmCompute(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, int TransA, int TransB, int M, int N, int K, double* A, int lda, double* B, int ldb, double beta, double* C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dgemm_free")]
            internal static extern void DgemmFree(double* dest);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_gemm_s16s16s32")]
            internal static extern void GemmS16s16s32(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransB, global::IntelMKL.LP64.CBLAS_OFFSET OffsetC, int M, int N, int K, float alpha, short* A, int lda, short ao, short* B, int ldb, short bo, float beta, int* C, int ldc, int* cb);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_gemm_s8u8s32")]
            internal static extern void GemmS8u8s32(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransB, global::IntelMKL.LP64.CBLAS_OFFSET OffsetC, int M, int N, int K, float alpha, global::System.IntPtr A, int lda, sbyte ao, global::System.IntPtr B, int ldb, sbyte bo, float beta, int* C, int ldc, int* cb);
        }

        public static double Dcabs1(global::System.IntPtr z)
        {
            var __ret = __Internal.Dcabs1(z);
            return __ret;
        }

        public static float Scabs1(global::System.IntPtr c)
        {
            var __ret = __Internal.Scabs1(c);
            return __ret;
        }

        public static float Sdot(int N, ref float X, int incX, ref float Y, int incY)
        {
            fixed (float* __refParamPtr1 = &X)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr3 = &Y)
                {
                    var __arg3 = __refParamPtr3;
                    var __ret = __Internal.Sdot(N, __arg1, incX, __arg3, incY);
                    return __ret;
                }
            }
        }

        public static float Sdoti(int N, ref float X, ref int indx, ref float Y)
        {
            fixed (float* __refParamPtr1 = &X)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &indx)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &Y)
                    {
                        var __arg3 = __refParamPtr3;
                        var __ret = __Internal.Sdoti(N, __arg1, __arg2, __arg3);
                        return __ret;
                    }
                }
            }
        }

        public static double Ddot(int N, ref double X, int incX, ref double Y, int incY)
        {
            fixed (double* __refParamPtr1 = &X)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr3 = &Y)
                {
                    var __arg3 = __refParamPtr3;
                    var __ret = __Internal.Ddot(N, __arg1, incX, __arg3, incY);
                    return __ret;
                }
            }
        }

        public static double Ddoti(int N, ref double X, ref int indx, ref double Y)
        {
            fixed (double* __refParamPtr1 = &X)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &indx)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &Y)
                    {
                        var __arg3 = __refParamPtr3;
                        var __ret = __Internal.Ddoti(N, __arg1, __arg2, __arg3);
                        return __ret;
                    }
                }
            }
        }

        public static double Dsdot(int N, ref float X, int incX, ref float Y, int incY)
        {
            fixed (float* __refParamPtr1 = &X)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr3 = &Y)
                {
                    var __arg3 = __refParamPtr3;
                    var __ret = __Internal.Dsdot(N, __arg1, incX, __arg3, incY);
                    return __ret;
                }
            }
        }

        public static float Sdsdot(int N, float sb, ref float X, int incX, ref float Y, int incY)
        {
            fixed (float* __refParamPtr2 = &X)
            {
                var __arg2 = __refParamPtr2;
                fixed (float* __refParamPtr4 = &Y)
                {
                    var __arg4 = __refParamPtr4;
                    var __ret = __Internal.Sdsdot(N, sb, __arg2, incX, __arg4, incY);
                    return __ret;
                }
            }
        }

        public static void CdotuSub(int N, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr dotu)
        {
            __Internal.CdotuSub(N, X, incX, Y, incY, dotu);
        }

        public static void CdotuiSub(int N, global::System.IntPtr X, ref int indx, global::System.IntPtr Y, global::System.IntPtr dotui)
        {
            fixed (int* __refParamPtr2 = &indx)
            {
                var __arg2 = __refParamPtr2;
                __Internal.CdotuiSub(N, X, __arg2, Y, dotui);
            }
        }

        public static void CdotcSub(int N, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr dotc)
        {
            __Internal.CdotcSub(N, X, incX, Y, incY, dotc);
        }

        public static void CdotciSub(int N, global::System.IntPtr X, ref int indx, global::System.IntPtr Y, global::System.IntPtr dotui)
        {
            fixed (int* __refParamPtr2 = &indx)
            {
                var __arg2 = __refParamPtr2;
                __Internal.CdotciSub(N, X, __arg2, Y, dotui);
            }
        }

        public static void ZdotuSub(int N, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr dotu)
        {
            __Internal.ZdotuSub(N, X, incX, Y, incY, dotu);
        }

        public static void ZdotuiSub(int N, global::System.IntPtr X, ref int indx, global::System.IntPtr Y, global::System.IntPtr dotui)
        {
            fixed (int* __refParamPtr2 = &indx)
            {
                var __arg2 = __refParamPtr2;
                __Internal.ZdotuiSub(N, X, __arg2, Y, dotui);
            }
        }

        public static void ZdotcSub(int N, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr dotc)
        {
            __Internal.ZdotcSub(N, X, incX, Y, incY, dotc);
        }

        public static void ZdotciSub(int N, global::System.IntPtr X, ref int indx, global::System.IntPtr Y, global::System.IntPtr dotui)
        {
            fixed (int* __refParamPtr2 = &indx)
            {
                var __arg2 = __refParamPtr2;
                __Internal.ZdotciSub(N, X, __arg2, Y, dotui);
            }
        }

        public static float Snrm2(int N, ref float X, int incX)
        {
            fixed (float* __refParamPtr1 = &X)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.Snrm2(N, __arg1, incX);
                return __ret;
            }
        }

        public static float Sasum(int N, ref float X, int incX)
        {
            fixed (float* __refParamPtr1 = &X)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.Sasum(N, __arg1, incX);
                return __ret;
            }
        }

        public static double Dnrm2(int N, ref double X, int incX)
        {
            fixed (double* __refParamPtr1 = &X)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.Dnrm2(N, __arg1, incX);
                return __ret;
            }
        }

        public static double Dasum(int N, ref double X, int incX)
        {
            fixed (double* __refParamPtr1 = &X)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.Dasum(N, __arg1, incX);
                return __ret;
            }
        }

        public static float Scnrm2(int N, global::System.IntPtr X, int incX)
        {
            var __ret = __Internal.Scnrm2(N, X, incX);
            return __ret;
        }

        public static float Scasum(int N, global::System.IntPtr X, int incX)
        {
            var __ret = __Internal.Scasum(N, X, incX);
            return __ret;
        }

        public static double Dznrm2(int N, global::System.IntPtr X, int incX)
        {
            var __ret = __Internal.Dznrm2(N, X, incX);
            return __ret;
        }

        public static double Dzasum(int N, global::System.IntPtr X, int incX)
        {
            var __ret = __Internal.Dzasum(N, X, incX);
            return __ret;
        }

        public static ulong Isamax(int N, ref float X, int incX)
        {
            fixed (float* __refParamPtr1 = &X)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.Isamax(N, __arg1, incX);
                return __ret;
            }
        }

        public static ulong Idamax(int N, ref double X, int incX)
        {
            fixed (double* __refParamPtr1 = &X)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.Idamax(N, __arg1, incX);
                return __ret;
            }
        }

        public static ulong Icamax(int N, global::System.IntPtr X, int incX)
        {
            var __ret = __Internal.Icamax(N, X, incX);
            return __ret;
        }

        public static ulong Izamax(int N, global::System.IntPtr X, int incX)
        {
            var __ret = __Internal.Izamax(N, X, incX);
            return __ret;
        }

        public static ulong Isamin(int N, ref float X, int incX)
        {
            fixed (float* __refParamPtr1 = &X)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.Isamin(N, __arg1, incX);
                return __ret;
            }
        }

        public static ulong Idamin(int N, ref double X, int incX)
        {
            fixed (double* __refParamPtr1 = &X)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.Idamin(N, __arg1, incX);
                return __ret;
            }
        }

        public static ulong Icamin(int N, global::System.IntPtr X, int incX)
        {
            var __ret = __Internal.Icamin(N, X, incX);
            return __ret;
        }

        public static ulong Izamin(int N, global::System.IntPtr X, int incX)
        {
            var __ret = __Internal.Izamin(N, X, incX);
            return __ret;
        }

        public static void Sswap(int N, ref float X, int incX, ref float Y, int incY)
        {
            fixed (float* __refParamPtr1 = &X)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr3 = &Y)
                {
                    var __arg3 = __refParamPtr3;
                    __Internal.Sswap(N, __arg1, incX, __arg3, incY);
                }
            }
        }

        public static void Scopy(int N, ref float X, int incX, ref float Y, int incY)
        {
            fixed (float* __refParamPtr1 = &X)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr3 = &Y)
                {
                    var __arg3 = __refParamPtr3;
                    __Internal.Scopy(N, __arg1, incX, __arg3, incY);
                }
            }
        }

        public static void Saxpy(int N, float alpha, ref float X, int incX, ref float Y, int incY)
        {
            fixed (float* __refParamPtr2 = &X)
            {
                var __arg2 = __refParamPtr2;
                fixed (float* __refParamPtr4 = &Y)
                {
                    var __arg4 = __refParamPtr4;
                    __Internal.Saxpy(N, alpha, __arg2, incX, __arg4, incY);
                }
            }
        }

        public static void Saxpby(int N, float alpha, ref float X, int incX, float beta, ref float Y, int incY)
        {
            fixed (float* __refParamPtr2 = &X)
            {
                var __arg2 = __refParamPtr2;
                fixed (float* __refParamPtr5 = &Y)
                {
                    var __arg5 = __refParamPtr5;
                    __Internal.Saxpby(N, alpha, __arg2, incX, beta, __arg5, incY);
                }
            }
        }

        public static void Saxpyi(int N, float alpha, ref float X, ref int indx, ref float Y)
        {
            fixed (float* __refParamPtr2 = &X)
            {
                var __arg2 = __refParamPtr2;
                fixed (int* __refParamPtr3 = &indx)
                {
                    var __arg3 = __refParamPtr3;
                    fixed (float* __refParamPtr4 = &Y)
                    {
                        var __arg4 = __refParamPtr4;
                        __Internal.Saxpyi(N, alpha, __arg2, __arg3, __arg4);
                    }
                }
            }
        }

        public static void Sgthr(int N, ref float Y, ref float X, ref int indx)
        {
            fixed (float* __refParamPtr1 = &Y)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &X)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &indx)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.Sgthr(N, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void Sgthrz(int N, ref float Y, ref float X, ref int indx)
        {
            fixed (float* __refParamPtr1 = &Y)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &X)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &indx)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.Sgthrz(N, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void Ssctr(int N, ref float X, ref int indx, ref float Y)
        {
            fixed (float* __refParamPtr1 = &X)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &indx)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &Y)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.Ssctr(N, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void Srotg(ref float a, ref float b, ref float c, ref float s)
        {
            fixed (float* __refParamPtr0 = &a)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &b)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &c)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (float* __refParamPtr3 = &s)
                        {
                            var __arg3 = __refParamPtr3;
                            __Internal.Srotg(__arg0, __arg1, __arg2, __arg3);
                        }
                    }
                }
            }
        }

        public static void Dswap(int N, ref double X, int incX, ref double Y, int incY)
        {
            fixed (double* __refParamPtr1 = &X)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr3 = &Y)
                {
                    var __arg3 = __refParamPtr3;
                    __Internal.Dswap(N, __arg1, incX, __arg3, incY);
                }
            }
        }

        public static void Dcopy(int N, ref double X, int incX, ref double Y, int incY)
        {
            fixed (double* __refParamPtr1 = &X)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr3 = &Y)
                {
                    var __arg3 = __refParamPtr3;
                    __Internal.Dcopy(N, __arg1, incX, __arg3, incY);
                }
            }
        }

        public static void Daxpy(int N, double alpha, ref double X, int incX, ref double Y, int incY)
        {
            fixed (double* __refParamPtr2 = &X)
            {
                var __arg2 = __refParamPtr2;
                fixed (double* __refParamPtr4 = &Y)
                {
                    var __arg4 = __refParamPtr4;
                    __Internal.Daxpy(N, alpha, __arg2, incX, __arg4, incY);
                }
            }
        }

        public static void Daxpby(int N, double alpha, ref double X, int incX, double beta, ref double Y, int incY)
        {
            fixed (double* __refParamPtr2 = &X)
            {
                var __arg2 = __refParamPtr2;
                fixed (double* __refParamPtr5 = &Y)
                {
                    var __arg5 = __refParamPtr5;
                    __Internal.Daxpby(N, alpha, __arg2, incX, beta, __arg5, incY);
                }
            }
        }

        public static void Daxpyi(int N, double alpha, ref double X, ref int indx, ref double Y)
        {
            fixed (double* __refParamPtr2 = &X)
            {
                var __arg2 = __refParamPtr2;
                fixed (int* __refParamPtr3 = &indx)
                {
                    var __arg3 = __refParamPtr3;
                    fixed (double* __refParamPtr4 = &Y)
                    {
                        var __arg4 = __refParamPtr4;
                        __Internal.Daxpyi(N, alpha, __arg2, __arg3, __arg4);
                    }
                }
            }
        }

        public static void Dgthr(int N, ref double Y, ref double X, ref int indx)
        {
            fixed (double* __refParamPtr1 = &Y)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &X)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &indx)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.Dgthr(N, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void Dgthrz(int N, ref double Y, ref double X, ref int indx)
        {
            fixed (double* __refParamPtr1 = &Y)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &X)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &indx)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.Dgthrz(N, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void Dsctr(int N, ref double X, ref int indx, ref double Y)
        {
            fixed (double* __refParamPtr1 = &X)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &indx)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &Y)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.Dsctr(N, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public static void Drotg(ref double a, ref double b, ref double c, ref double s)
        {
            fixed (double* __refParamPtr0 = &a)
            {
                var __arg0 = __refParamPtr0;
                fixed (double* __refParamPtr1 = &b)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (double* __refParamPtr2 = &c)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (double* __refParamPtr3 = &s)
                        {
                            var __arg3 = __refParamPtr3;
                            __Internal.Drotg(__arg0, __arg1, __arg2, __arg3);
                        }
                    }
                }
            }
        }

        public static void Cswap(int N, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY)
        {
            __Internal.Cswap(N, X, incX, Y, incY);
        }

        public static void Ccopy(int N, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY)
        {
            __Internal.Ccopy(N, X, incX, Y, incY);
        }

        public static void Caxpy(int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY)
        {
            __Internal.Caxpy(N, alpha, X, incX, Y, incY);
        }

        public static void Caxpby(int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY)
        {
            __Internal.Caxpby(N, alpha, X, incX, beta, Y, incY);
        }

        public static void Caxpyi(int N, global::System.IntPtr alpha, global::System.IntPtr X, ref int indx, global::System.IntPtr Y)
        {
            fixed (int* __refParamPtr3 = &indx)
            {
                var __arg3 = __refParamPtr3;
                __Internal.Caxpyi(N, alpha, X, __arg3, Y);
            }
        }

        public static void Cgthr(int N, global::System.IntPtr Y, global::System.IntPtr X, ref int indx)
        {
            fixed (int* __refParamPtr3 = &indx)
            {
                var __arg3 = __refParamPtr3;
                __Internal.Cgthr(N, Y, X, __arg3);
            }
        }

        public static void Cgthrz(int N, global::System.IntPtr Y, global::System.IntPtr X, ref int indx)
        {
            fixed (int* __refParamPtr3 = &indx)
            {
                var __arg3 = __refParamPtr3;
                __Internal.Cgthrz(N, Y, X, __arg3);
            }
        }

        public static void Csctr(int N, global::System.IntPtr X, ref int indx, global::System.IntPtr Y)
        {
            fixed (int* __refParamPtr2 = &indx)
            {
                var __arg2 = __refParamPtr2;
                __Internal.Csctr(N, X, __arg2, Y);
            }
        }

        public static void Crotg(global::System.IntPtr a, global::System.IntPtr b, ref float c, global::System.IntPtr s)
        {
            fixed (float* __refParamPtr2 = &c)
            {
                var __arg2 = __refParamPtr2;
                __Internal.Crotg(a, b, __arg2, s);
            }
        }

        public static void Zswap(int N, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY)
        {
            __Internal.Zswap(N, X, incX, Y, incY);
        }

        public static void Zcopy(int N, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY)
        {
            __Internal.Zcopy(N, X, incX, Y, incY);
        }

        public static void Zaxpy(int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY)
        {
            __Internal.Zaxpy(N, alpha, X, incX, Y, incY);
        }

        public static void Zaxpby(int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY)
        {
            __Internal.Zaxpby(N, alpha, X, incX, beta, Y, incY);
        }

        public static void Zaxpyi(int N, global::System.IntPtr alpha, global::System.IntPtr X, ref int indx, global::System.IntPtr Y)
        {
            fixed (int* __refParamPtr3 = &indx)
            {
                var __arg3 = __refParamPtr3;
                __Internal.Zaxpyi(N, alpha, X, __arg3, Y);
            }
        }

        public static void Zgthr(int N, global::System.IntPtr Y, global::System.IntPtr X, ref int indx)
        {
            fixed (int* __refParamPtr3 = &indx)
            {
                var __arg3 = __refParamPtr3;
                __Internal.Zgthr(N, Y, X, __arg3);
            }
        }

        public static void Zgthrz(int N, global::System.IntPtr Y, global::System.IntPtr X, ref int indx)
        {
            fixed (int* __refParamPtr3 = &indx)
            {
                var __arg3 = __refParamPtr3;
                __Internal.Zgthrz(N, Y, X, __arg3);
            }
        }

        public static void Zsctr(int N, global::System.IntPtr X, ref int indx, global::System.IntPtr Y)
        {
            fixed (int* __refParamPtr2 = &indx)
            {
                var __arg2 = __refParamPtr2;
                __Internal.Zsctr(N, X, __arg2, Y);
            }
        }

        public static void Zrotg(global::System.IntPtr a, global::System.IntPtr b, ref double c, global::System.IntPtr s)
        {
            fixed (double* __refParamPtr2 = &c)
            {
                var __arg2 = __refParamPtr2;
                __Internal.Zrotg(a, b, __arg2, s);
            }
        }

        public static void Srotmg(ref float d1, ref float d2, ref float b1, float b2, ref float P)
        {
            fixed (float* __refParamPtr0 = &d1)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &d2)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &b1)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (float* __refParamPtr4 = &P)
                        {
                            var __arg4 = __refParamPtr4;
                            __Internal.Srotmg(__arg0, __arg1, __arg2, b2, __arg4);
                        }
                    }
                }
            }
        }

        public static void Srot(int N, ref float X, int incX, ref float Y, int incY, float c, float s)
        {
            fixed (float* __refParamPtr1 = &X)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr3 = &Y)
                {
                    var __arg3 = __refParamPtr3;
                    __Internal.Srot(N, __arg1, incX, __arg3, incY, c, s);
                }
            }
        }

        public static void Sroti(int N, ref float X, ref int indx, ref float Y, float c, float s)
        {
            fixed (float* __refParamPtr1 = &X)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &indx)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &Y)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.Sroti(N, __arg1, __arg2, __arg3, c, s);
                    }
                }
            }
        }

        public static void Srotm(int N, ref float X, int incX, ref float Y, int incY, ref float P)
        {
            fixed (float* __refParamPtr1 = &X)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr3 = &Y)
                {
                    var __arg3 = __refParamPtr3;
                    fixed (float* __refParamPtr5 = &P)
                    {
                        var __arg5 = __refParamPtr5;
                        __Internal.Srotm(N, __arg1, incX, __arg3, incY, __arg5);
                    }
                }
            }
        }

        public static void Drotmg(ref double d1, ref double d2, ref double b1, double b2, ref double P)
        {
            fixed (double* __refParamPtr0 = &d1)
            {
                var __arg0 = __refParamPtr0;
                fixed (double* __refParamPtr1 = &d2)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (double* __refParamPtr2 = &b1)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (double* __refParamPtr4 = &P)
                        {
                            var __arg4 = __refParamPtr4;
                            __Internal.Drotmg(__arg0, __arg1, __arg2, b2, __arg4);
                        }
                    }
                }
            }
        }

        public static void Drot(int N, ref double X, int incX, ref double Y, int incY, double c, double s)
        {
            fixed (double* __refParamPtr1 = &X)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr3 = &Y)
                {
                    var __arg3 = __refParamPtr3;
                    __Internal.Drot(N, __arg1, incX, __arg3, incY, c, s);
                }
            }
        }

        public static void Drotm(int N, ref double X, int incX, ref double Y, int incY, ref double P)
        {
            fixed (double* __refParamPtr1 = &X)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr3 = &Y)
                {
                    var __arg3 = __refParamPtr3;
                    fixed (double* __refParamPtr5 = &P)
                    {
                        var __arg5 = __refParamPtr5;
                        __Internal.Drotm(N, __arg1, incX, __arg3, incY, __arg5);
                    }
                }
            }
        }

        public static void Droti(int N, ref double X, ref int indx, ref double Y, double c, double s)
        {
            fixed (double* __refParamPtr1 = &X)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &indx)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &Y)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.Droti(N, __arg1, __arg2, __arg3, c, s);
                    }
                }
            }
        }

        public static void Csrot(int N, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, float c, float s)
        {
            __Internal.Csrot(N, X, incX, Y, incY, c, s);
        }

        public static void Zdrot(int N, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, double c, double s)
        {
            __Internal.Zdrot(N, X, incX, Y, incY, c, s);
        }

        public static void Sscal(int N, float alpha, ref float X, int incX)
        {
            fixed (float* __refParamPtr2 = &X)
            {
                var __arg2 = __refParamPtr2;
                __Internal.Sscal(N, alpha, __arg2, incX);
            }
        }

        public static void Dscal(int N, double alpha, ref double X, int incX)
        {
            fixed (double* __refParamPtr2 = &X)
            {
                var __arg2 = __refParamPtr2;
                __Internal.Dscal(N, alpha, __arg2, incX);
            }
        }

        public static void Cscal(int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX)
        {
            __Internal.Cscal(N, alpha, X, incX);
        }

        public static void Zscal(int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX)
        {
            __Internal.Zscal(N, alpha, X, incX);
        }

        public static void Csscal(int N, float alpha, global::System.IntPtr X, int incX)
        {
            __Internal.Csscal(N, alpha, X, incX);
        }

        public static void Zdscal(int N, double alpha, global::System.IntPtr X, int incX)
        {
            __Internal.Zdscal(N, alpha, X, incX);
        }

        public static void Sgemv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, int M, int N, float alpha, ref float A, int lda, ref float X, int incX, float beta, ref float Y, int incY)
        {
            fixed (float* __refParamPtr5 = &A)
            {
                var __arg5 = __refParamPtr5;
                fixed (float* __refParamPtr7 = &X)
                {
                    var __arg7 = __refParamPtr7;
                    fixed (float* __refParamPtr10 = &Y)
                    {
                        var __arg10 = __refParamPtr10;
                        __Internal.Sgemv(Layout, TransA, M, N, alpha, __arg5, lda, __arg7, incX, beta, __arg10, incY);
                    }
                }
            }
        }

        public static void Sgbmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, int M, int N, int KL, int KU, float alpha, ref float A, int lda, ref float X, int incX, float beta, ref float Y, int incY)
        {
            fixed (float* __refParamPtr7 = &A)
            {
                var __arg7 = __refParamPtr7;
                fixed (float* __refParamPtr9 = &X)
                {
                    var __arg9 = __refParamPtr9;
                    fixed (float* __refParamPtr12 = &Y)
                    {
                        var __arg12 = __refParamPtr12;
                        __Internal.Sgbmv(Layout, TransA, M, N, KL, KU, alpha, __arg7, lda, __arg9, incX, beta, __arg12, incY);
                    }
                }
            }
        }

        public static void Strmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, ref float A, int lda, ref float X, int incX)
        {
            fixed (float* __refParamPtr5 = &A)
            {
                var __arg5 = __refParamPtr5;
                fixed (float* __refParamPtr7 = &X)
                {
                    var __arg7 = __refParamPtr7;
                    __Internal.Strmv(Layout, Uplo, TransA, Diag, N, __arg5, lda, __arg7, incX);
                }
            }
        }

        public static void Stbmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, int K, ref float A, int lda, ref float X, int incX)
        {
            fixed (float* __refParamPtr6 = &A)
            {
                var __arg6 = __refParamPtr6;
                fixed (float* __refParamPtr8 = &X)
                {
                    var __arg8 = __refParamPtr8;
                    __Internal.Stbmv(Layout, Uplo, TransA, Diag, N, K, __arg6, lda, __arg8, incX);
                }
            }
        }

        public static void Stpmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, ref float Ap, ref float X, int incX)
        {
            fixed (float* __refParamPtr5 = &Ap)
            {
                var __arg5 = __refParamPtr5;
                fixed (float* __refParamPtr6 = &X)
                {
                    var __arg6 = __refParamPtr6;
                    __Internal.Stpmv(Layout, Uplo, TransA, Diag, N, __arg5, __arg6, incX);
                }
            }
        }

        public static void Strsv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, ref float A, int lda, ref float X, int incX)
        {
            fixed (float* __refParamPtr5 = &A)
            {
                var __arg5 = __refParamPtr5;
                fixed (float* __refParamPtr7 = &X)
                {
                    var __arg7 = __refParamPtr7;
                    __Internal.Strsv(Layout, Uplo, TransA, Diag, N, __arg5, lda, __arg7, incX);
                }
            }
        }

        public static void Stbsv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, int K, ref float A, int lda, ref float X, int incX)
        {
            fixed (float* __refParamPtr6 = &A)
            {
                var __arg6 = __refParamPtr6;
                fixed (float* __refParamPtr8 = &X)
                {
                    var __arg8 = __refParamPtr8;
                    __Internal.Stbsv(Layout, Uplo, TransA, Diag, N, K, __arg6, lda, __arg8, incX);
                }
            }
        }

        public static void Stpsv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, ref float Ap, ref float X, int incX)
        {
            fixed (float* __refParamPtr5 = &Ap)
            {
                var __arg5 = __refParamPtr5;
                fixed (float* __refParamPtr6 = &X)
                {
                    var __arg6 = __refParamPtr6;
                    __Internal.Stpsv(Layout, Uplo, TransA, Diag, N, __arg5, __arg6, incX);
                }
            }
        }

        public static void Dgemv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, int M, int N, double alpha, ref double A, int lda, ref double X, int incX, double beta, ref double Y, int incY)
        {
            fixed (double* __refParamPtr5 = &A)
            {
                var __arg5 = __refParamPtr5;
                fixed (double* __refParamPtr7 = &X)
                {
                    var __arg7 = __refParamPtr7;
                    fixed (double* __refParamPtr10 = &Y)
                    {
                        var __arg10 = __refParamPtr10;
                        __Internal.Dgemv(Layout, TransA, M, N, alpha, __arg5, lda, __arg7, incX, beta, __arg10, incY);
                    }
                }
            }
        }

        public static void Dgbmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, int M, int N, int KL, int KU, double alpha, ref double A, int lda, ref double X, int incX, double beta, ref double Y, int incY)
        {
            fixed (double* __refParamPtr7 = &A)
            {
                var __arg7 = __refParamPtr7;
                fixed (double* __refParamPtr9 = &X)
                {
                    var __arg9 = __refParamPtr9;
                    fixed (double* __refParamPtr12 = &Y)
                    {
                        var __arg12 = __refParamPtr12;
                        __Internal.Dgbmv(Layout, TransA, M, N, KL, KU, alpha, __arg7, lda, __arg9, incX, beta, __arg12, incY);
                    }
                }
            }
        }

        public static void Dtrmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, ref double A, int lda, ref double X, int incX)
        {
            fixed (double* __refParamPtr5 = &A)
            {
                var __arg5 = __refParamPtr5;
                fixed (double* __refParamPtr7 = &X)
                {
                    var __arg7 = __refParamPtr7;
                    __Internal.Dtrmv(Layout, Uplo, TransA, Diag, N, __arg5, lda, __arg7, incX);
                }
            }
        }

        public static void Dtbmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, int K, ref double A, int lda, ref double X, int incX)
        {
            fixed (double* __refParamPtr6 = &A)
            {
                var __arg6 = __refParamPtr6;
                fixed (double* __refParamPtr8 = &X)
                {
                    var __arg8 = __refParamPtr8;
                    __Internal.Dtbmv(Layout, Uplo, TransA, Diag, N, K, __arg6, lda, __arg8, incX);
                }
            }
        }

        public static void Dtpmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, ref double Ap, ref double X, int incX)
        {
            fixed (double* __refParamPtr5 = &Ap)
            {
                var __arg5 = __refParamPtr5;
                fixed (double* __refParamPtr6 = &X)
                {
                    var __arg6 = __refParamPtr6;
                    __Internal.Dtpmv(Layout, Uplo, TransA, Diag, N, __arg5, __arg6, incX);
                }
            }
        }

        public static void Dtrsv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, ref double A, int lda, ref double X, int incX)
        {
            fixed (double* __refParamPtr5 = &A)
            {
                var __arg5 = __refParamPtr5;
                fixed (double* __refParamPtr7 = &X)
                {
                    var __arg7 = __refParamPtr7;
                    __Internal.Dtrsv(Layout, Uplo, TransA, Diag, N, __arg5, lda, __arg7, incX);
                }
            }
        }

        public static void Dtbsv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, int K, ref double A, int lda, ref double X, int incX)
        {
            fixed (double* __refParamPtr6 = &A)
            {
                var __arg6 = __refParamPtr6;
                fixed (double* __refParamPtr8 = &X)
                {
                    var __arg8 = __refParamPtr8;
                    __Internal.Dtbsv(Layout, Uplo, TransA, Diag, N, K, __arg6, lda, __arg8, incX);
                }
            }
        }

        public static void Dtpsv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, ref double Ap, ref double X, int incX)
        {
            fixed (double* __refParamPtr5 = &Ap)
            {
                var __arg5 = __refParamPtr5;
                fixed (double* __refParamPtr6 = &X)
                {
                    var __arg6 = __refParamPtr6;
                    __Internal.Dtpsv(Layout, Uplo, TransA, Diag, N, __arg5, __arg6, incX);
                }
            }
        }

        public static void Cgemv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY)
        {
            __Internal.Cgemv(Layout, TransA, M, N, alpha, A, lda, X, incX, beta, Y, incY);
        }

        public static void Cgbmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, int M, int N, int KL, int KU, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY)
        {
            __Internal.Cgbmv(Layout, TransA, M, N, KL, KU, alpha, A, lda, X, incX, beta, Y, incY);
        }

        public static void Ctrmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX)
        {
            __Internal.Ctrmv(Layout, Uplo, TransA, Diag, N, A, lda, X, incX);
        }

        public static void Ctbmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, int K, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX)
        {
            __Internal.Ctbmv(Layout, Uplo, TransA, Diag, N, K, A, lda, X, incX);
        }

        public static void Ctpmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, global::System.IntPtr Ap, global::System.IntPtr X, int incX)
        {
            __Internal.Ctpmv(Layout, Uplo, TransA, Diag, N, Ap, X, incX);
        }

        public static void Ctrsv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX)
        {
            __Internal.Ctrsv(Layout, Uplo, TransA, Diag, N, A, lda, X, incX);
        }

        public static void Ctbsv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, int K, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX)
        {
            __Internal.Ctbsv(Layout, Uplo, TransA, Diag, N, K, A, lda, X, incX);
        }

        public static void Ctpsv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, global::System.IntPtr Ap, global::System.IntPtr X, int incX)
        {
            __Internal.Ctpsv(Layout, Uplo, TransA, Diag, N, Ap, X, incX);
        }

        public static void Zgemv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY)
        {
            __Internal.Zgemv(Layout, TransA, M, N, alpha, A, lda, X, incX, beta, Y, incY);
        }

        public static void Zgbmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, int M, int N, int KL, int KU, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY)
        {
            __Internal.Zgbmv(Layout, TransA, M, N, KL, KU, alpha, A, lda, X, incX, beta, Y, incY);
        }

        public static void Ztrmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX)
        {
            __Internal.Ztrmv(Layout, Uplo, TransA, Diag, N, A, lda, X, incX);
        }

        public static void Ztbmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, int K, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX)
        {
            __Internal.Ztbmv(Layout, Uplo, TransA, Diag, N, K, A, lda, X, incX);
        }

        public static void Ztpmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, global::System.IntPtr Ap, global::System.IntPtr X, int incX)
        {
            __Internal.Ztpmv(Layout, Uplo, TransA, Diag, N, Ap, X, incX);
        }

        public static void Ztrsv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX)
        {
            __Internal.Ztrsv(Layout, Uplo, TransA, Diag, N, A, lda, X, incX);
        }

        public static void Ztbsv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, int K, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX)
        {
            __Internal.Ztbsv(Layout, Uplo, TransA, Diag, N, K, A, lda, X, incX);
        }

        public static void Ztpsv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int N, global::System.IntPtr Ap, global::System.IntPtr X, int incX)
        {
            __Internal.Ztpsv(Layout, Uplo, TransA, Diag, N, Ap, X, incX);
        }

        public static void Ssymv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, float alpha, ref float A, int lda, ref float X, int incX, float beta, ref float Y, int incY)
        {
            fixed (float* __refParamPtr4 = &A)
            {
                var __arg4 = __refParamPtr4;
                fixed (float* __refParamPtr6 = &X)
                {
                    var __arg6 = __refParamPtr6;
                    fixed (float* __refParamPtr9 = &Y)
                    {
                        var __arg9 = __refParamPtr9;
                        __Internal.Ssymv(Layout, Uplo, N, alpha, __arg4, lda, __arg6, incX, beta, __arg9, incY);
                    }
                }
            }
        }

        public static void Ssbmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, int K, float alpha, ref float A, int lda, ref float X, int incX, float beta, ref float Y, int incY)
        {
            fixed (float* __refParamPtr5 = &A)
            {
                var __arg5 = __refParamPtr5;
                fixed (float* __refParamPtr7 = &X)
                {
                    var __arg7 = __refParamPtr7;
                    fixed (float* __refParamPtr10 = &Y)
                    {
                        var __arg10 = __refParamPtr10;
                        __Internal.Ssbmv(Layout, Uplo, N, K, alpha, __arg5, lda, __arg7, incX, beta, __arg10, incY);
                    }
                }
            }
        }

        public static void Sspmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, float alpha, ref float Ap, ref float X, int incX, float beta, ref float Y, int incY)
        {
            fixed (float* __refParamPtr4 = &Ap)
            {
                var __arg4 = __refParamPtr4;
                fixed (float* __refParamPtr5 = &X)
                {
                    var __arg5 = __refParamPtr5;
                    fixed (float* __refParamPtr8 = &Y)
                    {
                        var __arg8 = __refParamPtr8;
                        __Internal.Sspmv(Layout, Uplo, N, alpha, __arg4, __arg5, incX, beta, __arg8, incY);
                    }
                }
            }
        }

        public static void Sger(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, int M, int N, float alpha, ref float X, int incX, ref float Y, int incY, ref float A, int lda)
        {
            fixed (float* __refParamPtr4 = &X)
            {
                var __arg4 = __refParamPtr4;
                fixed (float* __refParamPtr6 = &Y)
                {
                    var __arg6 = __refParamPtr6;
                    fixed (float* __refParamPtr8 = &A)
                    {
                        var __arg8 = __refParamPtr8;
                        __Internal.Sger(Layout, M, N, alpha, __arg4, incX, __arg6, incY, __arg8, lda);
                    }
                }
            }
        }

        public static void Ssyr(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, float alpha, ref float X, int incX, ref float A, int lda)
        {
            fixed (float* __refParamPtr4 = &X)
            {
                var __arg4 = __refParamPtr4;
                fixed (float* __refParamPtr6 = &A)
                {
                    var __arg6 = __refParamPtr6;
                    __Internal.Ssyr(Layout, Uplo, N, alpha, __arg4, incX, __arg6, lda);
                }
            }
        }

        public static void Sspr(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, float alpha, ref float X, int incX, ref float Ap)
        {
            fixed (float* __refParamPtr4 = &X)
            {
                var __arg4 = __refParamPtr4;
                fixed (float* __refParamPtr6 = &Ap)
                {
                    var __arg6 = __refParamPtr6;
                    __Internal.Sspr(Layout, Uplo, N, alpha, __arg4, incX, __arg6);
                }
            }
        }

        public static void Ssyr2(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, float alpha, ref float X, int incX, ref float Y, int incY, ref float A, int lda)
        {
            fixed (float* __refParamPtr4 = &X)
            {
                var __arg4 = __refParamPtr4;
                fixed (float* __refParamPtr6 = &Y)
                {
                    var __arg6 = __refParamPtr6;
                    fixed (float* __refParamPtr8 = &A)
                    {
                        var __arg8 = __refParamPtr8;
                        __Internal.Ssyr2(Layout, Uplo, N, alpha, __arg4, incX, __arg6, incY, __arg8, lda);
                    }
                }
            }
        }

        public static void Sspr2(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, float alpha, ref float X, int incX, ref float Y, int incY, ref float A)
        {
            fixed (float* __refParamPtr4 = &X)
            {
                var __arg4 = __refParamPtr4;
                fixed (float* __refParamPtr6 = &Y)
                {
                    var __arg6 = __refParamPtr6;
                    fixed (float* __refParamPtr8 = &A)
                    {
                        var __arg8 = __refParamPtr8;
                        __Internal.Sspr2(Layout, Uplo, N, alpha, __arg4, incX, __arg6, incY, __arg8);
                    }
                }
            }
        }

        public static void Dsymv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, double alpha, ref double A, int lda, ref double X, int incX, double beta, ref double Y, int incY)
        {
            fixed (double* __refParamPtr4 = &A)
            {
                var __arg4 = __refParamPtr4;
                fixed (double* __refParamPtr6 = &X)
                {
                    var __arg6 = __refParamPtr6;
                    fixed (double* __refParamPtr9 = &Y)
                    {
                        var __arg9 = __refParamPtr9;
                        __Internal.Dsymv(Layout, Uplo, N, alpha, __arg4, lda, __arg6, incX, beta, __arg9, incY);
                    }
                }
            }
        }

        public static void Dsbmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, int K, double alpha, ref double A, int lda, ref double X, int incX, double beta, ref double Y, int incY)
        {
            fixed (double* __refParamPtr5 = &A)
            {
                var __arg5 = __refParamPtr5;
                fixed (double* __refParamPtr7 = &X)
                {
                    var __arg7 = __refParamPtr7;
                    fixed (double* __refParamPtr10 = &Y)
                    {
                        var __arg10 = __refParamPtr10;
                        __Internal.Dsbmv(Layout, Uplo, N, K, alpha, __arg5, lda, __arg7, incX, beta, __arg10, incY);
                    }
                }
            }
        }

        public static void Dspmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, double alpha, ref double Ap, ref double X, int incX, double beta, ref double Y, int incY)
        {
            fixed (double* __refParamPtr4 = &Ap)
            {
                var __arg4 = __refParamPtr4;
                fixed (double* __refParamPtr5 = &X)
                {
                    var __arg5 = __refParamPtr5;
                    fixed (double* __refParamPtr8 = &Y)
                    {
                        var __arg8 = __refParamPtr8;
                        __Internal.Dspmv(Layout, Uplo, N, alpha, __arg4, __arg5, incX, beta, __arg8, incY);
                    }
                }
            }
        }

        public static void Dger(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, int M, int N, double alpha, ref double X, int incX, ref double Y, int incY, ref double A, int lda)
        {
            fixed (double* __refParamPtr4 = &X)
            {
                var __arg4 = __refParamPtr4;
                fixed (double* __refParamPtr6 = &Y)
                {
                    var __arg6 = __refParamPtr6;
                    fixed (double* __refParamPtr8 = &A)
                    {
                        var __arg8 = __refParamPtr8;
                        __Internal.Dger(Layout, M, N, alpha, __arg4, incX, __arg6, incY, __arg8, lda);
                    }
                }
            }
        }

        public static void Dsyr(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, double alpha, ref double X, int incX, ref double A, int lda)
        {
            fixed (double* __refParamPtr4 = &X)
            {
                var __arg4 = __refParamPtr4;
                fixed (double* __refParamPtr6 = &A)
                {
                    var __arg6 = __refParamPtr6;
                    __Internal.Dsyr(Layout, Uplo, N, alpha, __arg4, incX, __arg6, lda);
                }
            }
        }

        public static void Dspr(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, double alpha, ref double X, int incX, ref double Ap)
        {
            fixed (double* __refParamPtr4 = &X)
            {
                var __arg4 = __refParamPtr4;
                fixed (double* __refParamPtr6 = &Ap)
                {
                    var __arg6 = __refParamPtr6;
                    __Internal.Dspr(Layout, Uplo, N, alpha, __arg4, incX, __arg6);
                }
            }
        }

        public static void Dsyr2(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, double alpha, ref double X, int incX, ref double Y, int incY, ref double A, int lda)
        {
            fixed (double* __refParamPtr4 = &X)
            {
                var __arg4 = __refParamPtr4;
                fixed (double* __refParamPtr6 = &Y)
                {
                    var __arg6 = __refParamPtr6;
                    fixed (double* __refParamPtr8 = &A)
                    {
                        var __arg8 = __refParamPtr8;
                        __Internal.Dsyr2(Layout, Uplo, N, alpha, __arg4, incX, __arg6, incY, __arg8, lda);
                    }
                }
            }
        }

        public static void Dspr2(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, double alpha, ref double X, int incX, ref double Y, int incY, ref double A)
        {
            fixed (double* __refParamPtr4 = &X)
            {
                var __arg4 = __refParamPtr4;
                fixed (double* __refParamPtr6 = &Y)
                {
                    var __arg6 = __refParamPtr6;
                    fixed (double* __refParamPtr8 = &A)
                    {
                        var __arg8 = __refParamPtr8;
                        __Internal.Dspr2(Layout, Uplo, N, alpha, __arg4, incX, __arg6, incY, __arg8);
                    }
                }
            }
        }

        public static void Chemv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY)
        {
            __Internal.Chemv(Layout, Uplo, N, alpha, A, lda, X, incX, beta, Y, incY);
        }

        public static void Chbmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY)
        {
            __Internal.Chbmv(Layout, Uplo, N, K, alpha, A, lda, X, incX, beta, Y, incY);
        }

        public static void Chpmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, global::System.IntPtr alpha, global::System.IntPtr Ap, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY)
        {
            __Internal.Chpmv(Layout, Uplo, N, alpha, Ap, X, incX, beta, Y, incY);
        }

        public static void Cgeru(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, int M, int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr A, int lda)
        {
            __Internal.Cgeru(Layout, M, N, alpha, X, incX, Y, incY, A, lda);
        }

        public static void Cgerc(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, int M, int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr A, int lda)
        {
            __Internal.Cgerc(Layout, M, N, alpha, X, incX, Y, incY, A, lda);
        }

        public static void Cher(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, float alpha, global::System.IntPtr X, int incX, global::System.IntPtr A, int lda)
        {
            __Internal.Cher(Layout, Uplo, N, alpha, X, incX, A, lda);
        }

        public static void Chpr(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, float alpha, global::System.IntPtr X, int incX, global::System.IntPtr A)
        {
            __Internal.Chpr(Layout, Uplo, N, alpha, X, incX, A);
        }

        public static void Cher2(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr A, int lda)
        {
            __Internal.Cher2(Layout, Uplo, N, alpha, X, incX, Y, incY, A, lda);
        }

        public static void Chpr2(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr Ap)
        {
            __Internal.Chpr2(Layout, Uplo, N, alpha, X, incX, Y, incY, Ap);
        }

        public static void Zhemv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY)
        {
            __Internal.Zhemv(Layout, Uplo, N, alpha, A, lda, X, incX, beta, Y, incY);
        }

        public static void Zhbmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY)
        {
            __Internal.Zhbmv(Layout, Uplo, N, K, alpha, A, lda, X, incX, beta, Y, incY);
        }

        public static void Zhpmv(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, global::System.IntPtr alpha, global::System.IntPtr Ap, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY)
        {
            __Internal.Zhpmv(Layout, Uplo, N, alpha, Ap, X, incX, beta, Y, incY);
        }

        public static void Zgeru(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, int M, int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr A, int lda)
        {
            __Internal.Zgeru(Layout, M, N, alpha, X, incX, Y, incY, A, lda);
        }

        public static void Zgerc(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, int M, int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr A, int lda)
        {
            __Internal.Zgerc(Layout, M, N, alpha, X, incX, Y, incY, A, lda);
        }

        public static void Zher(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, double alpha, global::System.IntPtr X, int incX, global::System.IntPtr A, int lda)
        {
            __Internal.Zher(Layout, Uplo, N, alpha, X, incX, A, lda);
        }

        public static void Zhpr(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, double alpha, global::System.IntPtr X, int incX, global::System.IntPtr A)
        {
            __Internal.Zhpr(Layout, Uplo, N, alpha, X, incX, A);
        }

        public static void Zher2(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr A, int lda)
        {
            __Internal.Zher2(Layout, Uplo, N, alpha, X, incX, Y, incY, A, lda);
        }

        public static void Zhpr2(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr Ap)
        {
            __Internal.Zhpr2(Layout, Uplo, N, alpha, X, incX, Y, incY, Ap);
        }

        public static void Sgemm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransB, int M, int N, int K, float alpha, ref float A, int lda, ref float B, int ldb, float beta, ref float C, int ldc)
        {
            fixed (float* __refParamPtr7 = &A)
            {
                var __arg7 = __refParamPtr7;
                fixed (float* __refParamPtr9 = &B)
                {
                    var __arg9 = __refParamPtr9;
                    fixed (float* __refParamPtr12 = &C)
                    {
                        var __arg12 = __refParamPtr12;
                        __Internal.Sgemm(Layout, TransA, TransB, M, N, K, alpha, __arg7, lda, __arg9, ldb, beta, __arg12, ldc);
                    }
                }
            }
        }

        public static void SgemmBatch(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE* TransA_Array, global::IntelMKL.LP64.CBLAS_TRANSPOSE* TransB_Array, ref int M_Array, ref int N_Array, ref int K_Array, ref float alpha_Array, float** A_Array, ref int lda_Array, float** B_Array, ref int ldb_Array, ref float beta_Array, float** C_Array, ref int ldc_Array, int group_count, ref int group_size)
        {
            fixed (int* __refParamPtr3 = &M_Array)
            {
                var __arg3 = __refParamPtr3;
                fixed (int* __refParamPtr4 = &N_Array)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (int* __refParamPtr5 = &K_Array)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (float* __refParamPtr6 = &alpha_Array)
                        {
                            var __arg6 = __refParamPtr6;
                            fixed (int* __refParamPtr8 = &lda_Array)
                            {
                                var __arg8 = __refParamPtr8;
                                fixed (int* __refParamPtr10 = &ldb_Array)
                                {
                                    var __arg10 = __refParamPtr10;
                                    fixed (float* __refParamPtr11 = &beta_Array)
                                    {
                                        var __arg11 = __refParamPtr11;
                                        fixed (int* __refParamPtr13 = &ldc_Array)
                                        {
                                            var __arg13 = __refParamPtr13;
                                            fixed (int* __refParamPtr15 = &group_size)
                                            {
                                                var __arg15 = __refParamPtr15;
                                                __Internal.SgemmBatch(Layout, TransA_Array, TransB_Array, __arg3, __arg4, __arg5, __arg6, A_Array, __arg8, B_Array, __arg10, __arg11, C_Array, __arg13, group_count, __arg15);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Sgemmt(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransB, int N, int K, float alpha, ref float A, int lda, ref float B, int ldb, float beta, ref float C, int ldc)
        {
            fixed (float* __refParamPtr7 = &A)
            {
                var __arg7 = __refParamPtr7;
                fixed (float* __refParamPtr9 = &B)
                {
                    var __arg9 = __refParamPtr9;
                    fixed (float* __refParamPtr12 = &C)
                    {
                        var __arg12 = __refParamPtr12;
                        __Internal.Sgemmt(Layout, Uplo, TransA, TransB, N, K, alpha, __arg7, lda, __arg9, ldb, beta, __arg12, ldc);
                    }
                }
            }
        }

        public static void Ssymm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE Side, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int M, int N, float alpha, ref float A, int lda, ref float B, int ldb, float beta, ref float C, int ldc)
        {
            fixed (float* __refParamPtr6 = &A)
            {
                var __arg6 = __refParamPtr6;
                fixed (float* __refParamPtr8 = &B)
                {
                    var __arg8 = __refParamPtr8;
                    fixed (float* __refParamPtr11 = &C)
                    {
                        var __arg11 = __refParamPtr11;
                        __Internal.Ssymm(Layout, Side, Uplo, M, N, alpha, __arg6, lda, __arg8, ldb, beta, __arg11, ldc);
                    }
                }
            }
        }

        public static void Ssyrk(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE Trans, int N, int K, float alpha, ref float A, int lda, float beta, ref float C, int ldc)
        {
            fixed (float* __refParamPtr6 = &A)
            {
                var __arg6 = __refParamPtr6;
                fixed (float* __refParamPtr9 = &C)
                {
                    var __arg9 = __refParamPtr9;
                    __Internal.Ssyrk(Layout, Uplo, Trans, N, K, alpha, __arg6, lda, beta, __arg9, ldc);
                }
            }
        }

        public static void Ssyr2k(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE Trans, int N, int K, float alpha, ref float A, int lda, ref float B, int ldb, float beta, ref float C, int ldc)
        {
            fixed (float* __refParamPtr6 = &A)
            {
                var __arg6 = __refParamPtr6;
                fixed (float* __refParamPtr8 = &B)
                {
                    var __arg8 = __refParamPtr8;
                    fixed (float* __refParamPtr11 = &C)
                    {
                        var __arg11 = __refParamPtr11;
                        __Internal.Ssyr2k(Layout, Uplo, Trans, N, K, alpha, __arg6, lda, __arg8, ldb, beta, __arg11, ldc);
                    }
                }
            }
        }

        public static void Strmm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE Side, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int M, int N, float alpha, ref float A, int lda, ref float B, int ldb)
        {
            fixed (float* __refParamPtr8 = &A)
            {
                var __arg8 = __refParamPtr8;
                fixed (float* __refParamPtr10 = &B)
                {
                    var __arg10 = __refParamPtr10;
                    __Internal.Strmm(Layout, Side, Uplo, TransA, Diag, M, N, alpha, __arg8, lda, __arg10, ldb);
                }
            }
        }

        public static void Strsm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE Side, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int M, int N, float alpha, ref float A, int lda, ref float B, int ldb)
        {
            fixed (float* __refParamPtr8 = &A)
            {
                var __arg8 = __refParamPtr8;
                fixed (float* __refParamPtr10 = &B)
                {
                    var __arg10 = __refParamPtr10;
                    __Internal.Strsm(Layout, Side, Uplo, TransA, Diag, M, N, alpha, __arg8, lda, __arg10, ldb);
                }
            }
        }

        public static void StrsmBatch(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE* Side_Array, global::IntelMKL.LP64.CBLAS_UPLO* Uplo_Array, global::IntelMKL.LP64.CBLAS_TRANSPOSE* TransA_Array, global::IntelMKL.LP64.CBLAS_DIAG* Diag_Array, ref int M_Array, ref int N_Array, ref float alpha_Array, float** A_Array, ref int lda_Array, float** B_Array, ref int ldb_Array, int group_count, ref int group_size)
        {
            fixed (int* __refParamPtr5 = &M_Array)
            {
                var __arg5 = __refParamPtr5;
                fixed (int* __refParamPtr6 = &N_Array)
                {
                    var __arg6 = __refParamPtr6;
                    fixed (float* __refParamPtr7 = &alpha_Array)
                    {
                        var __arg7 = __refParamPtr7;
                        fixed (int* __refParamPtr9 = &lda_Array)
                        {
                            var __arg9 = __refParamPtr9;
                            fixed (int* __refParamPtr11 = &ldb_Array)
                            {
                                var __arg11 = __refParamPtr11;
                                fixed (int* __refParamPtr13 = &group_size)
                                {
                                    var __arg13 = __refParamPtr13;
                                    __Internal.StrsmBatch(Layout, Side_Array, Uplo_Array, TransA_Array, Diag_Array, __arg5, __arg6, __arg7, A_Array, __arg9, B_Array, __arg11, group_count, __arg13);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Dgemm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransB, int M, int N, int K, double alpha, ref double A, int lda, ref double B, int ldb, double beta, ref double C, int ldc)
        {
            fixed (double* __refParamPtr7 = &A)
            {
                var __arg7 = __refParamPtr7;
                fixed (double* __refParamPtr9 = &B)
                {
                    var __arg9 = __refParamPtr9;
                    fixed (double* __refParamPtr12 = &C)
                    {
                        var __arg12 = __refParamPtr12;
                        __Internal.Dgemm(Layout, TransA, TransB, M, N, K, alpha, __arg7, lda, __arg9, ldb, beta, __arg12, ldc);
                    }
                }
            }
        }

        public static void DgemmBatch(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE* TransA_Array, global::IntelMKL.LP64.CBLAS_TRANSPOSE* TransB_Array, ref int M_Array, ref int N_Array, ref int K_Array, ref double alpha_Array, double** A_Array, ref int lda_Array, double** B_Array, ref int ldb_Array, ref double beta_Array, double** C_Array, ref int ldc_Array, int group_count, ref int group_size)
        {
            fixed (int* __refParamPtr3 = &M_Array)
            {
                var __arg3 = __refParamPtr3;
                fixed (int* __refParamPtr4 = &N_Array)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (int* __refParamPtr5 = &K_Array)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (double* __refParamPtr6 = &alpha_Array)
                        {
                            var __arg6 = __refParamPtr6;
                            fixed (int* __refParamPtr8 = &lda_Array)
                            {
                                var __arg8 = __refParamPtr8;
                                fixed (int* __refParamPtr10 = &ldb_Array)
                                {
                                    var __arg10 = __refParamPtr10;
                                    fixed (double* __refParamPtr11 = &beta_Array)
                                    {
                                        var __arg11 = __refParamPtr11;
                                        fixed (int* __refParamPtr13 = &ldc_Array)
                                        {
                                            var __arg13 = __refParamPtr13;
                                            fixed (int* __refParamPtr15 = &group_size)
                                            {
                                                var __arg15 = __refParamPtr15;
                                                __Internal.DgemmBatch(Layout, TransA_Array, TransB_Array, __arg3, __arg4, __arg5, __arg6, A_Array, __arg8, B_Array, __arg10, __arg11, C_Array, __arg13, group_count, __arg15);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Dgemmt(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransB, int N, int K, double alpha, ref double A, int lda, ref double B, int ldb, double beta, ref double C, int ldc)
        {
            fixed (double* __refParamPtr7 = &A)
            {
                var __arg7 = __refParamPtr7;
                fixed (double* __refParamPtr9 = &B)
                {
                    var __arg9 = __refParamPtr9;
                    fixed (double* __refParamPtr12 = &C)
                    {
                        var __arg12 = __refParamPtr12;
                        __Internal.Dgemmt(Layout, Uplo, TransA, TransB, N, K, alpha, __arg7, lda, __arg9, ldb, beta, __arg12, ldc);
                    }
                }
            }
        }

        public static void Dsymm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE Side, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int M, int N, double alpha, ref double A, int lda, ref double B, int ldb, double beta, ref double C, int ldc)
        {
            fixed (double* __refParamPtr6 = &A)
            {
                var __arg6 = __refParamPtr6;
                fixed (double* __refParamPtr8 = &B)
                {
                    var __arg8 = __refParamPtr8;
                    fixed (double* __refParamPtr11 = &C)
                    {
                        var __arg11 = __refParamPtr11;
                        __Internal.Dsymm(Layout, Side, Uplo, M, N, alpha, __arg6, lda, __arg8, ldb, beta, __arg11, ldc);
                    }
                }
            }
        }

        public static void Dsyrk(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE Trans, int N, int K, double alpha, ref double A, int lda, double beta, ref double C, int ldc)
        {
            fixed (double* __refParamPtr6 = &A)
            {
                var __arg6 = __refParamPtr6;
                fixed (double* __refParamPtr9 = &C)
                {
                    var __arg9 = __refParamPtr9;
                    __Internal.Dsyrk(Layout, Uplo, Trans, N, K, alpha, __arg6, lda, beta, __arg9, ldc);
                }
            }
        }

        public static void Dsyr2k(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE Trans, int N, int K, double alpha, ref double A, int lda, ref double B, int ldb, double beta, ref double C, int ldc)
        {
            fixed (double* __refParamPtr6 = &A)
            {
                var __arg6 = __refParamPtr6;
                fixed (double* __refParamPtr8 = &B)
                {
                    var __arg8 = __refParamPtr8;
                    fixed (double* __refParamPtr11 = &C)
                    {
                        var __arg11 = __refParamPtr11;
                        __Internal.Dsyr2k(Layout, Uplo, Trans, N, K, alpha, __arg6, lda, __arg8, ldb, beta, __arg11, ldc);
                    }
                }
            }
        }

        public static void Dtrmm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE Side, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int M, int N, double alpha, ref double A, int lda, ref double B, int ldb)
        {
            fixed (double* __refParamPtr8 = &A)
            {
                var __arg8 = __refParamPtr8;
                fixed (double* __refParamPtr10 = &B)
                {
                    var __arg10 = __refParamPtr10;
                    __Internal.Dtrmm(Layout, Side, Uplo, TransA, Diag, M, N, alpha, __arg8, lda, __arg10, ldb);
                }
            }
        }

        public static void Dtrsm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE Side, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int M, int N, double alpha, ref double A, int lda, ref double B, int ldb)
        {
            fixed (double* __refParamPtr8 = &A)
            {
                var __arg8 = __refParamPtr8;
                fixed (double* __refParamPtr10 = &B)
                {
                    var __arg10 = __refParamPtr10;
                    __Internal.Dtrsm(Layout, Side, Uplo, TransA, Diag, M, N, alpha, __arg8, lda, __arg10, ldb);
                }
            }
        }

        public static void DtrsmBatch(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE* Side_Array, global::IntelMKL.LP64.CBLAS_UPLO* Uplo_Array, global::IntelMKL.LP64.CBLAS_TRANSPOSE* Transa_Array, global::IntelMKL.LP64.CBLAS_DIAG* Diag_Array, ref int M_Array, ref int N_Array, ref double alpha_Array, double** A_Array, ref int lda_Array, double** B_Array, ref int ldb_Array, int group_count, ref int group_size)
        {
            fixed (int* __refParamPtr5 = &M_Array)
            {
                var __arg5 = __refParamPtr5;
                fixed (int* __refParamPtr6 = &N_Array)
                {
                    var __arg6 = __refParamPtr6;
                    fixed (double* __refParamPtr7 = &alpha_Array)
                    {
                        var __arg7 = __refParamPtr7;
                        fixed (int* __refParamPtr9 = &lda_Array)
                        {
                            var __arg9 = __refParamPtr9;
                            fixed (int* __refParamPtr11 = &ldb_Array)
                            {
                                var __arg11 = __refParamPtr11;
                                fixed (int* __refParamPtr13 = &group_size)
                                {
                                    var __arg13 = __refParamPtr13;
                                    __Internal.DtrsmBatch(Layout, Side_Array, Uplo_Array, Transa_Array, Diag_Array, __arg5, __arg6, __arg7, A_Array, __arg9, B_Array, __arg11, group_count, __arg13);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Cgemm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransB, int M, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc)
        {
            __Internal.Cgemm(Layout, TransA, TransB, M, N, K, alpha, A, lda, B, ldb, beta, C, ldc);
        }

        public static void Cgemm3m(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransB, int M, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc)
        {
            __Internal.Cgemm3m(Layout, TransA, TransB, M, N, K, alpha, A, lda, B, ldb, beta, C, ldc);
        }

        public static void CgemmBatch(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE* TransA_Array, global::IntelMKL.LP64.CBLAS_TRANSPOSE* TransB_Array, ref int M_Array, ref int N_Array, ref int K_Array, global::System.IntPtr alpha_Array, void** A_Array, ref int lda_Array, void** B_Array, ref int ldb_Array, global::System.IntPtr beta_Array, void** C_Array, ref int ldc_Array, int group_count, ref int group_size)
        {
            fixed (int* __refParamPtr3 = &M_Array)
            {
                var __arg3 = __refParamPtr3;
                fixed (int* __refParamPtr4 = &N_Array)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (int* __refParamPtr5 = &K_Array)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (int* __refParamPtr8 = &lda_Array)
                        {
                            var __arg8 = __refParamPtr8;
                            fixed (int* __refParamPtr10 = &ldb_Array)
                            {
                                var __arg10 = __refParamPtr10;
                                fixed (int* __refParamPtr13 = &ldc_Array)
                                {
                                    var __arg13 = __refParamPtr13;
                                    fixed (int* __refParamPtr15 = &group_size)
                                    {
                                        var __arg15 = __refParamPtr15;
                                        __Internal.CgemmBatch(Layout, TransA_Array, TransB_Array, __arg3, __arg4, __arg5, alpha_Array, A_Array, __arg8, B_Array, __arg10, beta_Array, C_Array, __arg13, group_count, __arg15);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Cgemm3mBatch(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE* TransA_Array, global::IntelMKL.LP64.CBLAS_TRANSPOSE* TransB_Array, ref int M_Array, ref int N_Array, ref int K_Array, global::System.IntPtr alpha_Array, void** A_Array, ref int lda_Array, void** B_Array, ref int ldb_Array, global::System.IntPtr beta_Array, void** C_Array, ref int ldc_Array, int group_count, ref int group_size)
        {
            fixed (int* __refParamPtr3 = &M_Array)
            {
                var __arg3 = __refParamPtr3;
                fixed (int* __refParamPtr4 = &N_Array)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (int* __refParamPtr5 = &K_Array)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (int* __refParamPtr8 = &lda_Array)
                        {
                            var __arg8 = __refParamPtr8;
                            fixed (int* __refParamPtr10 = &ldb_Array)
                            {
                                var __arg10 = __refParamPtr10;
                                fixed (int* __refParamPtr13 = &ldc_Array)
                                {
                                    var __arg13 = __refParamPtr13;
                                    fixed (int* __refParamPtr15 = &group_size)
                                    {
                                        var __arg15 = __refParamPtr15;
                                        __Internal.Cgemm3mBatch(Layout, TransA_Array, TransB_Array, __arg3, __arg4, __arg5, alpha_Array, A_Array, __arg8, B_Array, __arg10, beta_Array, C_Array, __arg13, group_count, __arg15);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Cgemmt(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransB, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc)
        {
            __Internal.Cgemmt(Layout, Uplo, TransA, TransB, N, K, alpha, A, lda, B, ldb, beta, C, ldc);
        }

        public static void Csymm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE Side, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc)
        {
            __Internal.Csymm(Layout, Side, Uplo, M, N, alpha, A, lda, B, ldb, beta, C, ldc);
        }

        public static void Csyrk(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE Trans, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr beta, global::System.IntPtr C, int ldc)
        {
            __Internal.Csyrk(Layout, Uplo, Trans, N, K, alpha, A, lda, beta, C, ldc);
        }

        public static void Csyr2k(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE Trans, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc)
        {
            __Internal.Csyr2k(Layout, Uplo, Trans, N, K, alpha, A, lda, B, ldb, beta, C, ldc);
        }

        public static void Ctrmm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE Side, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb)
        {
            __Internal.Ctrmm(Layout, Side, Uplo, TransA, Diag, M, N, alpha, A, lda, B, ldb);
        }

        public static void Ctrsm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE Side, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb)
        {
            __Internal.Ctrsm(Layout, Side, Uplo, TransA, Diag, M, N, alpha, A, lda, B, ldb);
        }

        public static void CtrsmBatch(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE* Side_Array, global::IntelMKL.LP64.CBLAS_UPLO* Uplo_Array, global::IntelMKL.LP64.CBLAS_TRANSPOSE* Transa_Array, global::IntelMKL.LP64.CBLAS_DIAG* Diag_Array, ref int M_Array, ref int N_Array, global::System.IntPtr alpha_Array, void** A_Array, ref int lda_Array, void** B_Array, ref int ldb_Array, int group_count, ref int group_size)
        {
            fixed (int* __refParamPtr5 = &M_Array)
            {
                var __arg5 = __refParamPtr5;
                fixed (int* __refParamPtr6 = &N_Array)
                {
                    var __arg6 = __refParamPtr6;
                    fixed (int* __refParamPtr9 = &lda_Array)
                    {
                        var __arg9 = __refParamPtr9;
                        fixed (int* __refParamPtr11 = &ldb_Array)
                        {
                            var __arg11 = __refParamPtr11;
                            fixed (int* __refParamPtr13 = &group_size)
                            {
                                var __arg13 = __refParamPtr13;
                                __Internal.CtrsmBatch(Layout, Side_Array, Uplo_Array, Transa_Array, Diag_Array, __arg5, __arg6, alpha_Array, A_Array, __arg9, B_Array, __arg11, group_count, __arg13);
                            }
                        }
                    }
                }
            }
        }

        public static void Zgemm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransB, int M, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc)
        {
            __Internal.Zgemm(Layout, TransA, TransB, M, N, K, alpha, A, lda, B, ldb, beta, C, ldc);
        }

        public static void Zgemm3m(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransB, int M, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc)
        {
            __Internal.Zgemm3m(Layout, TransA, TransB, M, N, K, alpha, A, lda, B, ldb, beta, C, ldc);
        }

        public static void ZgemmBatch(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE* TransA_Array, global::IntelMKL.LP64.CBLAS_TRANSPOSE* TransB_Array, ref int M_Array, ref int N_Array, ref int K_Array, global::System.IntPtr alpha_Array, void** A_Array, ref int lda_Array, void** B_Array, ref int ldb_Array, global::System.IntPtr beta_Array, void** C_Array, ref int ldc_Array, int group_count, ref int group_size)
        {
            fixed (int* __refParamPtr3 = &M_Array)
            {
                var __arg3 = __refParamPtr3;
                fixed (int* __refParamPtr4 = &N_Array)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (int* __refParamPtr5 = &K_Array)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (int* __refParamPtr8 = &lda_Array)
                        {
                            var __arg8 = __refParamPtr8;
                            fixed (int* __refParamPtr10 = &ldb_Array)
                            {
                                var __arg10 = __refParamPtr10;
                                fixed (int* __refParamPtr13 = &ldc_Array)
                                {
                                    var __arg13 = __refParamPtr13;
                                    fixed (int* __refParamPtr15 = &group_size)
                                    {
                                        var __arg15 = __refParamPtr15;
                                        __Internal.ZgemmBatch(Layout, TransA_Array, TransB_Array, __arg3, __arg4, __arg5, alpha_Array, A_Array, __arg8, B_Array, __arg10, beta_Array, C_Array, __arg13, group_count, __arg15);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Zgemm3mBatch(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE* TransA_Array, global::IntelMKL.LP64.CBLAS_TRANSPOSE* TransB_Array, ref int M_Array, ref int N_Array, ref int K_Array, global::System.IntPtr alpha_Array, void** A_Array, ref int lda_Array, void** B_Array, ref int ldb_Array, global::System.IntPtr beta_Array, void** C_Array, ref int ldc_Array, int group_count, ref int group_size)
        {
            fixed (int* __refParamPtr3 = &M_Array)
            {
                var __arg3 = __refParamPtr3;
                fixed (int* __refParamPtr4 = &N_Array)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (int* __refParamPtr5 = &K_Array)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (int* __refParamPtr8 = &lda_Array)
                        {
                            var __arg8 = __refParamPtr8;
                            fixed (int* __refParamPtr10 = &ldb_Array)
                            {
                                var __arg10 = __refParamPtr10;
                                fixed (int* __refParamPtr13 = &ldc_Array)
                                {
                                    var __arg13 = __refParamPtr13;
                                    fixed (int* __refParamPtr15 = &group_size)
                                    {
                                        var __arg15 = __refParamPtr15;
                                        __Internal.Zgemm3mBatch(Layout, TransA_Array, TransB_Array, __arg3, __arg4, __arg5, alpha_Array, A_Array, __arg8, B_Array, __arg10, beta_Array, C_Array, __arg13, group_count, __arg15);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Zgemmt(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransB, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc)
        {
            __Internal.Zgemmt(Layout, Uplo, TransA, TransB, N, K, alpha, A, lda, B, ldb, beta, C, ldc);
        }

        public static void Zsymm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE Side, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc)
        {
            __Internal.Zsymm(Layout, Side, Uplo, M, N, alpha, A, lda, B, ldb, beta, C, ldc);
        }

        public static void Zsyrk(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE Trans, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr beta, global::System.IntPtr C, int ldc)
        {
            __Internal.Zsyrk(Layout, Uplo, Trans, N, K, alpha, A, lda, beta, C, ldc);
        }

        public static void Zsyr2k(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE Trans, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc)
        {
            __Internal.Zsyr2k(Layout, Uplo, Trans, N, K, alpha, A, lda, B, ldb, beta, C, ldc);
        }

        public static void Ztrmm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE Side, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb)
        {
            __Internal.Ztrmm(Layout, Side, Uplo, TransA, Diag, M, N, alpha, A, lda, B, ldb);
        }

        public static void Ztrsm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE Side, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_DIAG Diag, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb)
        {
            __Internal.Ztrsm(Layout, Side, Uplo, TransA, Diag, M, N, alpha, A, lda, B, ldb);
        }

        public static void ZtrsmBatch(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE* Side_Array, global::IntelMKL.LP64.CBLAS_UPLO* Uplo_Array, global::IntelMKL.LP64.CBLAS_TRANSPOSE* Transa_Array, global::IntelMKL.LP64.CBLAS_DIAG* Diag_Array, ref int M_Array, ref int N_Array, global::System.IntPtr alpha_Array, void** A_Array, ref int lda_Array, void** B_Array, ref int ldb_Array, int group_count, ref int group_size)
        {
            fixed (int* __refParamPtr5 = &M_Array)
            {
                var __arg5 = __refParamPtr5;
                fixed (int* __refParamPtr6 = &N_Array)
                {
                    var __arg6 = __refParamPtr6;
                    fixed (int* __refParamPtr9 = &lda_Array)
                    {
                        var __arg9 = __refParamPtr9;
                        fixed (int* __refParamPtr11 = &ldb_Array)
                        {
                            var __arg11 = __refParamPtr11;
                            fixed (int* __refParamPtr13 = &group_size)
                            {
                                var __arg13 = __refParamPtr13;
                                __Internal.ZtrsmBatch(Layout, Side_Array, Uplo_Array, Transa_Array, Diag_Array, __arg5, __arg6, alpha_Array, A_Array, __arg9, B_Array, __arg11, group_count, __arg13);
                            }
                        }
                    }
                }
            }
        }

        public static void Chemm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE Side, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc)
        {
            __Internal.Chemm(Layout, Side, Uplo, M, N, alpha, A, lda, B, ldb, beta, C, ldc);
        }

        public static void Cherk(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE Trans, int N, int K, float alpha, global::System.IntPtr A, int lda, float beta, global::System.IntPtr C, int ldc)
        {
            __Internal.Cherk(Layout, Uplo, Trans, N, K, alpha, A, lda, beta, C, ldc);
        }

        public static void Cher2k(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE Trans, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, float beta, global::System.IntPtr C, int ldc)
        {
            __Internal.Cher2k(Layout, Uplo, Trans, N, K, alpha, A, lda, B, ldb, beta, C, ldc);
        }

        public static void Zhemm(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_SIDE Side, global::IntelMKL.LP64.CBLAS_UPLO Uplo, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc)
        {
            __Internal.Zhemm(Layout, Side, Uplo, M, N, alpha, A, lda, B, ldb, beta, C, ldc);
        }

        public static void Zherk(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE Trans, int N, int K, double alpha, global::System.IntPtr A, int lda, double beta, global::System.IntPtr C, int ldc)
        {
            __Internal.Zherk(Layout, Uplo, Trans, N, K, alpha, A, lda, beta, C, ldc);
        }

        public static void Zher2k(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_UPLO Uplo, global::IntelMKL.LP64.CBLAS_TRANSPOSE Trans, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, double beta, global::System.IntPtr C, int ldc)
        {
            __Internal.Zher2k(Layout, Uplo, Trans, N, K, alpha, A, lda, B, ldb, beta, C, ldc);
        }

        public static float* SgemmAlloc(global::IntelMKL.LP64.CBLAS_IDENTIFIER identifier, int M, int N, int K)
        {
            var __ret = __Internal.SgemmAlloc(identifier, M, N, K);
            return __ret;
        }

        public static void SgemmPack(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_IDENTIFIER identifier, global::IntelMKL.LP64.CBLAS_TRANSPOSE Trans, int M, int N, int K, float alpha, ref float src, int ld, ref float dest)
        {
            fixed (float* __refParamPtr7 = &src)
            {
                var __arg7 = __refParamPtr7;
                fixed (float* __refParamPtr9 = &dest)
                {
                    var __arg9 = __refParamPtr9;
                    __Internal.SgemmPack(Layout, identifier, Trans, M, N, K, alpha, __arg7, ld, __arg9);
                }
            }
        }

        public static void SgemmCompute(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, int TransA, int TransB, int M, int N, int K, ref float A, int lda, ref float B, int ldb, float beta, ref float C, int ldc)
        {
            fixed (float* __refParamPtr6 = &A)
            {
                var __arg6 = __refParamPtr6;
                fixed (float* __refParamPtr8 = &B)
                {
                    var __arg8 = __refParamPtr8;
                    fixed (float* __refParamPtr11 = &C)
                    {
                        var __arg11 = __refParamPtr11;
                        __Internal.SgemmCompute(Layout, TransA, TransB, M, N, K, __arg6, lda, __arg8, ldb, beta, __arg11, ldc);
                    }
                }
            }
        }

        public static void SgemmFree(ref float dest)
        {
            fixed (float* __refParamPtr0 = &dest)
            {
                var __arg0 = __refParamPtr0;
                __Internal.SgemmFree(__arg0);
            }
        }

        public static double* DgemmAlloc(global::IntelMKL.LP64.CBLAS_IDENTIFIER identifier, int M, int N, int K)
        {
            var __ret = __Internal.DgemmAlloc(identifier, M, N, K);
            return __ret;
        }

        public static void DgemmPack(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_IDENTIFIER identifier, global::IntelMKL.LP64.CBLAS_TRANSPOSE Trans, int M, int N, int K, double alpha, ref double src, int ld, ref double dest)
        {
            fixed (double* __refParamPtr7 = &src)
            {
                var __arg7 = __refParamPtr7;
                fixed (double* __refParamPtr9 = &dest)
                {
                    var __arg9 = __refParamPtr9;
                    __Internal.DgemmPack(Layout, identifier, Trans, M, N, K, alpha, __arg7, ld, __arg9);
                }
            }
        }

        public static void DgemmCompute(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, int TransA, int TransB, int M, int N, int K, ref double A, int lda, ref double B, int ldb, double beta, ref double C, int ldc)
        {
            fixed (double* __refParamPtr6 = &A)
            {
                var __arg6 = __refParamPtr6;
                fixed (double* __refParamPtr8 = &B)
                {
                    var __arg8 = __refParamPtr8;
                    fixed (double* __refParamPtr11 = &C)
                    {
                        var __arg11 = __refParamPtr11;
                        __Internal.DgemmCompute(Layout, TransA, TransB, M, N, K, __arg6, lda, __arg8, ldb, beta, __arg11, ldc);
                    }
                }
            }
        }

        public static void DgemmFree(ref double dest)
        {
            fixed (double* __refParamPtr0 = &dest)
            {
                var __arg0 = __refParamPtr0;
                __Internal.DgemmFree(__arg0);
            }
        }

        public static void GemmS16s16s32(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransB, global::IntelMKL.LP64.CBLAS_OFFSET OffsetC, int M, int N, int K, float alpha, ref short A, int lda, short ao, ref short B, int ldb, short bo, float beta, ref int C, int ldc, ref int cb)
        {
            fixed (short* __refParamPtr8 = &A)
            {
                var __arg8 = __refParamPtr8;
                fixed (short* __refParamPtr11 = &B)
                {
                    var __arg11 = __refParamPtr11;
                    fixed (int* __refParamPtr15 = &C)
                    {
                        var __arg15 = __refParamPtr15;
                        fixed (int* __refParamPtr17 = &cb)
                        {
                            var __arg17 = __refParamPtr17;
                            __Internal.GemmS16s16s32(Layout, TransA, TransB, OffsetC, M, N, K, alpha, __arg8, lda, ao, __arg11, ldb, bo, beta, __arg15, ldc, __arg17);
                        }
                    }
                }
            }
        }

        public static void GemmS8u8s32(global::IntelMKL.LP64.CBLAS_LAYOUT Layout, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransA, global::IntelMKL.LP64.CBLAS_TRANSPOSE TransB, global::IntelMKL.LP64.CBLAS_OFFSET OffsetC, int M, int N, int K, float alpha, global::System.IntPtr A, int lda, sbyte ao, global::System.IntPtr B, int ldb, sbyte bo, float beta, ref int C, int ldc, ref int cb)
        {
            fixed (int* __refParamPtr15 = &C)
            {
                var __arg15 = __refParamPtr15;
                fixed (int* __refParamPtr17 = &cb)
                {
                    var __arg17 = __refParamPtr17;
                    __Internal.GemmS8u8s32(Layout, TransA, TransB, OffsetC, M, N, K, alpha, A, lda, ao, B, ldb, bo, beta, __arg15, ldc, __arg17);
                }
            }
        }
    }
}
