// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace IntelMKL.LP64
{
    public unsafe partial class Blas
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="xerbla")]
            internal static extern void Xerbla([MarshalAs(UnmanagedType.LPStr)] string srname, int* info, int lsrname);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="lsame")]
            internal static extern int Lsame([MarshalAs(UnmanagedType.LPStr)] string ca, [MarshalAs(UnmanagedType.LPStr)] string cb, int lca, int lcb);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="sasum")]
            internal static extern float Sasum(int* n, float* x, int* incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="saxpy")]
            internal static extern void Saxpy(int* n, float* alpha, float* x, int* incx, float* y, int* incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="saxpby")]
            internal static extern void Saxpby(int* n, float* alpha, float* x, int* incx, float* beta, float* y, int* incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="saxpyi")]
            internal static extern void Saxpyi(int* nz, float* a, float* x, int* indx, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="scopy")]
            internal static extern void Scopy(int* n, float* x, int* incx, float* y, int* incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="sdot")]
            internal static extern float Sdot(int* n, float* x, int* incx, float* y, int* incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="sdoti")]
            internal static extern float Sdoti(int* nz, float* x, int* indx, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="sdsdot")]
            internal static extern float Sdsdot(int* n, float* sb, float* x, int* incx, float* y, int* incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="sgthr")]
            internal static extern void Sgthr(int* nz, float* y, float* x, int* indx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="sgthrz")]
            internal static extern void Sgthrz(int* nz, float* y, float* x, int* indx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="snrm2")]
            internal static extern float Snrm2(int* n, float* x, int* incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="srot")]
            internal static extern void Srot(int* n, float* x, int* incx, float* y, int* incy, float* c, float* s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="srotg")]
            internal static extern void Srotg(float* a, float* b, float* c, float* s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="sroti")]
            internal static extern void Sroti(int* nz, float* x, int* indx, float* y, float* c, float* s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="srotm")]
            internal static extern void Srotm(int* n, float* x, int* incx, float* y, int* incy, float* param);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="srotmg")]
            internal static extern void Srotmg(float* d1, float* d2, float* x1, float* y1, float* param);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="sscal")]
            internal static extern void Sscal(int* n, float* a, float* x, int* incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ssctr")]
            internal static extern void Ssctr(int* nz, float* x, int* indx, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="sswap")]
            internal static extern void Sswap(int* n, float* x, int* incx, float* y, int* incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="isamax")]
            internal static extern int Isamax(int* n, float* x, int* incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="isamin")]
            internal static extern int Isamin(int* n, float* x, int* incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dasum")]
            internal static extern double Dasum(int* n, double* x, int* incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="daxpy")]
            internal static extern void Daxpy(int* n, double* alpha, double* x, int* incx, double* y, int* incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="daxpby")]
            internal static extern void Daxpby(int* n, double* alpha, double* x, int* incx, double* beta, double* y, int* incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="daxpyi")]
            internal static extern void Daxpyi(int* nz, double* a, double* x, int* indx, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dcopy")]
            internal static extern void Dcopy(int* n, double* x, int* incx, double* y, int* incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ddot")]
            internal static extern double Ddot(int* n, double* x, int* incx, double* y, int* incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dsdot")]
            internal static extern double Dsdot(int* n, float* x, int* incx, float* y, int* incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ddoti")]
            internal static extern double Ddoti(int* nz, double* x, int* indx, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dgthr")]
            internal static extern void Dgthr(int* nz, double* y, double* x, int* indx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dgthrz")]
            internal static extern void Dgthrz(int* nz, double* y, double* x, int* indx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dnrm2")]
            internal static extern double Dnrm2(int* n, double* x, int* incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="drot")]
            internal static extern void Drot(int* n, double* x, int* incx, double* y, int* incy, double* c, double* s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="drotg")]
            internal static extern void Drotg(double* a, double* b, double* c, double* s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="droti")]
            internal static extern void Droti(int* nz, double* x, int* indx, double* y, double* c, double* s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="drotm")]
            internal static extern void Drotm(int* n, double* x, int* incx, double* y, int* incy, double* param);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="drotmg")]
            internal static extern void Drotmg(double* d1, double* d2, double* x1, double* y1, double* param);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dscal")]
            internal static extern void Dscal(int* n, double* a, double* x, int* incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dsctr")]
            internal static extern void Dsctr(int* nz, double* x, int* indx, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dswap")]
            internal static extern void Dswap(int* n, double* x, int* incx, double* y, int* incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="idamax")]
            internal static extern int Idamax(int* n, double* x, int* incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="idamin")]
            internal static extern int Idamin(int* n, double* x, int* incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="sgbmv")]
            internal static extern void Sgbmv([MarshalAs(UnmanagedType.LPStr)] string trans, int* m, int* n, int* kl, int* ku, float* alpha, float* a, int* lda, float* x, int* incx, float* beta, float* y, int* incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="sgemv")]
            internal static extern void Sgemv([MarshalAs(UnmanagedType.LPStr)] string trans, int* m, int* n, float* alpha, float* a, int* lda, float* x, int* incx, float* beta, float* y, int* incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="sger")]
            internal static extern void Sger(int* m, int* n, float* alpha, float* x, int* incx, float* y, int* incy, float* a, int* lda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ssbmv")]
            internal static extern void Ssbmv([MarshalAs(UnmanagedType.LPStr)] string uplo, int* n, int* k, float* alpha, float* a, int* lda, float* x, int* incx, float* beta, float* y, int* incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="sspmv")]
            internal static extern void Sspmv([MarshalAs(UnmanagedType.LPStr)] string uplo, int* n, float* alpha, float* ap, float* x, int* incx, float* beta, float* y, int* incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="sspr")]
            internal static extern void Sspr([MarshalAs(UnmanagedType.LPStr)] string uplo, int* n, float* alpha, float* x, int* incx, float* ap);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="sspr2")]
            internal static extern void Sspr2([MarshalAs(UnmanagedType.LPStr)] string uplo, int* n, float* alpha, float* x, int* incx, float* y, int* incy, float* ap);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ssymv")]
            internal static extern void Ssymv([MarshalAs(UnmanagedType.LPStr)] string uplo, int* n, float* alpha, float* a, int* lda, float* x, int* incx, float* beta, float* y, int* incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ssyr")]
            internal static extern void Ssyr([MarshalAs(UnmanagedType.LPStr)] string uplo, int* n, float* alpha, float* x, int* incx, float* a, int* lda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ssyr2")]
            internal static extern void Ssyr2([MarshalAs(UnmanagedType.LPStr)] string uplo, int* n, float* alpha, float* x, int* incx, float* y, int* incy, float* a, int* lda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="stbmv")]
            internal static extern void Stbmv([MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string trans, [MarshalAs(UnmanagedType.LPStr)] string diag, int* n, int* k, float* a, int* lda, float* x, int* incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="stbsv")]
            internal static extern void Stbsv([MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string trans, [MarshalAs(UnmanagedType.LPStr)] string diag, int* n, int* k, float* a, int* lda, float* x, int* incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="stpmv")]
            internal static extern void Stpmv([MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string trans, [MarshalAs(UnmanagedType.LPStr)] string diag, int* n, float* ap, float* x, int* incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="stpsv")]
            internal static extern void Stpsv([MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string trans, [MarshalAs(UnmanagedType.LPStr)] string diag, int* n, float* ap, float* x, int* incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="strmv")]
            internal static extern void Strmv([MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string transa, [MarshalAs(UnmanagedType.LPStr)] string diag, int* n, float* a, int* lda, float* b, int* incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="strsv")]
            internal static extern void Strsv([MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string trans, [MarshalAs(UnmanagedType.LPStr)] string diag, int* n, float* a, int* lda, float* x, int* incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="sgem2vu")]
            internal static extern void Sgem2vu(int* m, int* n, float* alpha, float* a, int* lda, float* x1, int* incx1, float* x2, int* incx2, float* beta, float* y1, int* incy1, float* y2, int* incy2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dgbmv")]
            internal static extern void Dgbmv([MarshalAs(UnmanagedType.LPStr)] string trans, int* m, int* n, int* kl, int* ku, double* alpha, double* a, int* lda, double* x, int* incx, double* beta, double* y, int* incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dgemv")]
            internal static extern void Dgemv([MarshalAs(UnmanagedType.LPStr)] string trans, int* m, int* n, double* alpha, double* a, int* lda, double* x, int* incx, double* beta, double* y, int* incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dger")]
            internal static extern void Dger(int* m, int* n, double* alpha, double* x, int* incx, double* y, int* incy, double* a, int* lda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dsbmv")]
            internal static extern void Dsbmv([MarshalAs(UnmanagedType.LPStr)] string uplo, int* n, int* k, double* alpha, double* a, int* lda, double* x, int* incx, double* beta, double* y, int* incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dspmv")]
            internal static extern void Dspmv([MarshalAs(UnmanagedType.LPStr)] string uplo, int* n, double* alpha, double* ap, double* x, int* incx, double* beta, double* y, int* incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dspr")]
            internal static extern void Dspr([MarshalAs(UnmanagedType.LPStr)] string uplo, int* n, double* alpha, double* x, int* incx, double* ap);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dspr2")]
            internal static extern void Dspr2([MarshalAs(UnmanagedType.LPStr)] string uplo, int* n, double* alpha, double* x, int* incx, double* y, int* incy, double* ap);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dsymv")]
            internal static extern void Dsymv([MarshalAs(UnmanagedType.LPStr)] string uplo, int* n, double* alpha, double* a, int* lda, double* x, int* incx, double* beta, double* y, int* incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dsyr")]
            internal static extern void Dsyr([MarshalAs(UnmanagedType.LPStr)] string uplo, int* n, double* alpha, double* x, int* incx, double* a, int* lda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dsyr2")]
            internal static extern void Dsyr2([MarshalAs(UnmanagedType.LPStr)] string uplo, int* n, double* alpha, double* x, int* incx, double* y, int* incy, double* a, int* lda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dtbmv")]
            internal static extern void Dtbmv([MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string trans, [MarshalAs(UnmanagedType.LPStr)] string diag, int* n, int* k, double* a, int* lda, double* x, int* incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dtbsv")]
            internal static extern void Dtbsv([MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string trans, [MarshalAs(UnmanagedType.LPStr)] string diag, int* n, int* k, double* a, int* lda, double* x, int* incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dtpmv")]
            internal static extern void Dtpmv([MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string trans, [MarshalAs(UnmanagedType.LPStr)] string diag, int* n, double* ap, double* x, int* incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dtpsv")]
            internal static extern void Dtpsv([MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string trans, [MarshalAs(UnmanagedType.LPStr)] string diag, int* n, double* ap, double* x, int* incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dtrmv")]
            internal static extern void Dtrmv([MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string transa, [MarshalAs(UnmanagedType.LPStr)] string diag, int* n, double* a, int* lda, double* b, int* incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dtrsv")]
            internal static extern void Dtrsv([MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string trans, [MarshalAs(UnmanagedType.LPStr)] string diag, int* n, double* a, int* lda, double* x, int* incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dgem2vu")]
            internal static extern void Dgem2vu(int* m, int* n, double* alpha, double* a, int* lda, double* x1, int* incx1, double* x2, int* incx2, double* beta, double* y1, int* incy1, double* y2, int* incy2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="sgemm")]
            internal static extern void Sgemm([MarshalAs(UnmanagedType.LPStr)] string transa, [MarshalAs(UnmanagedType.LPStr)] string transb, int* m, int* n, int* k, float* alpha, float* a, int* lda, float* b, int* ldb, float* beta, float* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="sgemm_alloc")]
            internal static extern float* SgemmAlloc([MarshalAs(UnmanagedType.LPStr)] string identifier, int* m, int* n, int* k);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="sgemm_pack")]
            internal static extern void SgemmPack([MarshalAs(UnmanagedType.LPStr)] string identifier, [MarshalAs(UnmanagedType.LPStr)] string trans, int* m, int* n, int* k, float* alpha, float* src, int* ld, float* dest);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="sgemm_compute")]
            internal static extern void SgemmCompute([MarshalAs(UnmanagedType.LPStr)] string transa, [MarshalAs(UnmanagedType.LPStr)] string transb, int* m, int* n, int* k, float* a, int* lda, float* b, int* ldb, float* beta, float* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="sgemm_free")]
            internal static extern void SgemmFree(float* mat);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="sgemm_batch")]
            internal static extern void SgemmBatch([MarshalAs(UnmanagedType.LPStr)] string transa_array, [MarshalAs(UnmanagedType.LPStr)] string transb_array, int* m_array, int* n_array, int* k_array, float* alpha_array, float** a_array, int* lda_array, float** b_array, int* ldb_array, float* beta_array, float** c_array, int* ldc_array, int* group_count, int* group_size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="sgemmt")]
            internal static extern void Sgemmt([MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string transa, [MarshalAs(UnmanagedType.LPStr)] string transb, int* n, int* k, float* alpha, float* a, int* lda, float* b, int* ldb, float* beta, float* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ssymm")]
            internal static extern void Ssymm([MarshalAs(UnmanagedType.LPStr)] string side, [MarshalAs(UnmanagedType.LPStr)] string uplo, int* m, int* n, float* alpha, float* a, int* lda, float* b, int* ldb, float* beta, float* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ssyr2k")]
            internal static extern void Ssyr2k([MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string trans, int* n, int* k, float* alpha, float* a, int* lda, float* b, int* ldb, float* beta, float* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ssyrk")]
            internal static extern void Ssyrk([MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string trans, int* n, int* k, float* alpha, float* a, int* lda, float* beta, float* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="strmm")]
            internal static extern void Strmm([MarshalAs(UnmanagedType.LPStr)] string side, [MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string transa, [MarshalAs(UnmanagedType.LPStr)] string diag, int* m, int* n, float* alpha, float* a, int* lda, float* b, int* ldb);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="strsm")]
            internal static extern void Strsm([MarshalAs(UnmanagedType.LPStr)] string side, [MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string transa, [MarshalAs(UnmanagedType.LPStr)] string diag, int* m, int* n, float* alpha, float* a, int* lda, float* b, int* ldb);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="strsm_batch")]
            internal static extern void StrsmBatch([MarshalAs(UnmanagedType.LPStr)] string side_array, [MarshalAs(UnmanagedType.LPStr)] string uplo_array, [MarshalAs(UnmanagedType.LPStr)] string transa_array, [MarshalAs(UnmanagedType.LPStr)] string diag_array, int* m_array, int* n_array, float* alpha_array, float** a_array, int* lda_array, float** b_array, int* ldb, int* group_count, int* group_size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dgemm")]
            internal static extern void Dgemm([MarshalAs(UnmanagedType.LPStr)] string transa, [MarshalAs(UnmanagedType.LPStr)] string transb, int* m, int* n, int* k, double* alpha, double* a, int* lda, double* b, int* ldb, double* beta, double* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dgemm_alloc")]
            internal static extern double* DgemmAlloc([MarshalAs(UnmanagedType.LPStr)] string identifier, int* m, int* n, int* k);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dgemm_pack")]
            internal static extern void DgemmPack([MarshalAs(UnmanagedType.LPStr)] string identifier, [MarshalAs(UnmanagedType.LPStr)] string trans, int* m, int* n, int* k, double* alpha, double* src, int* ld, double* dest);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dgemm_compute")]
            internal static extern void DgemmCompute([MarshalAs(UnmanagedType.LPStr)] string transa, [MarshalAs(UnmanagedType.LPStr)] string transb, int* m, int* n, int* k, double* a, int* lda, double* b, int* ldb, double* beta, double* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dgemm_free")]
            internal static extern void DgemmFree(double* mat);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dgemm_batch")]
            internal static extern void DgemmBatch([MarshalAs(UnmanagedType.LPStr)] string transa_array, [MarshalAs(UnmanagedType.LPStr)] string transb_array, int* m_array, int* n_array, int* k_array, double* alpha_array, double** a_array, int* lda_array, double** b_array, int* ldb_array, double* beta_array, double** c_array, int* ldc_array, int* group_count, int* group_size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dgemmt")]
            internal static extern void Dgemmt([MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string transa, [MarshalAs(UnmanagedType.LPStr)] string transb, int* n, int* k, double* alpha, double* a, int* lda, double* b, int* ldb, double* beta, double* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dsymm")]
            internal static extern void Dsymm([MarshalAs(UnmanagedType.LPStr)] string side, [MarshalAs(UnmanagedType.LPStr)] string uplo, int* m, int* n, double* alpha, double* a, int* lda, double* b, int* ldb, double* beta, double* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dsyr2k")]
            internal static extern void Dsyr2k([MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string trans, int* n, int* k, double* alpha, double* a, int* lda, double* b, int* ldb, double* beta, double* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dsyrk")]
            internal static extern void Dsyrk([MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string trans, int* n, int* k, double* alpha, double* a, int* lda, double* beta, double* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dtrmm")]
            internal static extern void Dtrmm([MarshalAs(UnmanagedType.LPStr)] string side, [MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string transa, [MarshalAs(UnmanagedType.LPStr)] string diag, int* m, int* n, double* alpha, double* a, int* lda, double* b, int* ldb);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dtrsm")]
            internal static extern void Dtrsm([MarshalAs(UnmanagedType.LPStr)] string side, [MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string transa, [MarshalAs(UnmanagedType.LPStr)] string diag, int* m, int* n, double* alpha, double* a, int* lda, double* b, int* ldb);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="dtrsm_batch")]
            internal static extern void DtrsmBatch([MarshalAs(UnmanagedType.LPStr)] string side_array, [MarshalAs(UnmanagedType.LPStr)] string uplo_array, [MarshalAs(UnmanagedType.LPStr)] string transa_array, [MarshalAs(UnmanagedType.LPStr)] string diag_array, int* m_array, int* n_array, double* alpha_array, double** a_array, int* lda_array, double** b_array, int* ldb, int* group_count, int* group_size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="gemm_s8u8s32")]
            internal static extern void GemmS8u8s32([MarshalAs(UnmanagedType.LPStr)] string transa, [MarshalAs(UnmanagedType.LPStr)] string transb, [MarshalAs(UnmanagedType.LPStr)] string offsetc, int* m, int* n, int* k, float* alpha, [MarshalAs(UnmanagedType.LPStr)] string a, int* lda, [MarshalAs(UnmanagedType.LPStr)] string ao, byte* b, int* ldb, [MarshalAs(UnmanagedType.LPStr)] string bo, float* beta, int* c, int* ldc, int* co);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="gemm_s16s16s32")]
            internal static extern void GemmS16s16s32([MarshalAs(UnmanagedType.LPStr)] string transa, [MarshalAs(UnmanagedType.LPStr)] string transb, [MarshalAs(UnmanagedType.LPStr)] string offsetc, int* m, int* n, int* k, float* alpha, short* a, int* lda, short* ao, short* b, int* ldb, short* bo, float* beta, int* c, int* ldc, int* co);
        }

        public static void Xerbla(string srname, ref int info, int lsrname)
        {
            fixed (int* __refParamPtr1 = &info)
            {
                var __arg1 = __refParamPtr1;
                __Internal.Xerbla(srname, __arg1, lsrname);
            }
        }

        public static int Lsame(string ca, string cb, int lca, int lcb)
        {
            var __ret = __Internal.Lsame(ca, cb, lca, lcb);
            return __ret;
        }

        public static float Sasum(ref int n, ref float x, ref int incx)
        {
            fixed (int* __refParamPtr0 = &n)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &x)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &incx)
                    {
                        var __arg2 = __refParamPtr2;
                        var __ret = __Internal.Sasum(__arg0, __arg1, __arg2);
                        return __ret;
                    }
                }
            }
        }

        public static void Saxpy(ref int n, ref float alpha, ref float x, ref int incx, ref float y, ref int incy)
        {
            fixed (int* __refParamPtr0 = &n)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &alpha)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &x)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (int* __refParamPtr3 = &incx)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (float* __refParamPtr4 = &y)
                            {
                                var __arg4 = __refParamPtr4;
                                fixed (int* __refParamPtr5 = &incy)
                                {
                                    var __arg5 = __refParamPtr5;
                                    __Internal.Saxpy(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Saxpby(ref int n, ref float alpha, ref float x, ref int incx, ref float beta, ref float y, ref int incy)
        {
            fixed (int* __refParamPtr0 = &n)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &alpha)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &x)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (int* __refParamPtr3 = &incx)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (float* __refParamPtr4 = &beta)
                            {
                                var __arg4 = __refParamPtr4;
                                fixed (float* __refParamPtr5 = &y)
                                {
                                    var __arg5 = __refParamPtr5;
                                    fixed (int* __refParamPtr6 = &incy)
                                    {
                                        var __arg6 = __refParamPtr6;
                                        __Internal.Saxpby(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Saxpyi(ref int nz, ref float a, ref float x, ref int indx, ref float y)
        {
            fixed (int* __refParamPtr0 = &nz)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &a)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &x)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (int* __refParamPtr3 = &indx)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (float* __refParamPtr4 = &y)
                            {
                                var __arg4 = __refParamPtr4;
                                __Internal.Saxpyi(__arg0, __arg1, __arg2, __arg3, __arg4);
                            }
                        }
                    }
                }
            }
        }

        public static void Scopy(ref int n, ref float x, ref int incx, ref float y, ref int incy)
        {
            fixed (int* __refParamPtr0 = &n)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &x)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &incx)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (float* __refParamPtr3 = &y)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (int* __refParamPtr4 = &incy)
                            {
                                var __arg4 = __refParamPtr4;
                                __Internal.Scopy(__arg0, __arg1, __arg2, __arg3, __arg4);
                            }
                        }
                    }
                }
            }
        }

        public static float Sdot(ref int n, ref float x, ref int incx, ref float y, ref int incy)
        {
            fixed (int* __refParamPtr0 = &n)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &x)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &incx)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (float* __refParamPtr3 = &y)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (int* __refParamPtr4 = &incy)
                            {
                                var __arg4 = __refParamPtr4;
                                var __ret = __Internal.Sdot(__arg0, __arg1, __arg2, __arg3, __arg4);
                                return __ret;
                            }
                        }
                    }
                }
            }
        }

        public static float Sdoti(ref int nz, ref float x, ref int indx, ref float y)
        {
            fixed (int* __refParamPtr0 = &nz)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &x)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &indx)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (float* __refParamPtr3 = &y)
                        {
                            var __arg3 = __refParamPtr3;
                            var __ret = __Internal.Sdoti(__arg0, __arg1, __arg2, __arg3);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static float Sdsdot(ref int n, ref float sb, ref float x, ref int incx, ref float y, ref int incy)
        {
            fixed (int* __refParamPtr0 = &n)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &sb)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &x)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (int* __refParamPtr3 = &incx)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (float* __refParamPtr4 = &y)
                            {
                                var __arg4 = __refParamPtr4;
                                fixed (int* __refParamPtr5 = &incy)
                                {
                                    var __arg5 = __refParamPtr5;
                                    var __ret = __Internal.Sdsdot(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5);
                                    return __ret;
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Sgthr(ref int nz, ref float y, ref float x, ref int indx)
        {
            fixed (int* __refParamPtr0 = &nz)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &y)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &x)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (int* __refParamPtr3 = &indx)
                        {
                            var __arg3 = __refParamPtr3;
                            __Internal.Sgthr(__arg0, __arg1, __arg2, __arg3);
                        }
                    }
                }
            }
        }

        public static void Sgthrz(ref int nz, ref float y, ref float x, ref int indx)
        {
            fixed (int* __refParamPtr0 = &nz)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &y)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &x)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (int* __refParamPtr3 = &indx)
                        {
                            var __arg3 = __refParamPtr3;
                            __Internal.Sgthrz(__arg0, __arg1, __arg2, __arg3);
                        }
                    }
                }
            }
        }

        public static float Snrm2(ref int n, ref float x, ref int incx)
        {
            fixed (int* __refParamPtr0 = &n)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &x)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &incx)
                    {
                        var __arg2 = __refParamPtr2;
                        var __ret = __Internal.Snrm2(__arg0, __arg1, __arg2);
                        return __ret;
                    }
                }
            }
        }

        public static void Srot(ref int n, ref float x, ref int incx, ref float y, ref int incy, ref float c, ref float s)
        {
            fixed (int* __refParamPtr0 = &n)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &x)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &incx)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (float* __refParamPtr3 = &y)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (int* __refParamPtr4 = &incy)
                            {
                                var __arg4 = __refParamPtr4;
                                fixed (float* __refParamPtr5 = &c)
                                {
                                    var __arg5 = __refParamPtr5;
                                    fixed (float* __refParamPtr6 = &s)
                                    {
                                        var __arg6 = __refParamPtr6;
                                        __Internal.Srot(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Srotg(ref float a, ref float b, ref float c, ref float s)
        {
            fixed (float* __refParamPtr0 = &a)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &b)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &c)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (float* __refParamPtr3 = &s)
                        {
                            var __arg3 = __refParamPtr3;
                            __Internal.Srotg(__arg0, __arg1, __arg2, __arg3);
                        }
                    }
                }
            }
        }

        public static void Sroti(ref int nz, ref float x, ref int indx, ref float y, ref float c, ref float s)
        {
            fixed (int* __refParamPtr0 = &nz)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &x)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &indx)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (float* __refParamPtr3 = &y)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (float* __refParamPtr4 = &c)
                            {
                                var __arg4 = __refParamPtr4;
                                fixed (float* __refParamPtr5 = &s)
                                {
                                    var __arg5 = __refParamPtr5;
                                    __Internal.Sroti(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Srotm(ref int n, ref float x, ref int incx, ref float y, ref int incy, ref float param)
        {
            fixed (int* __refParamPtr0 = &n)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &x)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &incx)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (float* __refParamPtr3 = &y)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (int* __refParamPtr4 = &incy)
                            {
                                var __arg4 = __refParamPtr4;
                                fixed (float* __refParamPtr5 = &param)
                                {
                                    var __arg5 = __refParamPtr5;
                                    __Internal.Srotm(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Srotmg(ref float d1, ref float d2, ref float x1, ref float y1, ref float param)
        {
            fixed (float* __refParamPtr0 = &d1)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &d2)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &x1)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (float* __refParamPtr3 = &y1)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (float* __refParamPtr4 = &param)
                            {
                                var __arg4 = __refParamPtr4;
                                __Internal.Srotmg(__arg0, __arg1, __arg2, __arg3, __arg4);
                            }
                        }
                    }
                }
            }
        }

        public static void Sscal(ref int n, ref float a, ref float x, ref int incx)
        {
            fixed (int* __refParamPtr0 = &n)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &a)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &x)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (int* __refParamPtr3 = &incx)
                        {
                            var __arg3 = __refParamPtr3;
                            __Internal.Sscal(__arg0, __arg1, __arg2, __arg3);
                        }
                    }
                }
            }
        }

        public static void Ssctr(ref int nz, ref float x, ref int indx, ref float y)
        {
            fixed (int* __refParamPtr0 = &nz)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &x)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &indx)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (float* __refParamPtr3 = &y)
                        {
                            var __arg3 = __refParamPtr3;
                            __Internal.Ssctr(__arg0, __arg1, __arg2, __arg3);
                        }
                    }
                }
            }
        }

        public static void Sswap(ref int n, ref float x, ref int incx, ref float y, ref int incy)
        {
            fixed (int* __refParamPtr0 = &n)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &x)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &incx)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (float* __refParamPtr3 = &y)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (int* __refParamPtr4 = &incy)
                            {
                                var __arg4 = __refParamPtr4;
                                __Internal.Sswap(__arg0, __arg1, __arg2, __arg3, __arg4);
                            }
                        }
                    }
                }
            }
        }

        public static int Isamax(ref int n, ref float x, ref int incx)
        {
            fixed (int* __refParamPtr0 = &n)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &x)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &incx)
                    {
                        var __arg2 = __refParamPtr2;
                        var __ret = __Internal.Isamax(__arg0, __arg1, __arg2);
                        return __ret;
                    }
                }
            }
        }

        public static int Isamin(ref int n, ref float x, ref int incx)
        {
            fixed (int* __refParamPtr0 = &n)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &x)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &incx)
                    {
                        var __arg2 = __refParamPtr2;
                        var __ret = __Internal.Isamin(__arg0, __arg1, __arg2);
                        return __ret;
                    }
                }
            }
        }

        public static double Dasum(ref int n, ref double x, ref int incx)
        {
            fixed (int* __refParamPtr0 = &n)
            {
                var __arg0 = __refParamPtr0;
                fixed (double* __refParamPtr1 = &x)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &incx)
                    {
                        var __arg2 = __refParamPtr2;
                        var __ret = __Internal.Dasum(__arg0, __arg1, __arg2);
                        return __ret;
                    }
                }
            }
        }

        public static void Daxpy(ref int n, ref double alpha, ref double x, ref int incx, ref double y, ref int incy)
        {
            fixed (int* __refParamPtr0 = &n)
            {
                var __arg0 = __refParamPtr0;
                fixed (double* __refParamPtr1 = &alpha)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (double* __refParamPtr2 = &x)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (int* __refParamPtr3 = &incx)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (double* __refParamPtr4 = &y)
                            {
                                var __arg4 = __refParamPtr4;
                                fixed (int* __refParamPtr5 = &incy)
                                {
                                    var __arg5 = __refParamPtr5;
                                    __Internal.Daxpy(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Daxpby(ref int n, ref double alpha, ref double x, ref int incx, ref double beta, ref double y, ref int incy)
        {
            fixed (int* __refParamPtr0 = &n)
            {
                var __arg0 = __refParamPtr0;
                fixed (double* __refParamPtr1 = &alpha)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (double* __refParamPtr2 = &x)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (int* __refParamPtr3 = &incx)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (double* __refParamPtr4 = &beta)
                            {
                                var __arg4 = __refParamPtr4;
                                fixed (double* __refParamPtr5 = &y)
                                {
                                    var __arg5 = __refParamPtr5;
                                    fixed (int* __refParamPtr6 = &incy)
                                    {
                                        var __arg6 = __refParamPtr6;
                                        __Internal.Daxpby(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Daxpyi(ref int nz, ref double a, ref double x, ref int indx, ref double y)
        {
            fixed (int* __refParamPtr0 = &nz)
            {
                var __arg0 = __refParamPtr0;
                fixed (double* __refParamPtr1 = &a)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (double* __refParamPtr2 = &x)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (int* __refParamPtr3 = &indx)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (double* __refParamPtr4 = &y)
                            {
                                var __arg4 = __refParamPtr4;
                                __Internal.Daxpyi(__arg0, __arg1, __arg2, __arg3, __arg4);
                            }
                        }
                    }
                }
            }
        }

        public static void Dcopy(ref int n, ref double x, ref int incx, ref double y, ref int incy)
        {
            fixed (int* __refParamPtr0 = &n)
            {
                var __arg0 = __refParamPtr0;
                fixed (double* __refParamPtr1 = &x)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &incx)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (double* __refParamPtr3 = &y)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (int* __refParamPtr4 = &incy)
                            {
                                var __arg4 = __refParamPtr4;
                                __Internal.Dcopy(__arg0, __arg1, __arg2, __arg3, __arg4);
                            }
                        }
                    }
                }
            }
        }

        public static double Ddot(ref int n, ref double x, ref int incx, ref double y, ref int incy)
        {
            fixed (int* __refParamPtr0 = &n)
            {
                var __arg0 = __refParamPtr0;
                fixed (double* __refParamPtr1 = &x)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &incx)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (double* __refParamPtr3 = &y)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (int* __refParamPtr4 = &incy)
                            {
                                var __arg4 = __refParamPtr4;
                                var __ret = __Internal.Ddot(__arg0, __arg1, __arg2, __arg3, __arg4);
                                return __ret;
                            }
                        }
                    }
                }
            }
        }

        public static double Dsdot(ref int n, ref float x, ref int incx, ref float y, ref int incy)
        {
            fixed (int* __refParamPtr0 = &n)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &x)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &incx)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (float* __refParamPtr3 = &y)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (int* __refParamPtr4 = &incy)
                            {
                                var __arg4 = __refParamPtr4;
                                var __ret = __Internal.Dsdot(__arg0, __arg1, __arg2, __arg3, __arg4);
                                return __ret;
                            }
                        }
                    }
                }
            }
        }

        public static double Ddoti(ref int nz, ref double x, ref int indx, ref double y)
        {
            fixed (int* __refParamPtr0 = &nz)
            {
                var __arg0 = __refParamPtr0;
                fixed (double* __refParamPtr1 = &x)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &indx)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (double* __refParamPtr3 = &y)
                        {
                            var __arg3 = __refParamPtr3;
                            var __ret = __Internal.Ddoti(__arg0, __arg1, __arg2, __arg3);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static void Dgthr(ref int nz, ref double y, ref double x, ref int indx)
        {
            fixed (int* __refParamPtr0 = &nz)
            {
                var __arg0 = __refParamPtr0;
                fixed (double* __refParamPtr1 = &y)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (double* __refParamPtr2 = &x)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (int* __refParamPtr3 = &indx)
                        {
                            var __arg3 = __refParamPtr3;
                            __Internal.Dgthr(__arg0, __arg1, __arg2, __arg3);
                        }
                    }
                }
            }
        }

        public static void Dgthrz(ref int nz, ref double y, ref double x, ref int indx)
        {
            fixed (int* __refParamPtr0 = &nz)
            {
                var __arg0 = __refParamPtr0;
                fixed (double* __refParamPtr1 = &y)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (double* __refParamPtr2 = &x)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (int* __refParamPtr3 = &indx)
                        {
                            var __arg3 = __refParamPtr3;
                            __Internal.Dgthrz(__arg0, __arg1, __arg2, __arg3);
                        }
                    }
                }
            }
        }

        public static double Dnrm2(ref int n, ref double x, ref int incx)
        {
            fixed (int* __refParamPtr0 = &n)
            {
                var __arg0 = __refParamPtr0;
                fixed (double* __refParamPtr1 = &x)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &incx)
                    {
                        var __arg2 = __refParamPtr2;
                        var __ret = __Internal.Dnrm2(__arg0, __arg1, __arg2);
                        return __ret;
                    }
                }
            }
        }

        public static void Drot(ref int n, ref double x, ref int incx, ref double y, ref int incy, ref double c, ref double s)
        {
            fixed (int* __refParamPtr0 = &n)
            {
                var __arg0 = __refParamPtr0;
                fixed (double* __refParamPtr1 = &x)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &incx)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (double* __refParamPtr3 = &y)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (int* __refParamPtr4 = &incy)
                            {
                                var __arg4 = __refParamPtr4;
                                fixed (double* __refParamPtr5 = &c)
                                {
                                    var __arg5 = __refParamPtr5;
                                    fixed (double* __refParamPtr6 = &s)
                                    {
                                        var __arg6 = __refParamPtr6;
                                        __Internal.Drot(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Drotg(ref double a, ref double b, ref double c, ref double s)
        {
            fixed (double* __refParamPtr0 = &a)
            {
                var __arg0 = __refParamPtr0;
                fixed (double* __refParamPtr1 = &b)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (double* __refParamPtr2 = &c)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (double* __refParamPtr3 = &s)
                        {
                            var __arg3 = __refParamPtr3;
                            __Internal.Drotg(__arg0, __arg1, __arg2, __arg3);
                        }
                    }
                }
            }
        }

        public static void Droti(ref int nz, ref double x, ref int indx, ref double y, ref double c, ref double s)
        {
            fixed (int* __refParamPtr0 = &nz)
            {
                var __arg0 = __refParamPtr0;
                fixed (double* __refParamPtr1 = &x)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &indx)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (double* __refParamPtr3 = &y)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (double* __refParamPtr4 = &c)
                            {
                                var __arg4 = __refParamPtr4;
                                fixed (double* __refParamPtr5 = &s)
                                {
                                    var __arg5 = __refParamPtr5;
                                    __Internal.Droti(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Drotm(ref int n, ref double x, ref int incx, ref double y, ref int incy, ref double param)
        {
            fixed (int* __refParamPtr0 = &n)
            {
                var __arg0 = __refParamPtr0;
                fixed (double* __refParamPtr1 = &x)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &incx)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (double* __refParamPtr3 = &y)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (int* __refParamPtr4 = &incy)
                            {
                                var __arg4 = __refParamPtr4;
                                fixed (double* __refParamPtr5 = &param)
                                {
                                    var __arg5 = __refParamPtr5;
                                    __Internal.Drotm(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Drotmg(ref double d1, ref double d2, ref double x1, ref double y1, ref double param)
        {
            fixed (double* __refParamPtr0 = &d1)
            {
                var __arg0 = __refParamPtr0;
                fixed (double* __refParamPtr1 = &d2)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (double* __refParamPtr2 = &x1)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (double* __refParamPtr3 = &y1)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (double* __refParamPtr4 = &param)
                            {
                                var __arg4 = __refParamPtr4;
                                __Internal.Drotmg(__arg0, __arg1, __arg2, __arg3, __arg4);
                            }
                        }
                    }
                }
            }
        }

        public static void Dscal(ref int n, ref double a, ref double x, ref int incx)
        {
            fixed (int* __refParamPtr0 = &n)
            {
                var __arg0 = __refParamPtr0;
                fixed (double* __refParamPtr1 = &a)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (double* __refParamPtr2 = &x)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (int* __refParamPtr3 = &incx)
                        {
                            var __arg3 = __refParamPtr3;
                            __Internal.Dscal(__arg0, __arg1, __arg2, __arg3);
                        }
                    }
                }
            }
        }

        public static void Dsctr(ref int nz, ref double x, ref int indx, ref double y)
        {
            fixed (int* __refParamPtr0 = &nz)
            {
                var __arg0 = __refParamPtr0;
                fixed (double* __refParamPtr1 = &x)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &indx)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (double* __refParamPtr3 = &y)
                        {
                            var __arg3 = __refParamPtr3;
                            __Internal.Dsctr(__arg0, __arg1, __arg2, __arg3);
                        }
                    }
                }
            }
        }

        public static void Dswap(ref int n, ref double x, ref int incx, ref double y, ref int incy)
        {
            fixed (int* __refParamPtr0 = &n)
            {
                var __arg0 = __refParamPtr0;
                fixed (double* __refParamPtr1 = &x)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &incx)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (double* __refParamPtr3 = &y)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (int* __refParamPtr4 = &incy)
                            {
                                var __arg4 = __refParamPtr4;
                                __Internal.Dswap(__arg0, __arg1, __arg2, __arg3, __arg4);
                            }
                        }
                    }
                }
            }
        }

        public static int Idamax(ref int n, ref double x, ref int incx)
        {
            fixed (int* __refParamPtr0 = &n)
            {
                var __arg0 = __refParamPtr0;
                fixed (double* __refParamPtr1 = &x)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &incx)
                    {
                        var __arg2 = __refParamPtr2;
                        var __ret = __Internal.Idamax(__arg0, __arg1, __arg2);
                        return __ret;
                    }
                }
            }
        }

        public static int Idamin(ref int n, ref double x, ref int incx)
        {
            fixed (int* __refParamPtr0 = &n)
            {
                var __arg0 = __refParamPtr0;
                fixed (double* __refParamPtr1 = &x)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &incx)
                    {
                        var __arg2 = __refParamPtr2;
                        var __ret = __Internal.Idamin(__arg0, __arg1, __arg2);
                        return __ret;
                    }
                }
            }
        }

        public static void Sgbmv(string trans, ref int m, ref int n, ref int kl, ref int ku, ref float alpha, ref float a, ref int lda, ref float x, ref int incx, ref float beta, ref float y, ref int incy)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &n)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &kl)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &ku)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (float* __refParamPtr5 = &alpha)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (float* __refParamPtr6 = &a)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (int* __refParamPtr7 = &lda)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        fixed (float* __refParamPtr8 = &x)
                                        {
                                            var __arg8 = __refParamPtr8;
                                            fixed (int* __refParamPtr9 = &incx)
                                            {
                                                var __arg9 = __refParamPtr9;
                                                fixed (float* __refParamPtr10 = &beta)
                                                {
                                                    var __arg10 = __refParamPtr10;
                                                    fixed (float* __refParamPtr11 = &y)
                                                    {
                                                        var __arg11 = __refParamPtr11;
                                                        fixed (int* __refParamPtr12 = &incy)
                                                        {
                                                            var __arg12 = __refParamPtr12;
                                                            __Internal.Sgbmv(trans, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Sgemv(string trans, ref int m, ref int n, ref float alpha, ref float a, ref int lda, ref float x, ref int incx, ref float beta, ref float y, ref int incy)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &n)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &alpha)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (float* __refParamPtr4 = &a)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (int* __refParamPtr5 = &lda)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (float* __refParamPtr6 = &x)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (int* __refParamPtr7 = &incx)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        fixed (float* __refParamPtr8 = &beta)
                                        {
                                            var __arg8 = __refParamPtr8;
                                            fixed (float* __refParamPtr9 = &y)
                                            {
                                                var __arg9 = __refParamPtr9;
                                                fixed (int* __refParamPtr10 = &incy)
                                                {
                                                    var __arg10 = __refParamPtr10;
                                                    __Internal.Sgemv(trans, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Sger(ref int m, ref int n, ref float alpha, ref float x, ref int incx, ref float y, ref int incy, ref float a, ref int lda)
        {
            fixed (int* __refParamPtr0 = &m)
            {
                var __arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &n)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &alpha)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (float* __refParamPtr3 = &x)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (int* __refParamPtr4 = &incx)
                            {
                                var __arg4 = __refParamPtr4;
                                fixed (float* __refParamPtr5 = &y)
                                {
                                    var __arg5 = __refParamPtr5;
                                    fixed (int* __refParamPtr6 = &incy)
                                    {
                                        var __arg6 = __refParamPtr6;
                                        fixed (float* __refParamPtr7 = &a)
                                        {
                                            var __arg7 = __refParamPtr7;
                                            fixed (int* __refParamPtr8 = &lda)
                                            {
                                                var __arg8 = __refParamPtr8;
                                                __Internal.Sger(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Ssbmv(string uplo, ref int n, ref int k, ref float alpha, ref float a, ref int lda, ref float x, ref int incx, ref float beta, ref float y, ref int incy)
        {
            fixed (int* __refParamPtr1 = &n)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &k)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &alpha)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (float* __refParamPtr4 = &a)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (int* __refParamPtr5 = &lda)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (float* __refParamPtr6 = &x)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (int* __refParamPtr7 = &incx)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        fixed (float* __refParamPtr8 = &beta)
                                        {
                                            var __arg8 = __refParamPtr8;
                                            fixed (float* __refParamPtr9 = &y)
                                            {
                                                var __arg9 = __refParamPtr9;
                                                fixed (int* __refParamPtr10 = &incy)
                                                {
                                                    var __arg10 = __refParamPtr10;
                                                    __Internal.Ssbmv(uplo, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Sspmv(string uplo, ref int n, ref float alpha, ref float ap, ref float x, ref int incx, ref float beta, ref float y, ref int incy)
        {
            fixed (int* __refParamPtr1 = &n)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &alpha)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &ap)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (float* __refParamPtr4 = &x)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (int* __refParamPtr5 = &incx)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (float* __refParamPtr6 = &beta)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (float* __refParamPtr7 = &y)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        fixed (int* __refParamPtr8 = &incy)
                                        {
                                            var __arg8 = __refParamPtr8;
                                            __Internal.Sspmv(uplo, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Sspr(string uplo, ref int n, ref float alpha, ref float x, ref int incx, ref float ap)
        {
            fixed (int* __refParamPtr1 = &n)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &alpha)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &x)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &incx)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (float* __refParamPtr5 = &ap)
                            {
                                var __arg5 = __refParamPtr5;
                                __Internal.Sspr(uplo, __arg1, __arg2, __arg3, __arg4, __arg5);
                            }
                        }
                    }
                }
            }
        }

        public static void Sspr2(string uplo, ref int n, ref float alpha, ref float x, ref int incx, ref float y, ref int incy, ref float ap)
        {
            fixed (int* __refParamPtr1 = &n)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &alpha)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &x)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &incx)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (float* __refParamPtr5 = &y)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (int* __refParamPtr6 = &incy)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (float* __refParamPtr7 = &ap)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        __Internal.Sspr2(uplo, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Ssymv(string uplo, ref int n, ref float alpha, ref float a, ref int lda, ref float x, ref int incx, ref float beta, ref float y, ref int incy)
        {
            fixed (int* __refParamPtr1 = &n)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &alpha)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &a)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &lda)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (float* __refParamPtr5 = &x)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (int* __refParamPtr6 = &incx)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (float* __refParamPtr7 = &beta)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        fixed (float* __refParamPtr8 = &y)
                                        {
                                            var __arg8 = __refParamPtr8;
                                            fixed (int* __refParamPtr9 = &incy)
                                            {
                                                var __arg9 = __refParamPtr9;
                                                __Internal.Ssymv(uplo, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Ssyr(string uplo, ref int n, ref float alpha, ref float x, ref int incx, ref float a, ref int lda)
        {
            fixed (int* __refParamPtr1 = &n)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &alpha)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &x)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &incx)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (float* __refParamPtr5 = &a)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (int* __refParamPtr6 = &lda)
                                {
                                    var __arg6 = __refParamPtr6;
                                    __Internal.Ssyr(uplo, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Ssyr2(string uplo, ref int n, ref float alpha, ref float x, ref int incx, ref float y, ref int incy, ref float a, ref int lda)
        {
            fixed (int* __refParamPtr1 = &n)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &alpha)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &x)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &incx)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (float* __refParamPtr5 = &y)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (int* __refParamPtr6 = &incy)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (float* __refParamPtr7 = &a)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        fixed (int* __refParamPtr8 = &lda)
                                        {
                                            var __arg8 = __refParamPtr8;
                                            __Internal.Ssyr2(uplo, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Stbmv(string uplo, string trans, string diag, ref int n, ref int k, ref float a, ref int lda, ref float x, ref int incx)
        {
            fixed (int* __refParamPtr3 = &n)
            {
                var __arg3 = __refParamPtr3;
                fixed (int* __refParamPtr4 = &k)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (float* __refParamPtr5 = &a)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (int* __refParamPtr6 = &lda)
                        {
                            var __arg6 = __refParamPtr6;
                            fixed (float* __refParamPtr7 = &x)
                            {
                                var __arg7 = __refParamPtr7;
                                fixed (int* __refParamPtr8 = &incx)
                                {
                                    var __arg8 = __refParamPtr8;
                                    __Internal.Stbmv(uplo, trans, diag, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Stbsv(string uplo, string trans, string diag, ref int n, ref int k, ref float a, ref int lda, ref float x, ref int incx)
        {
            fixed (int* __refParamPtr3 = &n)
            {
                var __arg3 = __refParamPtr3;
                fixed (int* __refParamPtr4 = &k)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (float* __refParamPtr5 = &a)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (int* __refParamPtr6 = &lda)
                        {
                            var __arg6 = __refParamPtr6;
                            fixed (float* __refParamPtr7 = &x)
                            {
                                var __arg7 = __refParamPtr7;
                                fixed (int* __refParamPtr8 = &incx)
                                {
                                    var __arg8 = __refParamPtr8;
                                    __Internal.Stbsv(uplo, trans, diag, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Stpmv(string uplo, string trans, string diag, ref int n, ref float ap, ref float x, ref int incx)
        {
            fixed (int* __refParamPtr3 = &n)
            {
                var __arg3 = __refParamPtr3;
                fixed (float* __refParamPtr4 = &ap)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (float* __refParamPtr5 = &x)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (int* __refParamPtr6 = &incx)
                        {
                            var __arg6 = __refParamPtr6;
                            __Internal.Stpmv(uplo, trans, diag, __arg3, __arg4, __arg5, __arg6);
                        }
                    }
                }
            }
        }

        public static void Stpsv(string uplo, string trans, string diag, ref int n, ref float ap, ref float x, ref int incx)
        {
            fixed (int* __refParamPtr3 = &n)
            {
                var __arg3 = __refParamPtr3;
                fixed (float* __refParamPtr4 = &ap)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (float* __refParamPtr5 = &x)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (int* __refParamPtr6 = &incx)
                        {
                            var __arg6 = __refParamPtr6;
                            __Internal.Stpsv(uplo, trans, diag, __arg3, __arg4, __arg5, __arg6);
                        }
                    }
                }
            }
        }

        public static void Strmv(string uplo, string transa, string diag, ref int n, ref float a, ref int lda, ref float b, ref int incx)
        {
            fixed (int* __refParamPtr3 = &n)
            {
                var __arg3 = __refParamPtr3;
                fixed (float* __refParamPtr4 = &a)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (int* __refParamPtr5 = &lda)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (float* __refParamPtr6 = &b)
                        {
                            var __arg6 = __refParamPtr6;
                            fixed (int* __refParamPtr7 = &incx)
                            {
                                var __arg7 = __refParamPtr7;
                                __Internal.Strmv(uplo, transa, diag, __arg3, __arg4, __arg5, __arg6, __arg7);
                            }
                        }
                    }
                }
            }
        }

        public static void Strsv(string uplo, string trans, string diag, ref int n, ref float a, ref int lda, ref float x, ref int incx)
        {
            fixed (int* __refParamPtr3 = &n)
            {
                var __arg3 = __refParamPtr3;
                fixed (float* __refParamPtr4 = &a)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (int* __refParamPtr5 = &lda)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (float* __refParamPtr6 = &x)
                        {
                            var __arg6 = __refParamPtr6;
                            fixed (int* __refParamPtr7 = &incx)
                            {
                                var __arg7 = __refParamPtr7;
                                __Internal.Strsv(uplo, trans, diag, __arg3, __arg4, __arg5, __arg6, __arg7);
                            }
                        }
                    }
                }
            }
        }

        public static void Sgem2vu(ref int m, ref int n, ref float alpha, ref float a, ref int lda, ref float x1, ref int incx1, ref float x2, ref int incx2, ref float beta, ref float y1, ref int incy1, ref float y2, ref int incy2)
        {
            fixed (int* __refParamPtr0 = &m)
            {
                var __arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &n)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &alpha)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (float* __refParamPtr3 = &a)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (int* __refParamPtr4 = &lda)
                            {
                                var __arg4 = __refParamPtr4;
                                fixed (float* __refParamPtr5 = &x1)
                                {
                                    var __arg5 = __refParamPtr5;
                                    fixed (int* __refParamPtr6 = &incx1)
                                    {
                                        var __arg6 = __refParamPtr6;
                                        fixed (float* __refParamPtr7 = &x2)
                                        {
                                            var __arg7 = __refParamPtr7;
                                            fixed (int* __refParamPtr8 = &incx2)
                                            {
                                                var __arg8 = __refParamPtr8;
                                                fixed (float* __refParamPtr9 = &beta)
                                                {
                                                    var __arg9 = __refParamPtr9;
                                                    fixed (float* __refParamPtr10 = &y1)
                                                    {
                                                        var __arg10 = __refParamPtr10;
                                                        fixed (int* __refParamPtr11 = &incy1)
                                                        {
                                                            var __arg11 = __refParamPtr11;
                                                            fixed (float* __refParamPtr12 = &y2)
                                                            {
                                                                var __arg12 = __refParamPtr12;
                                                                fixed (int* __refParamPtr13 = &incy2)
                                                                {
                                                                    var __arg13 = __refParamPtr13;
                                                                    __Internal.Sgem2vu(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12, __arg13);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Dgbmv(string trans, ref int m, ref int n, ref int kl, ref int ku, ref double alpha, ref double a, ref int lda, ref double x, ref int incx, ref double beta, ref double y, ref int incy)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &n)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &kl)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &ku)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (double* __refParamPtr5 = &alpha)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (double* __refParamPtr6 = &a)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (int* __refParamPtr7 = &lda)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        fixed (double* __refParamPtr8 = &x)
                                        {
                                            var __arg8 = __refParamPtr8;
                                            fixed (int* __refParamPtr9 = &incx)
                                            {
                                                var __arg9 = __refParamPtr9;
                                                fixed (double* __refParamPtr10 = &beta)
                                                {
                                                    var __arg10 = __refParamPtr10;
                                                    fixed (double* __refParamPtr11 = &y)
                                                    {
                                                        var __arg11 = __refParamPtr11;
                                                        fixed (int* __refParamPtr12 = &incy)
                                                        {
                                                            var __arg12 = __refParamPtr12;
                                                            __Internal.Dgbmv(trans, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Dgemv(string trans, ref int m, ref int n, ref double alpha, ref double a, ref int lda, ref double x, ref int incx, ref double beta, ref double y, ref int incy)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &n)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &alpha)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (double* __refParamPtr4 = &a)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (int* __refParamPtr5 = &lda)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (double* __refParamPtr6 = &x)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (int* __refParamPtr7 = &incx)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        fixed (double* __refParamPtr8 = &beta)
                                        {
                                            var __arg8 = __refParamPtr8;
                                            fixed (double* __refParamPtr9 = &y)
                                            {
                                                var __arg9 = __refParamPtr9;
                                                fixed (int* __refParamPtr10 = &incy)
                                                {
                                                    var __arg10 = __refParamPtr10;
                                                    __Internal.Dgemv(trans, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Dger(ref int m, ref int n, ref double alpha, ref double x, ref int incx, ref double y, ref int incy, ref double a, ref int lda)
        {
            fixed (int* __refParamPtr0 = &m)
            {
                var __arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &n)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (double* __refParamPtr2 = &alpha)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (double* __refParamPtr3 = &x)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (int* __refParamPtr4 = &incx)
                            {
                                var __arg4 = __refParamPtr4;
                                fixed (double* __refParamPtr5 = &y)
                                {
                                    var __arg5 = __refParamPtr5;
                                    fixed (int* __refParamPtr6 = &incy)
                                    {
                                        var __arg6 = __refParamPtr6;
                                        fixed (double* __refParamPtr7 = &a)
                                        {
                                            var __arg7 = __refParamPtr7;
                                            fixed (int* __refParamPtr8 = &lda)
                                            {
                                                var __arg8 = __refParamPtr8;
                                                __Internal.Dger(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Dsbmv(string uplo, ref int n, ref int k, ref double alpha, ref double a, ref int lda, ref double x, ref int incx, ref double beta, ref double y, ref int incy)
        {
            fixed (int* __refParamPtr1 = &n)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &k)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &alpha)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (double* __refParamPtr4 = &a)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (int* __refParamPtr5 = &lda)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (double* __refParamPtr6 = &x)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (int* __refParamPtr7 = &incx)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        fixed (double* __refParamPtr8 = &beta)
                                        {
                                            var __arg8 = __refParamPtr8;
                                            fixed (double* __refParamPtr9 = &y)
                                            {
                                                var __arg9 = __refParamPtr9;
                                                fixed (int* __refParamPtr10 = &incy)
                                                {
                                                    var __arg10 = __refParamPtr10;
                                                    __Internal.Dsbmv(uplo, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Dspmv(string uplo, ref int n, ref double alpha, ref double ap, ref double x, ref int incx, ref double beta, ref double y, ref int incy)
        {
            fixed (int* __refParamPtr1 = &n)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &alpha)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &ap)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (double* __refParamPtr4 = &x)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (int* __refParamPtr5 = &incx)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (double* __refParamPtr6 = &beta)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (double* __refParamPtr7 = &y)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        fixed (int* __refParamPtr8 = &incy)
                                        {
                                            var __arg8 = __refParamPtr8;
                                            __Internal.Dspmv(uplo, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Dspr(string uplo, ref int n, ref double alpha, ref double x, ref int incx, ref double ap)
        {
            fixed (int* __refParamPtr1 = &n)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &alpha)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &x)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &incx)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (double* __refParamPtr5 = &ap)
                            {
                                var __arg5 = __refParamPtr5;
                                __Internal.Dspr(uplo, __arg1, __arg2, __arg3, __arg4, __arg5);
                            }
                        }
                    }
                }
            }
        }

        public static void Dspr2(string uplo, ref int n, ref double alpha, ref double x, ref int incx, ref double y, ref int incy, ref double ap)
        {
            fixed (int* __refParamPtr1 = &n)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &alpha)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &x)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &incx)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (double* __refParamPtr5 = &y)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (int* __refParamPtr6 = &incy)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (double* __refParamPtr7 = &ap)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        __Internal.Dspr2(uplo, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Dsymv(string uplo, ref int n, ref double alpha, ref double a, ref int lda, ref double x, ref int incx, ref double beta, ref double y, ref int incy)
        {
            fixed (int* __refParamPtr1 = &n)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &alpha)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &a)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &lda)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (double* __refParamPtr5 = &x)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (int* __refParamPtr6 = &incx)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (double* __refParamPtr7 = &beta)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        fixed (double* __refParamPtr8 = &y)
                                        {
                                            var __arg8 = __refParamPtr8;
                                            fixed (int* __refParamPtr9 = &incy)
                                            {
                                                var __arg9 = __refParamPtr9;
                                                __Internal.Dsymv(uplo, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Dsyr(string uplo, ref int n, ref double alpha, ref double x, ref int incx, ref double a, ref int lda)
        {
            fixed (int* __refParamPtr1 = &n)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &alpha)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &x)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &incx)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (double* __refParamPtr5 = &a)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (int* __refParamPtr6 = &lda)
                                {
                                    var __arg6 = __refParamPtr6;
                                    __Internal.Dsyr(uplo, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Dsyr2(string uplo, ref int n, ref double alpha, ref double x, ref int incx, ref double y, ref int incy, ref double a, ref int lda)
        {
            fixed (int* __refParamPtr1 = &n)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &alpha)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &x)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &incx)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (double* __refParamPtr5 = &y)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (int* __refParamPtr6 = &incy)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (double* __refParamPtr7 = &a)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        fixed (int* __refParamPtr8 = &lda)
                                        {
                                            var __arg8 = __refParamPtr8;
                                            __Internal.Dsyr2(uplo, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Dtbmv(string uplo, string trans, string diag, ref int n, ref int k, ref double a, ref int lda, ref double x, ref int incx)
        {
            fixed (int* __refParamPtr3 = &n)
            {
                var __arg3 = __refParamPtr3;
                fixed (int* __refParamPtr4 = &k)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (double* __refParamPtr5 = &a)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (int* __refParamPtr6 = &lda)
                        {
                            var __arg6 = __refParamPtr6;
                            fixed (double* __refParamPtr7 = &x)
                            {
                                var __arg7 = __refParamPtr7;
                                fixed (int* __refParamPtr8 = &incx)
                                {
                                    var __arg8 = __refParamPtr8;
                                    __Internal.Dtbmv(uplo, trans, diag, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Dtbsv(string uplo, string trans, string diag, ref int n, ref int k, ref double a, ref int lda, ref double x, ref int incx)
        {
            fixed (int* __refParamPtr3 = &n)
            {
                var __arg3 = __refParamPtr3;
                fixed (int* __refParamPtr4 = &k)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (double* __refParamPtr5 = &a)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (int* __refParamPtr6 = &lda)
                        {
                            var __arg6 = __refParamPtr6;
                            fixed (double* __refParamPtr7 = &x)
                            {
                                var __arg7 = __refParamPtr7;
                                fixed (int* __refParamPtr8 = &incx)
                                {
                                    var __arg8 = __refParamPtr8;
                                    __Internal.Dtbsv(uplo, trans, diag, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Dtpmv(string uplo, string trans, string diag, ref int n, ref double ap, ref double x, ref int incx)
        {
            fixed (int* __refParamPtr3 = &n)
            {
                var __arg3 = __refParamPtr3;
                fixed (double* __refParamPtr4 = &ap)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (double* __refParamPtr5 = &x)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (int* __refParamPtr6 = &incx)
                        {
                            var __arg6 = __refParamPtr6;
                            __Internal.Dtpmv(uplo, trans, diag, __arg3, __arg4, __arg5, __arg6);
                        }
                    }
                }
            }
        }

        public static void Dtpsv(string uplo, string trans, string diag, ref int n, ref double ap, ref double x, ref int incx)
        {
            fixed (int* __refParamPtr3 = &n)
            {
                var __arg3 = __refParamPtr3;
                fixed (double* __refParamPtr4 = &ap)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (double* __refParamPtr5 = &x)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (int* __refParamPtr6 = &incx)
                        {
                            var __arg6 = __refParamPtr6;
                            __Internal.Dtpsv(uplo, trans, diag, __arg3, __arg4, __arg5, __arg6);
                        }
                    }
                }
            }
        }

        public static void Dtrmv(string uplo, string transa, string diag, ref int n, ref double a, ref int lda, ref double b, ref int incx)
        {
            fixed (int* __refParamPtr3 = &n)
            {
                var __arg3 = __refParamPtr3;
                fixed (double* __refParamPtr4 = &a)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (int* __refParamPtr5 = &lda)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (double* __refParamPtr6 = &b)
                        {
                            var __arg6 = __refParamPtr6;
                            fixed (int* __refParamPtr7 = &incx)
                            {
                                var __arg7 = __refParamPtr7;
                                __Internal.Dtrmv(uplo, transa, diag, __arg3, __arg4, __arg5, __arg6, __arg7);
                            }
                        }
                    }
                }
            }
        }

        public static void Dtrsv(string uplo, string trans, string diag, ref int n, ref double a, ref int lda, ref double x, ref int incx)
        {
            fixed (int* __refParamPtr3 = &n)
            {
                var __arg3 = __refParamPtr3;
                fixed (double* __refParamPtr4 = &a)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (int* __refParamPtr5 = &lda)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (double* __refParamPtr6 = &x)
                        {
                            var __arg6 = __refParamPtr6;
                            fixed (int* __refParamPtr7 = &incx)
                            {
                                var __arg7 = __refParamPtr7;
                                __Internal.Dtrsv(uplo, trans, diag, __arg3, __arg4, __arg5, __arg6, __arg7);
                            }
                        }
                    }
                }
            }
        }

        public static void Dgem2vu(ref int m, ref int n, ref double alpha, ref double a, ref int lda, ref double x1, ref int incx1, ref double x2, ref int incx2, ref double beta, ref double y1, ref int incy1, ref double y2, ref int incy2)
        {
            fixed (int* __refParamPtr0 = &m)
            {
                var __arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &n)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (double* __refParamPtr2 = &alpha)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (double* __refParamPtr3 = &a)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (int* __refParamPtr4 = &lda)
                            {
                                var __arg4 = __refParamPtr4;
                                fixed (double* __refParamPtr5 = &x1)
                                {
                                    var __arg5 = __refParamPtr5;
                                    fixed (int* __refParamPtr6 = &incx1)
                                    {
                                        var __arg6 = __refParamPtr6;
                                        fixed (double* __refParamPtr7 = &x2)
                                        {
                                            var __arg7 = __refParamPtr7;
                                            fixed (int* __refParamPtr8 = &incx2)
                                            {
                                                var __arg8 = __refParamPtr8;
                                                fixed (double* __refParamPtr9 = &beta)
                                                {
                                                    var __arg9 = __refParamPtr9;
                                                    fixed (double* __refParamPtr10 = &y1)
                                                    {
                                                        var __arg10 = __refParamPtr10;
                                                        fixed (int* __refParamPtr11 = &incy1)
                                                        {
                                                            var __arg11 = __refParamPtr11;
                                                            fixed (double* __refParamPtr12 = &y2)
                                                            {
                                                                var __arg12 = __refParamPtr12;
                                                                fixed (int* __refParamPtr13 = &incy2)
                                                                {
                                                                    var __arg13 = __refParamPtr13;
                                                                    __Internal.Dgem2vu(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12, __arg13);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Sgemm(string transa, string transb, ref int m, ref int n, ref int k, ref float alpha, ref float a, ref int lda, ref float b, ref int ldb, ref float beta, ref float c, ref int ldc)
        {
            fixed (int* __refParamPtr2 = &m)
            {
                var __arg2 = __refParamPtr2;
                fixed (int* __refParamPtr3 = &n)
                {
                    var __arg3 = __refParamPtr3;
                    fixed (int* __refParamPtr4 = &k)
                    {
                        var __arg4 = __refParamPtr4;
                        fixed (float* __refParamPtr5 = &alpha)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (float* __refParamPtr6 = &a)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &lda)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (float* __refParamPtr8 = &b)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (int* __refParamPtr9 = &ldb)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (float* __refParamPtr10 = &beta)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (float* __refParamPtr11 = &c)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    fixed (int* __refParamPtr12 = &ldc)
                                                    {
                                                        var __arg12 = __refParamPtr12;
                                                        __Internal.Sgemm(transa, transb, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static float* SgemmAlloc(string identifier, ref int m, ref int n, ref int k)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &n)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &k)
                    {
                        var __arg3 = __refParamPtr3;
                        var __ret = __Internal.SgemmAlloc(identifier, __arg1, __arg2, __arg3);
                        return __ret;
                    }
                }
            }
        }

        public static void SgemmPack(string identifier, string trans, ref int m, ref int n, ref int k, ref float alpha, ref float src, ref int ld, ref float dest)
        {
            fixed (int* __refParamPtr2 = &m)
            {
                var __arg2 = __refParamPtr2;
                fixed (int* __refParamPtr3 = &n)
                {
                    var __arg3 = __refParamPtr3;
                    fixed (int* __refParamPtr4 = &k)
                    {
                        var __arg4 = __refParamPtr4;
                        fixed (float* __refParamPtr5 = &alpha)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (float* __refParamPtr6 = &src)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &ld)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (float* __refParamPtr8 = &dest)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        __Internal.SgemmPack(identifier, trans, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void SgemmCompute(string transa, string transb, ref int m, ref int n, ref int k, ref float a, ref int lda, ref float b, ref int ldb, ref float beta, ref float c, ref int ldc)
        {
            fixed (int* __refParamPtr2 = &m)
            {
                var __arg2 = __refParamPtr2;
                fixed (int* __refParamPtr3 = &n)
                {
                    var __arg3 = __refParamPtr3;
                    fixed (int* __refParamPtr4 = &k)
                    {
                        var __arg4 = __refParamPtr4;
                        fixed (float* __refParamPtr5 = &a)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &lda)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (float* __refParamPtr7 = &b)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &ldb)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (float* __refParamPtr9 = &beta)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (float* __refParamPtr10 = &c)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (int* __refParamPtr11 = &ldc)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    __Internal.SgemmCompute(transa, transb, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void SgemmFree(ref float mat)
        {
            fixed (float* __refParamPtr0 = &mat)
            {
                var __arg0 = __refParamPtr0;
                __Internal.SgemmFree(__arg0);
            }
        }

        public static void SgemmBatch(string transa_array, string transb_array, ref int m_array, ref int n_array, ref int k_array, ref float alpha_array, float** a_array, ref int lda_array, float** b_array, ref int ldb_array, ref float beta_array, float** c_array, ref int ldc_array, ref int group_count, ref int group_size)
        {
            fixed (int* __refParamPtr2 = &m_array)
            {
                var __arg2 = __refParamPtr2;
                fixed (int* __refParamPtr3 = &n_array)
                {
                    var __arg3 = __refParamPtr3;
                    fixed (int* __refParamPtr4 = &k_array)
                    {
                        var __arg4 = __refParamPtr4;
                        fixed (float* __refParamPtr5 = &alpha_array)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr7 = &lda_array)
                            {
                                var __arg7 = __refParamPtr7;
                                fixed (int* __refParamPtr9 = &ldb_array)
                                {
                                    var __arg9 = __refParamPtr9;
                                    fixed (float* __refParamPtr10 = &beta_array)
                                    {
                                        var __arg10 = __refParamPtr10;
                                        fixed (int* __refParamPtr12 = &ldc_array)
                                        {
                                            var __arg12 = __refParamPtr12;
                                            fixed (int* __refParamPtr13 = &group_count)
                                            {
                                                var __arg13 = __refParamPtr13;
                                                fixed (int* __refParamPtr14 = &group_size)
                                                {
                                                    var __arg14 = __refParamPtr14;
                                                    __Internal.SgemmBatch(transa_array, transb_array, __arg2, __arg3, __arg4, __arg5, a_array, __arg7, b_array, __arg9, __arg10, c_array, __arg12, __arg13, __arg14);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Sgemmt(string uplo, string transa, string transb, ref int n, ref int k, ref float alpha, ref float a, ref int lda, ref float b, ref int ldb, ref float beta, ref float c, ref int ldc)
        {
            fixed (int* __refParamPtr3 = &n)
            {
                var __arg3 = __refParamPtr3;
                fixed (int* __refParamPtr4 = &k)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (float* __refParamPtr5 = &alpha)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (float* __refParamPtr6 = &a)
                        {
                            var __arg6 = __refParamPtr6;
                            fixed (int* __refParamPtr7 = &lda)
                            {
                                var __arg7 = __refParamPtr7;
                                fixed (float* __refParamPtr8 = &b)
                                {
                                    var __arg8 = __refParamPtr8;
                                    fixed (int* __refParamPtr9 = &ldb)
                                    {
                                        var __arg9 = __refParamPtr9;
                                        fixed (float* __refParamPtr10 = &beta)
                                        {
                                            var __arg10 = __refParamPtr10;
                                            fixed (float* __refParamPtr11 = &c)
                                            {
                                                var __arg11 = __refParamPtr11;
                                                fixed (int* __refParamPtr12 = &ldc)
                                                {
                                                    var __arg12 = __refParamPtr12;
                                                    __Internal.Sgemmt(uplo, transa, transb, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Ssymm(string side, string uplo, ref int m, ref int n, ref float alpha, ref float a, ref int lda, ref float b, ref int ldb, ref float beta, ref float c, ref int ldc)
        {
            fixed (int* __refParamPtr2 = &m)
            {
                var __arg2 = __refParamPtr2;
                fixed (int* __refParamPtr3 = &n)
                {
                    var __arg3 = __refParamPtr3;
                    fixed (float* __refParamPtr4 = &alpha)
                    {
                        var __arg4 = __refParamPtr4;
                        fixed (float* __refParamPtr5 = &a)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &lda)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (float* __refParamPtr7 = &b)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &ldb)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (float* __refParamPtr9 = &beta)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (float* __refParamPtr10 = &c)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (int* __refParamPtr11 = &ldc)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    __Internal.Ssymm(side, uplo, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Ssyr2k(string uplo, string trans, ref int n, ref int k, ref float alpha, ref float a, ref int lda, ref float b, ref int ldb, ref float beta, ref float c, ref int ldc)
        {
            fixed (int* __refParamPtr2 = &n)
            {
                var __arg2 = __refParamPtr2;
                fixed (int* __refParamPtr3 = &k)
                {
                    var __arg3 = __refParamPtr3;
                    fixed (float* __refParamPtr4 = &alpha)
                    {
                        var __arg4 = __refParamPtr4;
                        fixed (float* __refParamPtr5 = &a)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &lda)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (float* __refParamPtr7 = &b)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &ldb)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (float* __refParamPtr9 = &beta)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (float* __refParamPtr10 = &c)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (int* __refParamPtr11 = &ldc)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    __Internal.Ssyr2k(uplo, trans, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Ssyrk(string uplo, string trans, ref int n, ref int k, ref float alpha, ref float a, ref int lda, ref float beta, ref float c, ref int ldc)
        {
            fixed (int* __refParamPtr2 = &n)
            {
                var __arg2 = __refParamPtr2;
                fixed (int* __refParamPtr3 = &k)
                {
                    var __arg3 = __refParamPtr3;
                    fixed (float* __refParamPtr4 = &alpha)
                    {
                        var __arg4 = __refParamPtr4;
                        fixed (float* __refParamPtr5 = &a)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &lda)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (float* __refParamPtr7 = &beta)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (float* __refParamPtr8 = &c)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (int* __refParamPtr9 = &ldc)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            __Internal.Ssyrk(uplo, trans, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Strmm(string side, string uplo, string transa, string diag, ref int m, ref int n, ref float alpha, ref float a, ref int lda, ref float b, ref int ldb)
        {
            fixed (int* __refParamPtr4 = &m)
            {
                var __arg4 = __refParamPtr4;
                fixed (int* __refParamPtr5 = &n)
                {
                    var __arg5 = __refParamPtr5;
                    fixed (float* __refParamPtr6 = &alpha)
                    {
                        var __arg6 = __refParamPtr6;
                        fixed (float* __refParamPtr7 = &a)
                        {
                            var __arg7 = __refParamPtr7;
                            fixed (int* __refParamPtr8 = &lda)
                            {
                                var __arg8 = __refParamPtr8;
                                fixed (float* __refParamPtr9 = &b)
                                {
                                    var __arg9 = __refParamPtr9;
                                    fixed (int* __refParamPtr10 = &ldb)
                                    {
                                        var __arg10 = __refParamPtr10;
                                        __Internal.Strmm(side, uplo, transa, diag, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Strsm(string side, string uplo, string transa, string diag, ref int m, ref int n, ref float alpha, ref float a, ref int lda, ref float b, ref int ldb)
        {
            fixed (int* __refParamPtr4 = &m)
            {
                var __arg4 = __refParamPtr4;
                fixed (int* __refParamPtr5 = &n)
                {
                    var __arg5 = __refParamPtr5;
                    fixed (float* __refParamPtr6 = &alpha)
                    {
                        var __arg6 = __refParamPtr6;
                        fixed (float* __refParamPtr7 = &a)
                        {
                            var __arg7 = __refParamPtr7;
                            fixed (int* __refParamPtr8 = &lda)
                            {
                                var __arg8 = __refParamPtr8;
                                fixed (float* __refParamPtr9 = &b)
                                {
                                    var __arg9 = __refParamPtr9;
                                    fixed (int* __refParamPtr10 = &ldb)
                                    {
                                        var __arg10 = __refParamPtr10;
                                        __Internal.Strsm(side, uplo, transa, diag, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void StrsmBatch(string side_array, string uplo_array, string transa_array, string diag_array, ref int m_array, ref int n_array, ref float alpha_array, float** a_array, ref int lda_array, float** b_array, ref int ldb, ref int group_count, ref int group_size)
        {
            fixed (int* __refParamPtr4 = &m_array)
            {
                var __arg4 = __refParamPtr4;
                fixed (int* __refParamPtr5 = &n_array)
                {
                    var __arg5 = __refParamPtr5;
                    fixed (float* __refParamPtr6 = &alpha_array)
                    {
                        var __arg6 = __refParamPtr6;
                        fixed (int* __refParamPtr8 = &lda_array)
                        {
                            var __arg8 = __refParamPtr8;
                            fixed (int* __refParamPtr10 = &ldb)
                            {
                                var __arg10 = __refParamPtr10;
                                fixed (int* __refParamPtr11 = &group_count)
                                {
                                    var __arg11 = __refParamPtr11;
                                    fixed (int* __refParamPtr12 = &group_size)
                                    {
                                        var __arg12 = __refParamPtr12;
                                        __Internal.StrsmBatch(side_array, uplo_array, transa_array, diag_array, __arg4, __arg5, __arg6, a_array, __arg8, b_array, __arg10, __arg11, __arg12);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Dgemm(string transa, string transb, ref int m, ref int n, ref int k, ref double alpha, ref double a, ref int lda, ref double b, ref int ldb, ref double beta, ref double c, ref int ldc)
        {
            fixed (int* __refParamPtr2 = &m)
            {
                var __arg2 = __refParamPtr2;
                fixed (int* __refParamPtr3 = &n)
                {
                    var __arg3 = __refParamPtr3;
                    fixed (int* __refParamPtr4 = &k)
                    {
                        var __arg4 = __refParamPtr4;
                        fixed (double* __refParamPtr5 = &alpha)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (double* __refParamPtr6 = &a)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &lda)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (double* __refParamPtr8 = &b)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (int* __refParamPtr9 = &ldb)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (double* __refParamPtr10 = &beta)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (double* __refParamPtr11 = &c)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    fixed (int* __refParamPtr12 = &ldc)
                                                    {
                                                        var __arg12 = __refParamPtr12;
                                                        __Internal.Dgemm(transa, transb, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static double* DgemmAlloc(string identifier, ref int m, ref int n, ref int k)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &n)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &k)
                    {
                        var __arg3 = __refParamPtr3;
                        var __ret = __Internal.DgemmAlloc(identifier, __arg1, __arg2, __arg3);
                        return __ret;
                    }
                }
            }
        }

        public static void DgemmPack(string identifier, string trans, ref int m, ref int n, ref int k, ref double alpha, ref double src, ref int ld, ref double dest)
        {
            fixed (int* __refParamPtr2 = &m)
            {
                var __arg2 = __refParamPtr2;
                fixed (int* __refParamPtr3 = &n)
                {
                    var __arg3 = __refParamPtr3;
                    fixed (int* __refParamPtr4 = &k)
                    {
                        var __arg4 = __refParamPtr4;
                        fixed (double* __refParamPtr5 = &alpha)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (double* __refParamPtr6 = &src)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &ld)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (double* __refParamPtr8 = &dest)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        __Internal.DgemmPack(identifier, trans, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void DgemmCompute(string transa, string transb, ref int m, ref int n, ref int k, ref double a, ref int lda, ref double b, ref int ldb, ref double beta, ref double c, ref int ldc)
        {
            fixed (int* __refParamPtr2 = &m)
            {
                var __arg2 = __refParamPtr2;
                fixed (int* __refParamPtr3 = &n)
                {
                    var __arg3 = __refParamPtr3;
                    fixed (int* __refParamPtr4 = &k)
                    {
                        var __arg4 = __refParamPtr4;
                        fixed (double* __refParamPtr5 = &a)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &lda)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (double* __refParamPtr7 = &b)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &ldb)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (double* __refParamPtr9 = &beta)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (double* __refParamPtr10 = &c)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (int* __refParamPtr11 = &ldc)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    __Internal.DgemmCompute(transa, transb, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void DgemmFree(ref double mat)
        {
            fixed (double* __refParamPtr0 = &mat)
            {
                var __arg0 = __refParamPtr0;
                __Internal.DgemmFree(__arg0);
            }
        }

        public static void DgemmBatch(string transa_array, string transb_array, ref int m_array, ref int n_array, ref int k_array, ref double alpha_array, double** a_array, ref int lda_array, double** b_array, ref int ldb_array, ref double beta_array, double** c_array, ref int ldc_array, ref int group_count, ref int group_size)
        {
            fixed (int* __refParamPtr2 = &m_array)
            {
                var __arg2 = __refParamPtr2;
                fixed (int* __refParamPtr3 = &n_array)
                {
                    var __arg3 = __refParamPtr3;
                    fixed (int* __refParamPtr4 = &k_array)
                    {
                        var __arg4 = __refParamPtr4;
                        fixed (double* __refParamPtr5 = &alpha_array)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr7 = &lda_array)
                            {
                                var __arg7 = __refParamPtr7;
                                fixed (int* __refParamPtr9 = &ldb_array)
                                {
                                    var __arg9 = __refParamPtr9;
                                    fixed (double* __refParamPtr10 = &beta_array)
                                    {
                                        var __arg10 = __refParamPtr10;
                                        fixed (int* __refParamPtr12 = &ldc_array)
                                        {
                                            var __arg12 = __refParamPtr12;
                                            fixed (int* __refParamPtr13 = &group_count)
                                            {
                                                var __arg13 = __refParamPtr13;
                                                fixed (int* __refParamPtr14 = &group_size)
                                                {
                                                    var __arg14 = __refParamPtr14;
                                                    __Internal.DgemmBatch(transa_array, transb_array, __arg2, __arg3, __arg4, __arg5, a_array, __arg7, b_array, __arg9, __arg10, c_array, __arg12, __arg13, __arg14);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Dgemmt(string uplo, string transa, string transb, ref int n, ref int k, ref double alpha, ref double a, ref int lda, ref double b, ref int ldb, ref double beta, ref double c, ref int ldc)
        {
            fixed (int* __refParamPtr3 = &n)
            {
                var __arg3 = __refParamPtr3;
                fixed (int* __refParamPtr4 = &k)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (double* __refParamPtr5 = &alpha)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (double* __refParamPtr6 = &a)
                        {
                            var __arg6 = __refParamPtr6;
                            fixed (int* __refParamPtr7 = &lda)
                            {
                                var __arg7 = __refParamPtr7;
                                fixed (double* __refParamPtr8 = &b)
                                {
                                    var __arg8 = __refParamPtr8;
                                    fixed (int* __refParamPtr9 = &ldb)
                                    {
                                        var __arg9 = __refParamPtr9;
                                        fixed (double* __refParamPtr10 = &beta)
                                        {
                                            var __arg10 = __refParamPtr10;
                                            fixed (double* __refParamPtr11 = &c)
                                            {
                                                var __arg11 = __refParamPtr11;
                                                fixed (int* __refParamPtr12 = &ldc)
                                                {
                                                    var __arg12 = __refParamPtr12;
                                                    __Internal.Dgemmt(uplo, transa, transb, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Dsymm(string side, string uplo, ref int m, ref int n, ref double alpha, ref double a, ref int lda, ref double b, ref int ldb, ref double beta, ref double c, ref int ldc)
        {
            fixed (int* __refParamPtr2 = &m)
            {
                var __arg2 = __refParamPtr2;
                fixed (int* __refParamPtr3 = &n)
                {
                    var __arg3 = __refParamPtr3;
                    fixed (double* __refParamPtr4 = &alpha)
                    {
                        var __arg4 = __refParamPtr4;
                        fixed (double* __refParamPtr5 = &a)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &lda)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (double* __refParamPtr7 = &b)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &ldb)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (double* __refParamPtr9 = &beta)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (double* __refParamPtr10 = &c)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (int* __refParamPtr11 = &ldc)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    __Internal.Dsymm(side, uplo, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Dsyr2k(string uplo, string trans, ref int n, ref int k, ref double alpha, ref double a, ref int lda, ref double b, ref int ldb, ref double beta, ref double c, ref int ldc)
        {
            fixed (int* __refParamPtr2 = &n)
            {
                var __arg2 = __refParamPtr2;
                fixed (int* __refParamPtr3 = &k)
                {
                    var __arg3 = __refParamPtr3;
                    fixed (double* __refParamPtr4 = &alpha)
                    {
                        var __arg4 = __refParamPtr4;
                        fixed (double* __refParamPtr5 = &a)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &lda)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (double* __refParamPtr7 = &b)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &ldb)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (double* __refParamPtr9 = &beta)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (double* __refParamPtr10 = &c)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (int* __refParamPtr11 = &ldc)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    __Internal.Dsyr2k(uplo, trans, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Dsyrk(string uplo, string trans, ref int n, ref int k, ref double alpha, ref double a, ref int lda, ref double beta, ref double c, ref int ldc)
        {
            fixed (int* __refParamPtr2 = &n)
            {
                var __arg2 = __refParamPtr2;
                fixed (int* __refParamPtr3 = &k)
                {
                    var __arg3 = __refParamPtr3;
                    fixed (double* __refParamPtr4 = &alpha)
                    {
                        var __arg4 = __refParamPtr4;
                        fixed (double* __refParamPtr5 = &a)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &lda)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (double* __refParamPtr7 = &beta)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (double* __refParamPtr8 = &c)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (int* __refParamPtr9 = &ldc)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            __Internal.Dsyrk(uplo, trans, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Dtrmm(string side, string uplo, string transa, string diag, ref int m, ref int n, ref double alpha, ref double a, ref int lda, ref double b, ref int ldb)
        {
            fixed (int* __refParamPtr4 = &m)
            {
                var __arg4 = __refParamPtr4;
                fixed (int* __refParamPtr5 = &n)
                {
                    var __arg5 = __refParamPtr5;
                    fixed (double* __refParamPtr6 = &alpha)
                    {
                        var __arg6 = __refParamPtr6;
                        fixed (double* __refParamPtr7 = &a)
                        {
                            var __arg7 = __refParamPtr7;
                            fixed (int* __refParamPtr8 = &lda)
                            {
                                var __arg8 = __refParamPtr8;
                                fixed (double* __refParamPtr9 = &b)
                                {
                                    var __arg9 = __refParamPtr9;
                                    fixed (int* __refParamPtr10 = &ldb)
                                    {
                                        var __arg10 = __refParamPtr10;
                                        __Internal.Dtrmm(side, uplo, transa, diag, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Dtrsm(string side, string uplo, string transa, string diag, ref int m, ref int n, ref double alpha, ref double a, ref int lda, ref double b, ref int ldb)
        {
            fixed (int* __refParamPtr4 = &m)
            {
                var __arg4 = __refParamPtr4;
                fixed (int* __refParamPtr5 = &n)
                {
                    var __arg5 = __refParamPtr5;
                    fixed (double* __refParamPtr6 = &alpha)
                    {
                        var __arg6 = __refParamPtr6;
                        fixed (double* __refParamPtr7 = &a)
                        {
                            var __arg7 = __refParamPtr7;
                            fixed (int* __refParamPtr8 = &lda)
                            {
                                var __arg8 = __refParamPtr8;
                                fixed (double* __refParamPtr9 = &b)
                                {
                                    var __arg9 = __refParamPtr9;
                                    fixed (int* __refParamPtr10 = &ldb)
                                    {
                                        var __arg10 = __refParamPtr10;
                                        __Internal.Dtrsm(side, uplo, transa, diag, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void DtrsmBatch(string side_array, string uplo_array, string transa_array, string diag_array, ref int m_array, ref int n_array, ref double alpha_array, double** a_array, ref int lda_array, double** b_array, ref int ldb, ref int group_count, ref int group_size)
        {
            fixed (int* __refParamPtr4 = &m_array)
            {
                var __arg4 = __refParamPtr4;
                fixed (int* __refParamPtr5 = &n_array)
                {
                    var __arg5 = __refParamPtr5;
                    fixed (double* __refParamPtr6 = &alpha_array)
                    {
                        var __arg6 = __refParamPtr6;
                        fixed (int* __refParamPtr8 = &lda_array)
                        {
                            var __arg8 = __refParamPtr8;
                            fixed (int* __refParamPtr10 = &ldb)
                            {
                                var __arg10 = __refParamPtr10;
                                fixed (int* __refParamPtr11 = &group_count)
                                {
                                    var __arg11 = __refParamPtr11;
                                    fixed (int* __refParamPtr12 = &group_size)
                                    {
                                        var __arg12 = __refParamPtr12;
                                        __Internal.DtrsmBatch(side_array, uplo_array, transa_array, diag_array, __arg4, __arg5, __arg6, a_array, __arg8, b_array, __arg10, __arg11, __arg12);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void GemmS8u8s32(string transa, string transb, string offsetc, ref int m, ref int n, ref int k, ref float alpha, string a, ref int lda, string ao, byte* b, ref int ldb, string bo, ref float beta, ref int c, ref int ldc, ref int co)
        {
            fixed (int* __refParamPtr3 = &m)
            {
                var __arg3 = __refParamPtr3;
                fixed (int* __refParamPtr4 = &n)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (int* __refParamPtr5 = &k)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (float* __refParamPtr6 = &alpha)
                        {
                            var __arg6 = __refParamPtr6;
                            fixed (int* __refParamPtr8 = &lda)
                            {
                                var __arg8 = __refParamPtr8;
                                fixed (int* __refParamPtr11 = &ldb)
                                {
                                    var __arg11 = __refParamPtr11;
                                    fixed (float* __refParamPtr13 = &beta)
                                    {
                                        var __arg13 = __refParamPtr13;
                                        fixed (int* __refParamPtr14 = &c)
                                        {
                                            var __arg14 = __refParamPtr14;
                                            fixed (int* __refParamPtr15 = &ldc)
                                            {
                                                var __arg15 = __refParamPtr15;
                                                fixed (int* __refParamPtr16 = &co)
                                                {
                                                    var __arg16 = __refParamPtr16;
                                                    __Internal.GemmS8u8s32(transa, transb, offsetc, __arg3, __arg4, __arg5, __arg6, a, __arg8, ao, b, __arg11, bo, __arg13, __arg14, __arg15, __arg16);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void GemmS16s16s32(string transa, string transb, string offsetc, ref int m, ref int n, ref int k, ref float alpha, ref short a, ref int lda, ref short ao, ref short b, ref int ldb, ref short bo, ref float beta, ref int c, ref int ldc, ref int co)
        {
            fixed (int* __refParamPtr3 = &m)
            {
                var __arg3 = __refParamPtr3;
                fixed (int* __refParamPtr4 = &n)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (int* __refParamPtr5 = &k)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (float* __refParamPtr6 = &alpha)
                        {
                            var __arg6 = __refParamPtr6;
                            fixed (short* __refParamPtr7 = &a)
                            {
                                var __arg7 = __refParamPtr7;
                                fixed (int* __refParamPtr8 = &lda)
                                {
                                    var __arg8 = __refParamPtr8;
                                    fixed (short* __refParamPtr9 = &ao)
                                    {
                                        var __arg9 = __refParamPtr9;
                                        fixed (short* __refParamPtr10 = &b)
                                        {
                                            var __arg10 = __refParamPtr10;
                                            fixed (int* __refParamPtr11 = &ldb)
                                            {
                                                var __arg11 = __refParamPtr11;
                                                fixed (short* __refParamPtr12 = &bo)
                                                {
                                                    var __arg12 = __refParamPtr12;
                                                    fixed (float* __refParamPtr13 = &beta)
                                                    {
                                                        var __arg13 = __refParamPtr13;
                                                        fixed (int* __refParamPtr14 = &c)
                                                        {
                                                            var __arg14 = __refParamPtr14;
                                                            fixed (int* __refParamPtr15 = &ldc)
                                                            {
                                                                var __arg15 = __refParamPtr15;
                                                                fixed (int* __refParamPtr16 = &co)
                                                                {
                                                                    var __arg16 = __refParamPtr16;
                                                                    __Internal.GemmS16s16s32(transa, transb, offsetc, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12, __arg13, __arg14, __arg15, __arg16);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
