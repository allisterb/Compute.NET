// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace IntelMKL.LP64
{
    /// <summary>**************************************************************************************</summary>
    /// <remarks>
    /// <para>************ Basic types and constants for inspector-executor SpBLAS API *************</para>
    /// <para>**************************************************************************************</para>
    /// </remarks>
    public enum SparseStatusT
    {
        SPARSE_STATUS_SUCCESS = 0,
        SPARSE_STATUS_NOT_INITIALIZED = 1,
        SPARSE_STATUS_ALLOC_FAILED = 2,
        SPARSE_STATUS_INVALID_VALUE = 3,
        SPARSE_STATUS_EXECUTION_FAILED = 4,
        SPARSE_STATUS_INTERNAL_ERROR = 5,
        SPARSE_STATUS_NOT_SUPPORTED = 6
    }

    public enum SparseOperationT
    {
        SPARSE_OPERATION_NON_TRANSPOSE = 10,
        SPARSE_OPERATION_TRANSPOSE = 11,
        SPARSE_OPERATION_CONJUGATE_TRANSPOSE = 12
    }

    public enum SparseMatrixTypeT
    {
        SPARSE_MATRIX_TYPE_GENERAL = 20,
        SPARSE_MATRIX_TYPE_SYMMETRIC = 21,
        SPARSE_MATRIX_TYPE_HERMITIAN = 22,
        SPARSE_MATRIX_TYPE_TRIANGULAR = 23,
        SPARSE_MATRIX_TYPE_DIAGONAL = 24,
        SPARSE_MATRIX_TYPE_BLOCK_TRIANGULAR = 25,
        SPARSE_MATRIX_TYPE_BLOCK_DIAGONAL = 26
    }

    public enum SparseIndexBaseT
    {
        SPARSE_INDEX_BASE_ZERO = 0,
        SPARSE_INDEX_BASE_ONE = 1
    }

    public enum SparseFillModeT
    {
        SPARSE_FILL_MODE_LOWER = 40,
        SPARSE_FILL_MODE_UPPER = 41,
        SPARSE_FILL_MODE_FULL = 42
    }

    public enum SparseDiagTypeT
    {
        SPARSE_DIAG_NON_UNIT = 50,
        SPARSE_DIAG_UNIT = 51
    }

    public enum SparseLayoutT
    {
        SPARSE_LAYOUT_ROW_MAJOR = 101,
        SPARSE_LAYOUT_COLUMN_MAJOR = 102
    }

    public enum VerboseModeT
    {
        SPARSE_VERBOSE_OFF = 70,
        SPARSE_VERBOSE_BASIC = 71,
        SPARSE_VERBOSE_EXTENDED = 72
    }

    public enum SparseMemoryUsageT
    {
        SPARSE_MEMORY_NONE = 80,
        SPARSE_MEMORY_AGGRESSIVE = 81
    }

    public enum SparseCalculationT
    {
        REPLACE_WITH_MULT = 90,
        REPLACE_WITH_ADD = 91,
        REPLACE_WITH_MAX = 92,
        REPLACE_WITH_MIN = 93
    }

    /// <summary>**********************************************************************************************</summary>
    /// <remarks>
    /// <para>* Opaque structure for sparse matrix in internal format, further D - means double precision **</para>
    /// <para>**********************************************************************************************</para>
    /// </remarks>
    public unsafe partial struct SparseMatrix
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        private SparseMatrix.__Internal __instance;
        internal SparseMatrix.__Internal __Instance { get { return __instance; } }

        internal static global::IntelMKL.LP64.SparseMatrix __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::IntelMKL.LP64.SparseMatrix(native.ToPointer(), skipVTables);
        }

        internal static global::IntelMKL.LP64.SparseMatrix __CreateInstance(global::IntelMKL.LP64.SparseMatrix.__Internal native, bool skipVTables = false)
        {
            return new global::IntelMKL.LP64.SparseMatrix(native, skipVTables);
        }

        private SparseMatrix(global::IntelMKL.LP64.SparseMatrix.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private SparseMatrix(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::IntelMKL.LP64.SparseMatrix.__Internal*) native;
        }
    }

    public unsafe partial struct MatrixDescr
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::IntelMKL.LP64.SparseMatrixTypeT type;

            [FieldOffset(4)]
            internal global::IntelMKL.LP64.SparseFillModeT mode;

            [FieldOffset(8)]
            internal global::IntelMKL.LP64.SparseDiagTypeT diag;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0matrix_descr@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private MatrixDescr.__Internal __instance;
        internal MatrixDescr.__Internal __Instance { get { return __instance; } }

        internal static global::IntelMKL.LP64.MatrixDescr __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::IntelMKL.LP64.MatrixDescr(native.ToPointer(), skipVTables);
        }

        internal static global::IntelMKL.LP64.MatrixDescr __CreateInstance(global::IntelMKL.LP64.MatrixDescr.__Internal native, bool skipVTables = false)
        {
            return new global::IntelMKL.LP64.MatrixDescr(native, skipVTables);
        }

        private MatrixDescr(global::IntelMKL.LP64.MatrixDescr.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private MatrixDescr(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::IntelMKL.LP64.MatrixDescr.__Internal*) native;
        }

        public MatrixDescr(global::IntelMKL.LP64.MatrixDescr _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public global::IntelMKL.LP64.SparseMatrixTypeT Type
        {
            get
            {
                return __instance.type;
            }

            set
            {
                __instance.type = value;
            }
        }

        public global::IntelMKL.LP64.SparseFillModeT Mode
        {
            get
            {
                return __instance.mode;
            }

            set
            {
                __instance.mode = value;
            }
        }

        public global::IntelMKL.LP64.SparseDiagTypeT Diag
        {
            get
            {
                return __instance.diag;
            }

            set
            {
                __instance.diag = value;
            }
        }
    }

    public unsafe partial struct ReplaceOperation
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::IntelMKL.LP64.SparseCalculationT add;

            [FieldOffset(4)]
            internal global::IntelMKL.LP64.SparseCalculationT mult;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0replace_operation@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private ReplaceOperation.__Internal __instance;
        internal ReplaceOperation.__Internal __Instance { get { return __instance; } }

        internal static global::IntelMKL.LP64.ReplaceOperation __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::IntelMKL.LP64.ReplaceOperation(native.ToPointer(), skipVTables);
        }

        internal static global::IntelMKL.LP64.ReplaceOperation __CreateInstance(global::IntelMKL.LP64.ReplaceOperation.__Internal native, bool skipVTables = false)
        {
            return new global::IntelMKL.LP64.ReplaceOperation(native, skipVTables);
        }

        private ReplaceOperation(global::IntelMKL.LP64.ReplaceOperation.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private ReplaceOperation(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::IntelMKL.LP64.ReplaceOperation.__Internal*) native;
        }

        public ReplaceOperation(global::IntelMKL.LP64.ReplaceOperation _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public global::IntelMKL.LP64.SparseCalculationT Add
        {
            get
            {
                return __instance.add;
            }

            set
            {
                __instance.add = value;
            }
        }

        public global::IntelMKL.LP64.SparseCalculationT Mult
        {
            get
            {
                return __instance.mult;
            }

            set
            {
                __instance.mult = value;
            }
        }
    }

    /// <summary>**************************************************************************************</summary>
    /// <remarks>
    /// <para>**************************************************************************************</para>
    /// <para>**************************************************************************************</para>
    /// </remarks>
    public unsafe partial struct SparseVector
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        private SparseVector.__Internal __instance;
        internal SparseVector.__Internal __Instance { get { return __instance; } }

        internal static global::IntelMKL.LP64.SparseVector __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::IntelMKL.LP64.SparseVector(native.ToPointer(), skipVTables);
        }

        internal static global::IntelMKL.LP64.SparseVector __CreateInstance(global::IntelMKL.LP64.SparseVector.__Internal native, bool skipVTables = false)
        {
            return new global::IntelMKL.LP64.SparseVector(native, skipVTables);
        }

        private SparseVector(global::IntelMKL.LP64.SparseVector.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private SparseVector(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::IntelMKL.LP64.SparseVector.__Internal*) native;
        }
    }

    public unsafe partial class SpBlas
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_scsrmv")]
            internal static extern void MklScsrmv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* k, float* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, float* val, int* indx, int* pntrb, int* pntre, float* x, float* beta, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_scsrsv")]
            internal static extern void MklScsrsv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, float* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, float* val, int* indx, int* pntrb, int* pntre, float* x, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_scsrgemv")]
            internal static extern void MklScsrgemv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, float* a, int* ia, int* ja, float* x, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_cspblas_scsrgemv")]
            internal static extern void MklCspblasScsrgemv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, float* a, int* ia, int* ja, float* x, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_scsrsymv")]
            internal static extern void MklScsrsymv([MarshalAs(UnmanagedType.LPStr)] string uplo, int* m, float* a, int* ia, int* ja, float* x, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_cspblas_scsrsymv")]
            internal static extern void MklCspblasScsrsymv([MarshalAs(UnmanagedType.LPStr)] string uplo, int* m, float* a, int* ia, int* ja, float* x, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_scsrtrsv")]
            internal static extern void MklScsrtrsv([MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string transa, [MarshalAs(UnmanagedType.LPStr)] string diag, int* m, float* a, int* ia, int* ja, float* x, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_cspblas_scsrtrsv")]
            internal static extern void MklCspblasScsrtrsv([MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string transa, [MarshalAs(UnmanagedType.LPStr)] string diag, int* m, float* a, int* ia, int* ja, float* x, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_scscmv")]
            internal static extern void MklScscmv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* k, float* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, float* val, int* indx, int* pntrb, int* pntre, float* x, float* beta, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_scscsv")]
            internal static extern void MklScscsv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, float* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, float* val, int* indx, int* pntrb, int* pntre, float* x, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_scoomv")]
            internal static extern void MklScoomv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* k, float* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, float* val, int* rowind, int* colind, int* nnz, float* x, float* beta, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_scoosv")]
            internal static extern void MklScoosv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, float* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, float* val, int* rowind, int* colind, int* nnz, float* x, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_scoogemv")]
            internal static extern void MklScoogemv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, float* val, int* rowind, int* colind, int* nnz, float* x, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_cspblas_scoogemv")]
            internal static extern void MklCspblasScoogemv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, float* val, int* rowind, int* colind, int* nnz, float* x, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_scoosymv")]
            internal static extern void MklScoosymv([MarshalAs(UnmanagedType.LPStr)] string uplo, int* m, float* val, int* rowind, int* colind, int* nnz, float* x, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_cspblas_scoosymv")]
            internal static extern void MklCspblasScoosymv([MarshalAs(UnmanagedType.LPStr)] string uplo, int* m, float* val, int* rowind, int* colind, int* nnz, float* x, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_scootrsv")]
            internal static extern void MklScootrsv([MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string transa, [MarshalAs(UnmanagedType.LPStr)] string diag, int* m, float* val, int* rowind, int* colind, int* nnz, float* x, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_cspblas_scootrsv")]
            internal static extern void MklCspblasScootrsv([MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string transa, [MarshalAs(UnmanagedType.LPStr)] string diag, int* m, float* val, int* rowind, int* colind, int* nnz, float* x, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sdiamv")]
            internal static extern void MklSdiamv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* k, float* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, float* val, int* lval, int* idiag, int* ndiag, float* x, float* beta, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sdiasv")]
            internal static extern void MklSdiasv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, float* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, float* val, int* lval, int* idiag, int* ndiag, float* x, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sdiagemv")]
            internal static extern void MklSdiagemv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, float* val, int* lval, int* idiag, int* ndiag, float* x, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sdiasymv")]
            internal static extern void MklSdiasymv([MarshalAs(UnmanagedType.LPStr)] string uplo, int* m, float* val, int* lval, int* idiag, int* ndiag, float* x, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sdiatrsv")]
            internal static extern void MklSdiatrsv([MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string transa, [MarshalAs(UnmanagedType.LPStr)] string diag, int* m, float* val, int* lval, int* idiag, int* ndiag, float* x, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sskymv")]
            internal static extern void MklSskymv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* k, float* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, float* val, int* pntr, float* x, float* beta, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sskysv")]
            internal static extern void MklSskysv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, float* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, float* val, int* pntr, float* x, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sbsrmv")]
            internal static extern void MklSbsrmv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* k, int* lb, float* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, float* val, int* indx, int* pntrb, int* pntre, float* x, float* beta, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sbsrsv")]
            internal static extern void MklSbsrsv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* lb, float* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, float* val, int* indx, int* pntrb, int* pntre, float* x, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sbsrgemv")]
            internal static extern void MklSbsrgemv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* lb, float* a, int* ia, int* ja, float* x, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_cspblas_sbsrgemv")]
            internal static extern void MklCspblasSbsrgemv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* lb, float* a, int* ia, int* ja, float* x, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sbsrsymv")]
            internal static extern void MklSbsrsymv([MarshalAs(UnmanagedType.LPStr)] string uplo, int* m, int* lb, float* a, int* ia, int* ja, float* x, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_cspblas_sbsrsymv")]
            internal static extern void MklCspblasSbsrsymv([MarshalAs(UnmanagedType.LPStr)] string uplo, int* m, int* lb, float* a, int* ia, int* ja, float* x, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sbsrtrsv")]
            internal static extern void MklSbsrtrsv([MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string transa, [MarshalAs(UnmanagedType.LPStr)] string diag, int* m, int* lb, float* a, int* ia, int* ja, float* x, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_cspblas_sbsrtrsv")]
            internal static extern void MklCspblasSbsrtrsv([MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string transa, [MarshalAs(UnmanagedType.LPStr)] string diag, int* m, int* lb, float* a, int* ia, int* ja, float* x, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_scsrmm")]
            internal static extern void MklScsrmm([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* n, int* k, float* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, float* val, int* indx, int* pntrb, int* pntre, float* b, int* ldb, float* beta, float* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_scsrsm")]
            internal static extern void MklScsrsm([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* n, float* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, float* val, int* indx, int* pntrb, int* pntre, float* b, int* ldb, float* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_scscmm")]
            internal static extern void MklScscmm([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* n, int* k, float* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, float* val, int* indx, int* pntrb, int* pntre, float* b, int* ldb, float* beta, float* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_scscsm")]
            internal static extern void MklScscsm([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* n, float* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, float* val, int* indx, int* pntrb, int* pntre, float* b, int* ldb, float* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_scoomm")]
            internal static extern void MklScoomm([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* n, int* k, float* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, float* val, int* rowind, int* colind, int* nnz, float* b, int* ldb, float* beta, float* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_scoosm")]
            internal static extern void MklScoosm([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* n, float* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, float* val, int* rowind, int* colind, int* nnz, float* b, int* ldb, float* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sdiamm")]
            internal static extern void MklSdiamm([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* n, int* k, float* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, float* val, int* lval, int* idiag, int* ndiag, float* b, int* ldb, float* beta, float* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sdiasm")]
            internal static extern void MklSdiasm([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* n, float* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, float* val, int* lval, int* idiag, int* ndiag, float* b, int* ldb, float* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sskysm")]
            internal static extern void MklSskysm([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* n, float* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, float* val, int* pntr, float* b, int* ldb, float* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sskymm")]
            internal static extern void MklSskymm([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* n, int* k, float* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, float* val, int* pntr, float* b, int* ldb, float* beta, float* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sbsrmm")]
            internal static extern void MklSbsrmm([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* n, int* k, int* lb, float* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, float* val, int* indx, int* pntrb, int* pntre, float* b, int* ldb, float* beta, float* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sbsrsm")]
            internal static extern void MklSbsrsm([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* n, int* lb, float* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, float* val, int* indx, int* pntrb, int* pntre, float* b, int* ldb, float* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dcsrmv")]
            internal static extern void MklDcsrmv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* k, double* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, double* val, int* indx, int* pntrb, int* pntre, double* x, double* beta, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dcsrsv")]
            internal static extern void MklDcsrsv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, double* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, double* val, int* indx, int* pntrb, int* pntre, double* x, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dcsrgemv")]
            internal static extern void MklDcsrgemv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, double* a, int* ia, int* ja, double* x, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_cspblas_dcsrgemv")]
            internal static extern void MklCspblasDcsrgemv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, double* a, int* ia, int* ja, double* x, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dcsrsymv")]
            internal static extern void MklDcsrsymv([MarshalAs(UnmanagedType.LPStr)] string uplo, int* m, double* a, int* ia, int* ja, double* x, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_cspblas_dcsrsymv")]
            internal static extern void MklCspblasDcsrsymv([MarshalAs(UnmanagedType.LPStr)] string uplo, int* m, double* a, int* ia, int* ja, double* x, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dcsrtrsv")]
            internal static extern void MklDcsrtrsv([MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string transa, [MarshalAs(UnmanagedType.LPStr)] string diag, int* m, double* a, int* ia, int* ja, double* x, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_cspblas_dcsrtrsv")]
            internal static extern void MklCspblasDcsrtrsv([MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string transa, [MarshalAs(UnmanagedType.LPStr)] string diag, int* m, double* a, int* ia, int* ja, double* x, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dcscmv")]
            internal static extern void MklDcscmv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* k, double* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, double* val, int* indx, int* pntrb, int* pntre, double* x, double* beta, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dcscsv")]
            internal static extern void MklDcscsv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, double* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, double* val, int* indx, int* pntrb, int* pntre, double* x, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dcoomv")]
            internal static extern void MklDcoomv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* k, double* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, double* val, int* rowind, int* colind, int* nnz, double* x, double* beta, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dcoosv")]
            internal static extern void MklDcoosv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, double* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, double* val, int* rowind, int* colind, int* nnz, double* x, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dcoogemv")]
            internal static extern void MklDcoogemv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, double* val, int* rowind, int* colind, int* nnz, double* x, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_cspblas_dcoogemv")]
            internal static extern void MklCspblasDcoogemv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, double* val, int* rowind, int* colind, int* nnz, double* x, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dcoosymv")]
            internal static extern void MklDcoosymv([MarshalAs(UnmanagedType.LPStr)] string uplo, int* m, double* val, int* rowind, int* colind, int* nnz, double* x, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_cspblas_dcoosymv")]
            internal static extern void MklCspblasDcoosymv([MarshalAs(UnmanagedType.LPStr)] string uplo, int* m, double* val, int* rowind, int* colind, int* nnz, double* x, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dcootrsv")]
            internal static extern void MklDcootrsv([MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string transa, [MarshalAs(UnmanagedType.LPStr)] string diag, int* m, double* val, int* rowind, int* colind, int* nnz, double* x, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_cspblas_dcootrsv")]
            internal static extern void MklCspblasDcootrsv([MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string transa, [MarshalAs(UnmanagedType.LPStr)] string diag, int* m, double* val, int* rowind, int* colind, int* nnz, double* x, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_ddiamv")]
            internal static extern void MklDdiamv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* k, double* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, double* val, int* lval, int* idiag, int* ndiag, double* x, double* beta, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_ddiasv")]
            internal static extern void MklDdiasv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, double* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, double* val, int* lval, int* idiag, int* ndiag, double* x, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_ddiagemv")]
            internal static extern void MklDdiagemv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, double* val, int* lval, int* idiag, int* ndiag, double* x, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_ddiasymv")]
            internal static extern void MklDdiasymv([MarshalAs(UnmanagedType.LPStr)] string uplo, int* m, double* val, int* lval, int* idiag, int* ndiag, double* x, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_ddiatrsv")]
            internal static extern void MklDdiatrsv([MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string transa, [MarshalAs(UnmanagedType.LPStr)] string diag, int* m, double* val, int* lval, int* idiag, int* ndiag, double* x, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dskymv")]
            internal static extern void MklDskymv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* k, double* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, double* val, int* pntr, double* x, double* beta, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dskysv")]
            internal static extern void MklDskysv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, double* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, double* val, int* pntr, double* x, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dbsrmv")]
            internal static extern void MklDbsrmv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* k, int* lb, double* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, double* val, int* indx, int* pntrb, int* pntre, double* x, double* beta, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dbsrsv")]
            internal static extern void MklDbsrsv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* lb, double* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, double* val, int* indx, int* pntrb, int* pntre, double* x, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dbsrgemv")]
            internal static extern void MklDbsrgemv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* lb, double* a, int* ia, int* ja, double* x, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_cspblas_dbsrgemv")]
            internal static extern void MklCspblasDbsrgemv([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* lb, double* a, int* ia, int* ja, double* x, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dbsrsymv")]
            internal static extern void MklDbsrsymv([MarshalAs(UnmanagedType.LPStr)] string uplo, int* m, int* lb, double* a, int* ia, int* ja, double* x, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_cspblas_dbsrsymv")]
            internal static extern void MklCspblasDbsrsymv([MarshalAs(UnmanagedType.LPStr)] string uplo, int* m, int* lb, double* a, int* ia, int* ja, double* x, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dbsrtrsv")]
            internal static extern void MklDbsrtrsv([MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string transa, [MarshalAs(UnmanagedType.LPStr)] string diag, int* m, int* lb, double* a, int* ia, int* ja, double* x, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_cspblas_dbsrtrsv")]
            internal static extern void MklCspblasDbsrtrsv([MarshalAs(UnmanagedType.LPStr)] string uplo, [MarshalAs(UnmanagedType.LPStr)] string transa, [MarshalAs(UnmanagedType.LPStr)] string diag, int* m, int* lb, double* a, int* ia, int* ja, double* x, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dcsrmm")]
            internal static extern void MklDcsrmm([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* n, int* k, double* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, double* val, int* indx, int* pntrb, int* pntre, double* b, int* ldb, double* beta, double* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dcsrsm")]
            internal static extern void MklDcsrsm([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* n, double* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, double* val, int* indx, int* pntrb, int* pntre, double* b, int* ldb, double* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dcscmm")]
            internal static extern void MklDcscmm([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* n, int* k, double* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, double* val, int* indx, int* pntrb, int* pntre, double* b, int* ldb, double* beta, double* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dcscsm")]
            internal static extern void MklDcscsm([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* n, double* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, double* val, int* indx, int* pntrb, int* pntre, double* b, int* ldb, double* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dcoomm")]
            internal static extern void MklDcoomm([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* n, int* k, double* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, double* val, int* rowind, int* colind, int* nnz, double* b, int* ldb, double* beta, double* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dcoosm")]
            internal static extern void MklDcoosm([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* n, double* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, double* val, int* rowind, int* colind, int* nnz, double* b, int* ldb, double* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_ddiamm")]
            internal static extern void MklDdiamm([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* n, int* k, double* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, double* val, int* lval, int* idiag, int* ndiag, double* b, int* ldb, double* beta, double* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_ddiasm")]
            internal static extern void MklDdiasm([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* n, double* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, double* val, int* lval, int* idiag, int* ndiag, double* b, int* ldb, double* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dskysm")]
            internal static extern void MklDskysm([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* n, double* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, double* val, int* pntr, double* b, int* ldb, double* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dskymm")]
            internal static extern void MklDskymm([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* n, int* k, double* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, double* val, int* pntr, double* b, int* ldb, double* beta, double* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dbsrmm")]
            internal static extern void MklDbsrmm([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* n, int* k, int* lb, double* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, double* val, int* indx, int* pntrb, int* pntre, double* b, int* ldb, double* beta, double* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dbsrsm")]
            internal static extern void MklDbsrsm([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* n, int* lb, double* alpha, [MarshalAs(UnmanagedType.LPStr)] string matdescra, double* val, int* indx, int* pntrb, int* pntre, double* b, int* ldb, double* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dcsrbsr")]
            internal static extern void MklDcsrbsr(int* job, int* m, int* mblk, int* ldAbsr, double* Acsr, int* AJ, int* AI, double* Absr, int* AJB, int* AIB, int* info);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dcsrcoo")]
            internal static extern void MklDcsrcoo(int* job, int* n, double* Acsr, int* AJR, int* AIR, int* nnz, double* Acoo, int* ir, int* jc, int* info);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_ddnscsr")]
            internal static extern void MklDdnscsr(int* job, int* m, int* n, double* Adns, int* lda, double* Acsr, int* AJ, int* AI, int* info);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dcsrcsc")]
            internal static extern void MklDcsrcsc(int* job, int* n, double* Acsr, int* AJ0, int* AI0, double* Acsc, int* AJ1, int* AI1, int* info);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dcsrdia")]
            internal static extern void MklDcsrdia(int* job, int* n, double* Acsr, int* AJ0, int* AI0, double* Adia, int* ndiag, int* distance, int* idiag, double* Acsr_rem, int* AJ0_rem, int* AI0_rem, int* info);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dcsrsky")]
            internal static extern void MklDcsrsky(int* job, int* n, double* Acsr, int* AJ0, int* AI0, double* Asky, int* pointers, int* info);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_scsrbsr")]
            internal static extern void MklScsrbsr(int* job, int* m, int* mblk, int* ldAbsr, float* Acsr, int* AJ, int* AI, float* Absr, int* AJB, int* AIB, int* info);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_scsrcoo")]
            internal static extern void MklScsrcoo(int* job, int* n, float* Acsr, int* AJR, int* AIR, int* nnz, float* Acoo, int* ir, int* jc, int* info);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sdnscsr")]
            internal static extern void MklSdnscsr(int* job, int* m, int* n, float* Adns, int* lda, float* Acsr, int* AJ, int* AI, int* info);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_scsrcsc")]
            internal static extern void MklScsrcsc(int* job, int* n, float* Acsr, int* AJ0, int* AI0, float* Acsc, int* AJ1, int* AI1, int* info);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_scsrdia")]
            internal static extern void MklScsrdia(int* job, int* n, float* Acsr, int* AJ0, int* AI0, float* Adia, int* ndiag, int* distance, int* idiag, float* Acsr_rem, int* AJ0_rem, int* AI0_rem, int* info);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_scsrsky")]
            internal static extern void MklScsrsky(int* job, int* n, float* Acsr, int* AJ0, int* AI0, float* Asky, int* pointers, int* info);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dcsrmultcsr")]
            internal static extern void MklDcsrmultcsr([MarshalAs(UnmanagedType.LPStr)] string transa, int* job, int* sort, int* m, int* n, int* k, double* a, int* ja, int* ia, double* b, int* jb, int* ib, double* c, int* jc, int* ic, int* nnzmax, int* ierr);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dcsrmultd")]
            internal static extern void MklDcsrmultd([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* n, int* k, double* a, int* ja, int* ia, double* b, int* jb, int* ib, double* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_dcsradd")]
            internal static extern void MklDcsradd([MarshalAs(UnmanagedType.LPStr)] string transa, int* job, int* sort, int* m, int* n, double* a, int* ja, int* ia, double* beta, double* b, int* jb, int* ib, double* c, int* jc, int* ic, int* nnzmax, int* ierr);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_scsrmultcsr")]
            internal static extern void MklScsrmultcsr([MarshalAs(UnmanagedType.LPStr)] string transa, int* job, int* sort, int* m, int* n, int* k, float* a, int* ja, int* ia, float* b, int* jb, int* ib, float* c, int* jc, int* ic, int* nnzmax, int* ierr);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_scsrmultd")]
            internal static extern void MklScsrmultd([MarshalAs(UnmanagedType.LPStr)] string transa, int* m, int* n, int* k, float* a, int* ja, int* ia, float* b, int* jb, int* ib, float* c, int* ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_scsradd")]
            internal static extern void MklScsradd([MarshalAs(UnmanagedType.LPStr)] string transa, int* job, int* sort, int* m, int* n, float* a, int* ja, int* ia, float* beta, float* b, int* jb, int* ib, float* c, int* jc, int* ic, int* nnzmax, int* ierr);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_set_spmspvd_hint")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseSetSpmspvdHint(global::System.IntPtr A, global::IntelMKL.LP64.SparseOperationT operation, global::IntelMKL.LP64.MatrixDescr.__Internal descr, int expectedCalls);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_s_spmspvd")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseSSpmspvd(global::IntelMKL.LP64.SparseOperationT op, global::IntelMKL.LP64.ReplaceOperation.__Internal replace_op, float alpha, global::System.IntPtr A, global::IntelMKL.LP64.MatrixDescr.__Internal descr, global::System.IntPtr x, float beta, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_d_spmspvd")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseDSpmspvd(global::IntelMKL.LP64.SparseOperationT op, global::IntelMKL.LP64.ReplaceOperation.__Internal replace_op, double alpha, global::System.IntPtr A, global::IntelMKL.LP64.MatrixDescr.__Internal descr, global::System.IntPtr x, double beta, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_s_create_vector")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseSCreateVector(global::System.IntPtr V, global::IntelMKL.LP64.SparseIndexBaseT indexing, int n, int nnz, int* indx, float* values);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_d_create_vector")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseDCreateVector(global::System.IntPtr V, global::IntelMKL.LP64.SparseIndexBaseT indexing, int n, int nnz, int* indx, double* values);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_s_export_vector")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseSExportVector(global::System.IntPtr source, global::IntelMKL.LP64.SparseIndexBaseT* indexing, int* n, int* mmz, int** indx, float** values);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_d_export_vector")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseDExportVector(global::System.IntPtr source, global::IntelMKL.LP64.SparseIndexBaseT* indexing, int* n, int* mmz, int** indx, double** values);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_destroy_vector")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseDestroyVector(global::System.IntPtr A);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_s_create_coo")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseSCreateCoo(global::System.IntPtr A, global::IntelMKL.LP64.SparseIndexBaseT indexing, int rows, int cols, int nnz, int* row_indx, int* col_indx, float* values);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_d_create_coo")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseDCreateCoo(global::System.IntPtr A, global::IntelMKL.LP64.SparseIndexBaseT indexing, int rows, int cols, int nnz, int* row_indx, int* col_indx, double* values);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_s_create_csr")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseSCreateCsr(global::System.IntPtr A, global::IntelMKL.LP64.SparseIndexBaseT indexing, int rows, int cols, int* rows_start, int* rows_end, int* col_indx, float* values);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_d_create_csr")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseDCreateCsr(global::System.IntPtr A, global::IntelMKL.LP64.SparseIndexBaseT indexing, int rows, int cols, int* rows_start, int* rows_end, int* col_indx, double* values);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_s_create_csc")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseSCreateCsc(global::System.IntPtr A, global::IntelMKL.LP64.SparseIndexBaseT indexing, int rows, int cols, int* rows_start, int* rows_end, int* col_indx, float* values);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_d_create_csc")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseDCreateCsc(global::System.IntPtr A, global::IntelMKL.LP64.SparseIndexBaseT indexing, int rows, int cols, int* rows_start, int* rows_end, int* col_indx, double* values);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_s_create_bsr")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseSCreateBsr(global::System.IntPtr A, global::IntelMKL.LP64.SparseIndexBaseT indexing, global::IntelMKL.LP64.SparseLayoutT block_layout, int rows, int cols, int block_size, int* rows_start, int* rows_end, int* col_indx, float* values);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_d_create_bsr")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseDCreateBsr(global::System.IntPtr A, global::IntelMKL.LP64.SparseIndexBaseT indexing, global::IntelMKL.LP64.SparseLayoutT block_layout, int rows, int cols, int block_size, int* rows_start, int* rows_end, int* col_indx, double* values);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_copy")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseCopy(global::System.IntPtr source, global::IntelMKL.LP64.MatrixDescr.__Internal descr, global::System.IntPtr dest);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_destroy")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseDestroy(global::System.IntPtr A);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_get_error_info")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseGetErrorInfo(global::System.IntPtr A, int* info);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_convert_csr")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseConvertCsr(global::System.IntPtr source, global::IntelMKL.LP64.SparseOperationT operation, global::System.IntPtr dest);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_convert_bsr")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseConvertBsr(global::System.IntPtr source, int block_size, global::IntelMKL.LP64.SparseLayoutT block_layout, global::IntelMKL.LP64.SparseOperationT operation, global::System.IntPtr dest);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_s_export_bsr")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseSExportBsr(global::System.IntPtr source, global::IntelMKL.LP64.SparseIndexBaseT* indexing, global::IntelMKL.LP64.SparseLayoutT* block_layout, int* rows, int* cols, int* block_size, int** rows_start, int** rows_end, int** col_indx, float** values);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_d_export_bsr")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseDExportBsr(global::System.IntPtr source, global::IntelMKL.LP64.SparseIndexBaseT* indexing, global::IntelMKL.LP64.SparseLayoutT* block_layout, int* rows, int* cols, int* block_size, int** rows_start, int** rows_end, int** col_indx, double** values);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_s_export_csr")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseSExportCsr(global::System.IntPtr source, global::IntelMKL.LP64.SparseIndexBaseT* indexing, int* rows, int* cols, int** rows_start, int** rows_end, int** col_indx, float** values);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_d_export_csr")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseDExportCsr(global::System.IntPtr source, global::IntelMKL.LP64.SparseIndexBaseT* indexing, int* rows, int* cols, int** rows_start, int** rows_end, int** col_indx, double** values);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_s_set_value")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseSSetValue(global::System.IntPtr A, int row, int col, float value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_d_set_value")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseDSetValue(global::System.IntPtr A, int row, int col, double value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_set_verbose_mode")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseSetVerboseMode(global::IntelMKL.LP64.VerboseModeT verbose);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_set_mv_hint")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseSetMvHint(global::System.IntPtr A, global::IntelMKL.LP64.SparseOperationT operation, global::IntelMKL.LP64.MatrixDescr.__Internal descr, int expected_calls);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_set_mm_hint")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseSetMmHint(global::System.IntPtr A, global::IntelMKL.LP64.SparseOperationT operation, global::IntelMKL.LP64.MatrixDescr.__Internal descr, global::IntelMKL.LP64.SparseLayoutT layout, int dense_matrix_size, int expected_calls);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_set_sv_hint")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseSetSvHint(global::System.IntPtr A, global::IntelMKL.LP64.SparseOperationT operation, global::IntelMKL.LP64.MatrixDescr.__Internal descr, int expected_calls);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_set_sm_hint")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseSetSmHint(global::System.IntPtr A, global::IntelMKL.LP64.SparseOperationT operation, global::IntelMKL.LP64.MatrixDescr.__Internal descr, global::IntelMKL.LP64.SparseLayoutT layout, int dense_matrix_size, int expected_calls);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_set_memory_hint")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseSetMemoryHint(global::System.IntPtr A, global::IntelMKL.LP64.SparseMemoryUsageT policy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_optimize")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseOptimize(global::System.IntPtr A);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_s_mv")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseSMv(global::IntelMKL.LP64.SparseOperationT operation, float alpha, global::System.IntPtr A, global::IntelMKL.LP64.MatrixDescr.__Internal descr, float* x, float beta, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_d_mv")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseDMv(global::IntelMKL.LP64.SparseOperationT operation, double alpha, global::System.IntPtr A, global::IntelMKL.LP64.MatrixDescr.__Internal descr, double* x, double beta, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_s_trsv")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseSTrsv(global::IntelMKL.LP64.SparseOperationT operation, float alpha, global::System.IntPtr A, global::IntelMKL.LP64.MatrixDescr.__Internal descr, float* x, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_d_trsv")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseDTrsv(global::IntelMKL.LP64.SparseOperationT operation, double alpha, global::System.IntPtr A, global::IntelMKL.LP64.MatrixDescr.__Internal descr, double* x, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_s_mm")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseSMm(global::IntelMKL.LP64.SparseOperationT operation, float alpha, global::System.IntPtr A, global::IntelMKL.LP64.MatrixDescr.__Internal descr, global::IntelMKL.LP64.SparseLayoutT layout, float* x, int columns, int ldx, float beta, float* y, int ldy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_d_mm")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseDMm(global::IntelMKL.LP64.SparseOperationT operation, double alpha, global::System.IntPtr A, global::IntelMKL.LP64.MatrixDescr.__Internal descr, global::IntelMKL.LP64.SparseLayoutT layout, double* x, int columns, int ldx, double beta, double* y, int ldy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_s_trsm")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseSTrsm(global::IntelMKL.LP64.SparseOperationT operation, float alpha, global::System.IntPtr A, global::IntelMKL.LP64.MatrixDescr.__Internal descr, global::IntelMKL.LP64.SparseLayoutT layout, float* x, int columns, int ldx, float* y, int ldy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_d_trsm")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseDTrsm(global::IntelMKL.LP64.SparseOperationT operation, double alpha, global::System.IntPtr A, global::IntelMKL.LP64.MatrixDescr.__Internal descr, global::IntelMKL.LP64.SparseLayoutT layout, double* x, int columns, int ldx, double* y, int ldy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_s_add")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseSAdd(global::IntelMKL.LP64.SparseOperationT operation, global::System.IntPtr A, float alpha, global::System.IntPtr B, global::System.IntPtr C);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_d_add")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseDAdd(global::IntelMKL.LP64.SparseOperationT operation, global::System.IntPtr A, double alpha, global::System.IntPtr B, global::System.IntPtr C);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_spmm")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseSpmm(global::IntelMKL.LP64.SparseOperationT operation, global::System.IntPtr A, global::System.IntPtr B, global::System.IntPtr C);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_syrk")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseSyrk(global::IntelMKL.LP64.SparseOperationT operation, global::System.IntPtr A, global::System.IntPtr C);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_order")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseOrder(global::System.IntPtr A);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_s_spmmd")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseSSpmmd(global::IntelMKL.LP64.SparseOperationT operation, global::System.IntPtr A, global::System.IntPtr B, global::IntelMKL.LP64.SparseLayoutT layout, float* C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_d_spmmd")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseDSpmmd(global::IntelMKL.LP64.SparseOperationT operation, global::System.IntPtr A, global::System.IntPtr B, global::IntelMKL.LP64.SparseLayoutT layout, double* C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_set_symgs_hint")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseSetSymgsHint(global::System.IntPtr A, global::IntelMKL.LP64.SparseOperationT operation, global::IntelMKL.LP64.MatrixDescr.__Internal descr, int expected_calls);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_d_symgs_mv")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseDSymgsMv(global::IntelMKL.LP64.SparseOperationT op, global::System.IntPtr A, global::IntelMKL.LP64.MatrixDescr.__Internal descr, double alpha, double* b, double* x, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_d_symgs")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseDSymgs(global::IntelMKL.LP64.SparseOperationT op, global::System.IntPtr A, global::IntelMKL.LP64.MatrixDescr.__Internal descr, double alpha, double* b, double* x);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_set_dotmv_hint")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseSetDotmvHint(global::System.IntPtr A, global::IntelMKL.LP64.SparseOperationT operation, global::IntelMKL.LP64.MatrixDescr.__Internal descr, int expectedCalls);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_d_dotmv")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseDDotmv(global::IntelMKL.LP64.SparseOperationT transA, double alpha, global::System.IntPtr A, global::IntelMKL.LP64.MatrixDescr.__Internal descr, double* x, double beta, double* y, double* d);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_s_symgs_mv")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseSSymgsMv(global::IntelMKL.LP64.SparseOperationT op, global::System.IntPtr A, global::IntelMKL.LP64.MatrixDescr.__Internal descr, float alpha, float* b, float* x, float* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_s_symgs")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseSSymgs(global::IntelMKL.LP64.SparseOperationT op, global::System.IntPtr A, global::IntelMKL.LP64.MatrixDescr.__Internal descr, float alpha, float* b, float* x);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_s_dotmv")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseSDotmv(global::IntelMKL.LP64.SparseOperationT transA, float alpha, global::System.IntPtr A, global::IntelMKL.LP64.MatrixDescr.__Internal descr, float* x, float beta, float* y, float* d);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_s_syrkd")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseSSyrkd(global::IntelMKL.LP64.SparseOperationT operation, global::System.IntPtr A, float alpha, float beta, float* C, global::IntelMKL.LP64.SparseLayoutT layout, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("mkl_rt", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="mkl_sparse_d_syrkd")]
            internal static extern global::IntelMKL.LP64.SparseStatusT MklSparseDSyrkd(global::IntelMKL.LP64.SparseOperationT operation, global::System.IntPtr A, double alpha, double beta, double* C, global::IntelMKL.LP64.SparseLayoutT layout, int ldc);
        }

        public static void MklScsrmv(string transa, ref int m, ref int k, ref float alpha, string matdescra, ref float val, ref int indx, ref int pntrb, ref int pntre, ref float x, ref float beta, ref float y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &k)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &alpha)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (float* __refParamPtr5 = &val)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &indx)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &pntrb)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &pntre)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (float* __refParamPtr9 = &x)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (float* __refParamPtr10 = &beta)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (float* __refParamPtr11 = &y)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    __Internal.MklScsrmv(transa, __arg1, __arg2, __arg3, matdescra, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklScsrsv(string transa, ref int m, ref float alpha, string matdescra, ref float val, ref int indx, ref int pntrb, ref int pntre, ref float x, ref float y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &alpha)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr4 = &val)
                    {
                        var __arg4 = __refParamPtr4;
                        fixed (int* __refParamPtr5 = &indx)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &pntrb)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &pntre)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (float* __refParamPtr8 = &x)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (float* __refParamPtr9 = &y)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            __Internal.MklScsrsv(transa, __arg1, __arg2, matdescra, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklScsrgemv(string transa, ref int m, ref float a, ref int ia, ref int ja, ref float x, ref float y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &a)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &ia)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &ja)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (float* __refParamPtr5 = &x)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (float* __refParamPtr6 = &y)
                                {
                                    var __arg6 = __refParamPtr6;
                                    __Internal.MklScsrgemv(transa, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklCspblasScsrgemv(string transa, ref int m, ref float a, ref int ia, ref int ja, ref float x, ref float y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &a)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &ia)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &ja)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (float* __refParamPtr5 = &x)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (float* __refParamPtr6 = &y)
                                {
                                    var __arg6 = __refParamPtr6;
                                    __Internal.MklCspblasScsrgemv(transa, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklScsrsymv(string uplo, ref int m, ref float a, ref int ia, ref int ja, ref float x, ref float y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &a)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &ia)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &ja)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (float* __refParamPtr5 = &x)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (float* __refParamPtr6 = &y)
                                {
                                    var __arg6 = __refParamPtr6;
                                    __Internal.MklScsrsymv(uplo, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklCspblasScsrsymv(string uplo, ref int m, ref float a, ref int ia, ref int ja, ref float x, ref float y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &a)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &ia)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &ja)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (float* __refParamPtr5 = &x)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (float* __refParamPtr6 = &y)
                                {
                                    var __arg6 = __refParamPtr6;
                                    __Internal.MklCspblasScsrsymv(uplo, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklScsrtrsv(string uplo, string transa, string diag, ref int m, ref float a, ref int ia, ref int ja, ref float x, ref float y)
        {
            fixed (int* __refParamPtr3 = &m)
            {
                var __arg3 = __refParamPtr3;
                fixed (float* __refParamPtr4 = &a)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (int* __refParamPtr5 = &ia)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (int* __refParamPtr6 = &ja)
                        {
                            var __arg6 = __refParamPtr6;
                            fixed (float* __refParamPtr7 = &x)
                            {
                                var __arg7 = __refParamPtr7;
                                fixed (float* __refParamPtr8 = &y)
                                {
                                    var __arg8 = __refParamPtr8;
                                    __Internal.MklScsrtrsv(uplo, transa, diag, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklCspblasScsrtrsv(string uplo, string transa, string diag, ref int m, ref float a, ref int ia, ref int ja, ref float x, ref float y)
        {
            fixed (int* __refParamPtr3 = &m)
            {
                var __arg3 = __refParamPtr3;
                fixed (float* __refParamPtr4 = &a)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (int* __refParamPtr5 = &ia)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (int* __refParamPtr6 = &ja)
                        {
                            var __arg6 = __refParamPtr6;
                            fixed (float* __refParamPtr7 = &x)
                            {
                                var __arg7 = __refParamPtr7;
                                fixed (float* __refParamPtr8 = &y)
                                {
                                    var __arg8 = __refParamPtr8;
                                    __Internal.MklCspblasScsrtrsv(uplo, transa, diag, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklScscmv(string transa, ref int m, ref int k, ref float alpha, string matdescra, ref float val, ref int indx, ref int pntrb, ref int pntre, ref float x, ref float beta, ref float y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &k)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &alpha)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (float* __refParamPtr5 = &val)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &indx)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &pntrb)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &pntre)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (float* __refParamPtr9 = &x)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (float* __refParamPtr10 = &beta)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (float* __refParamPtr11 = &y)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    __Internal.MklScscmv(transa, __arg1, __arg2, __arg3, matdescra, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklScscsv(string transa, ref int m, ref float alpha, string matdescra, ref float val, ref int indx, ref int pntrb, ref int pntre, ref float x, ref float y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &alpha)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr4 = &val)
                    {
                        var __arg4 = __refParamPtr4;
                        fixed (int* __refParamPtr5 = &indx)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &pntrb)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &pntre)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (float* __refParamPtr8 = &x)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (float* __refParamPtr9 = &y)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            __Internal.MklScscsv(transa, __arg1, __arg2, matdescra, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklScoomv(string transa, ref int m, ref int k, ref float alpha, string matdescra, ref float val, ref int rowind, ref int colind, ref int nnz, ref float x, ref float beta, ref float y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &k)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &alpha)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (float* __refParamPtr5 = &val)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &rowind)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &colind)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &nnz)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (float* __refParamPtr9 = &x)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (float* __refParamPtr10 = &beta)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (float* __refParamPtr11 = &y)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    __Internal.MklScoomv(transa, __arg1, __arg2, __arg3, matdescra, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklScoosv(string transa, ref int m, ref float alpha, string matdescra, ref float val, ref int rowind, ref int colind, ref int nnz, ref float x, ref float y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &alpha)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr4 = &val)
                    {
                        var __arg4 = __refParamPtr4;
                        fixed (int* __refParamPtr5 = &rowind)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &colind)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &nnz)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (float* __refParamPtr8 = &x)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (float* __refParamPtr9 = &y)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            __Internal.MklScoosv(transa, __arg1, __arg2, matdescra, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklScoogemv(string transa, ref int m, ref float val, ref int rowind, ref int colind, ref int nnz, ref float x, ref float y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &val)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &rowind)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &colind)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (int* __refParamPtr5 = &nnz)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (float* __refParamPtr6 = &x)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (float* __refParamPtr7 = &y)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        __Internal.MklScoogemv(transa, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklCspblasScoogemv(string transa, ref int m, ref float val, ref int rowind, ref int colind, ref int nnz, ref float x, ref float y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &val)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &rowind)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &colind)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (int* __refParamPtr5 = &nnz)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (float* __refParamPtr6 = &x)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (float* __refParamPtr7 = &y)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        __Internal.MklCspblasScoogemv(transa, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklScoosymv(string uplo, ref int m, ref float val, ref int rowind, ref int colind, ref int nnz, ref float x, ref float y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &val)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &rowind)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &colind)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (int* __refParamPtr5 = &nnz)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (float* __refParamPtr6 = &x)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (float* __refParamPtr7 = &y)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        __Internal.MklScoosymv(uplo, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklCspblasScoosymv(string uplo, ref int m, ref float val, ref int rowind, ref int colind, ref int nnz, ref float x, ref float y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &val)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &rowind)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &colind)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (int* __refParamPtr5 = &nnz)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (float* __refParamPtr6 = &x)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (float* __refParamPtr7 = &y)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        __Internal.MklCspblasScoosymv(uplo, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklScootrsv(string uplo, string transa, string diag, ref int m, ref float val, ref int rowind, ref int colind, ref int nnz, ref float x, ref float y)
        {
            fixed (int* __refParamPtr3 = &m)
            {
                var __arg3 = __refParamPtr3;
                fixed (float* __refParamPtr4 = &val)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (int* __refParamPtr5 = &rowind)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (int* __refParamPtr6 = &colind)
                        {
                            var __arg6 = __refParamPtr6;
                            fixed (int* __refParamPtr7 = &nnz)
                            {
                                var __arg7 = __refParamPtr7;
                                fixed (float* __refParamPtr8 = &x)
                                {
                                    var __arg8 = __refParamPtr8;
                                    fixed (float* __refParamPtr9 = &y)
                                    {
                                        var __arg9 = __refParamPtr9;
                                        __Internal.MklScootrsv(uplo, transa, diag, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklCspblasScootrsv(string uplo, string transa, string diag, ref int m, ref float val, ref int rowind, ref int colind, ref int nnz, ref float x, ref float y)
        {
            fixed (int* __refParamPtr3 = &m)
            {
                var __arg3 = __refParamPtr3;
                fixed (float* __refParamPtr4 = &val)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (int* __refParamPtr5 = &rowind)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (int* __refParamPtr6 = &colind)
                        {
                            var __arg6 = __refParamPtr6;
                            fixed (int* __refParamPtr7 = &nnz)
                            {
                                var __arg7 = __refParamPtr7;
                                fixed (float* __refParamPtr8 = &x)
                                {
                                    var __arg8 = __refParamPtr8;
                                    fixed (float* __refParamPtr9 = &y)
                                    {
                                        var __arg9 = __refParamPtr9;
                                        __Internal.MklCspblasScootrsv(uplo, transa, diag, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklSdiamv(string transa, ref int m, ref int k, ref float alpha, string matdescra, ref float val, ref int lval, ref int idiag, ref int ndiag, ref float x, ref float beta, ref float y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &k)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &alpha)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (float* __refParamPtr5 = &val)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &lval)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &idiag)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &ndiag)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (float* __refParamPtr9 = &x)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (float* __refParamPtr10 = &beta)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (float* __refParamPtr11 = &y)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    __Internal.MklSdiamv(transa, __arg1, __arg2, __arg3, matdescra, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklSdiasv(string transa, ref int m, ref float alpha, string matdescra, ref float val, ref int lval, ref int idiag, ref int ndiag, ref float x, ref float y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &alpha)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr4 = &val)
                    {
                        var __arg4 = __refParamPtr4;
                        fixed (int* __refParamPtr5 = &lval)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &idiag)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &ndiag)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (float* __refParamPtr8 = &x)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (float* __refParamPtr9 = &y)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            __Internal.MklSdiasv(transa, __arg1, __arg2, matdescra, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklSdiagemv(string transa, ref int m, ref float val, ref int lval, ref int idiag, ref int ndiag, ref float x, ref float y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &val)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &lval)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &idiag)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (int* __refParamPtr5 = &ndiag)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (float* __refParamPtr6 = &x)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (float* __refParamPtr7 = &y)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        __Internal.MklSdiagemv(transa, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklSdiasymv(string uplo, ref int m, ref float val, ref int lval, ref int idiag, ref int ndiag, ref float x, ref float y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &val)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &lval)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &idiag)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (int* __refParamPtr5 = &ndiag)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (float* __refParamPtr6 = &x)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (float* __refParamPtr7 = &y)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        __Internal.MklSdiasymv(uplo, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklSdiatrsv(string uplo, string transa, string diag, ref int m, ref float val, ref int lval, ref int idiag, ref int ndiag, ref float x, ref float y)
        {
            fixed (int* __refParamPtr3 = &m)
            {
                var __arg3 = __refParamPtr3;
                fixed (float* __refParamPtr4 = &val)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (int* __refParamPtr5 = &lval)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (int* __refParamPtr6 = &idiag)
                        {
                            var __arg6 = __refParamPtr6;
                            fixed (int* __refParamPtr7 = &ndiag)
                            {
                                var __arg7 = __refParamPtr7;
                                fixed (float* __refParamPtr8 = &x)
                                {
                                    var __arg8 = __refParamPtr8;
                                    fixed (float* __refParamPtr9 = &y)
                                    {
                                        var __arg9 = __refParamPtr9;
                                        __Internal.MklSdiatrsv(uplo, transa, diag, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklSskymv(string transa, ref int m, ref int k, ref float alpha, string matdescra, ref float val, ref int pntr, ref float x, ref float beta, ref float y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &k)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &alpha)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (float* __refParamPtr5 = &val)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &pntr)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (float* __refParamPtr7 = &x)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (float* __refParamPtr8 = &beta)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (float* __refParamPtr9 = &y)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            __Internal.MklSskymv(transa, __arg1, __arg2, __arg3, matdescra, __arg5, __arg6, __arg7, __arg8, __arg9);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklSskysv(string transa, ref int m, ref float alpha, string matdescra, ref float val, ref int pntr, ref float x, ref float y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &alpha)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr4 = &val)
                    {
                        var __arg4 = __refParamPtr4;
                        fixed (int* __refParamPtr5 = &pntr)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (float* __refParamPtr6 = &x)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (float* __refParamPtr7 = &y)
                                {
                                    var __arg7 = __refParamPtr7;
                                    __Internal.MklSskysv(transa, __arg1, __arg2, matdescra, __arg4, __arg5, __arg6, __arg7);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklSbsrmv(string transa, ref int m, ref int k, ref int lb, ref float alpha, string matdescra, ref float val, ref int indx, ref int pntrb, ref int pntre, ref float x, ref float beta, ref float y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &k)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &lb)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (float* __refParamPtr4 = &alpha)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (float* __refParamPtr6 = &val)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &indx)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &pntrb)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (int* __refParamPtr9 = &pntre)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (float* __refParamPtr10 = &x)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (float* __refParamPtr11 = &beta)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    fixed (float* __refParamPtr12 = &y)
                                                    {
                                                        var __arg12 = __refParamPtr12;
                                                        __Internal.MklSbsrmv(transa, __arg1, __arg2, __arg3, __arg4, matdescra, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklSbsrsv(string transa, ref int m, ref int lb, ref float alpha, string matdescra, ref float val, ref int indx, ref int pntrb, ref int pntre, ref float x, ref float y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &lb)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &alpha)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (float* __refParamPtr5 = &val)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &indx)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &pntrb)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &pntre)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (float* __refParamPtr9 = &x)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (float* __refParamPtr10 = &y)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                __Internal.MklSbsrsv(transa, __arg1, __arg2, __arg3, matdescra, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklSbsrgemv(string transa, ref int m, ref int lb, ref float a, ref int ia, ref int ja, ref float x, ref float y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &lb)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &a)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &ia)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (int* __refParamPtr5 = &ja)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (float* __refParamPtr6 = &x)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (float* __refParamPtr7 = &y)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        __Internal.MklSbsrgemv(transa, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklCspblasSbsrgemv(string transa, ref int m, ref int lb, ref float a, ref int ia, ref int ja, ref float x, ref float y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &lb)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &a)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &ia)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (int* __refParamPtr5 = &ja)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (float* __refParamPtr6 = &x)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (float* __refParamPtr7 = &y)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        __Internal.MklCspblasSbsrgemv(transa, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklSbsrsymv(string uplo, ref int m, ref int lb, ref float a, ref int ia, ref int ja, ref float x, ref float y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &lb)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &a)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &ia)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (int* __refParamPtr5 = &ja)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (float* __refParamPtr6 = &x)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (float* __refParamPtr7 = &y)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        __Internal.MklSbsrsymv(uplo, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklCspblasSbsrsymv(string uplo, ref int m, ref int lb, ref float a, ref int ia, ref int ja, ref float x, ref float y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &lb)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &a)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &ia)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (int* __refParamPtr5 = &ja)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (float* __refParamPtr6 = &x)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (float* __refParamPtr7 = &y)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        __Internal.MklCspblasSbsrsymv(uplo, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklSbsrtrsv(string uplo, string transa, string diag, ref int m, ref int lb, ref float a, ref int ia, ref int ja, ref float x, ref float y)
        {
            fixed (int* __refParamPtr3 = &m)
            {
                var __arg3 = __refParamPtr3;
                fixed (int* __refParamPtr4 = &lb)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (float* __refParamPtr5 = &a)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (int* __refParamPtr6 = &ia)
                        {
                            var __arg6 = __refParamPtr6;
                            fixed (int* __refParamPtr7 = &ja)
                            {
                                var __arg7 = __refParamPtr7;
                                fixed (float* __refParamPtr8 = &x)
                                {
                                    var __arg8 = __refParamPtr8;
                                    fixed (float* __refParamPtr9 = &y)
                                    {
                                        var __arg9 = __refParamPtr9;
                                        __Internal.MklSbsrtrsv(uplo, transa, diag, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklCspblasSbsrtrsv(string uplo, string transa, string diag, ref int m, ref int lb, ref float a, ref int ia, ref int ja, ref float x, ref float y)
        {
            fixed (int* __refParamPtr3 = &m)
            {
                var __arg3 = __refParamPtr3;
                fixed (int* __refParamPtr4 = &lb)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (float* __refParamPtr5 = &a)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (int* __refParamPtr6 = &ia)
                        {
                            var __arg6 = __refParamPtr6;
                            fixed (int* __refParamPtr7 = &ja)
                            {
                                var __arg7 = __refParamPtr7;
                                fixed (float* __refParamPtr8 = &x)
                                {
                                    var __arg8 = __refParamPtr8;
                                    fixed (float* __refParamPtr9 = &y)
                                    {
                                        var __arg9 = __refParamPtr9;
                                        __Internal.MklCspblasSbsrtrsv(uplo, transa, diag, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklScsrmm(string transa, ref int m, ref int n, ref int k, ref float alpha, string matdescra, ref float val, ref int indx, ref int pntrb, ref int pntre, ref float b, ref int ldb, ref float beta, ref float c, ref int ldc)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &n)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &k)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (float* __refParamPtr4 = &alpha)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (float* __refParamPtr6 = &val)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &indx)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &pntrb)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (int* __refParamPtr9 = &pntre)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (float* __refParamPtr10 = &b)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (int* __refParamPtr11 = &ldb)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    fixed (float* __refParamPtr12 = &beta)
                                                    {
                                                        var __arg12 = __refParamPtr12;
                                                        fixed (float* __refParamPtr13 = &c)
                                                        {
                                                            var __arg13 = __refParamPtr13;
                                                            fixed (int* __refParamPtr14 = &ldc)
                                                            {
                                                                var __arg14 = __refParamPtr14;
                                                                __Internal.MklScsrmm(transa, __arg1, __arg2, __arg3, __arg4, matdescra, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12, __arg13, __arg14);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklScsrsm(string transa, ref int m, ref int n, ref float alpha, string matdescra, ref float val, ref int indx, ref int pntrb, ref int pntre, ref float b, ref int ldb, ref float c, ref int ldc)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &n)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &alpha)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (float* __refParamPtr5 = &val)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &indx)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &pntrb)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &pntre)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (float* __refParamPtr9 = &b)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (int* __refParamPtr10 = &ldb)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (float* __refParamPtr11 = &c)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    fixed (int* __refParamPtr12 = &ldc)
                                                    {
                                                        var __arg12 = __refParamPtr12;
                                                        __Internal.MklScsrsm(transa, __arg1, __arg2, __arg3, matdescra, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklScscmm(string transa, ref int m, ref int n, ref int k, ref float alpha, string matdescra, ref float val, ref int indx, ref int pntrb, ref int pntre, ref float b, ref int ldb, ref float beta, ref float c, ref int ldc)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &n)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &k)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (float* __refParamPtr4 = &alpha)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (float* __refParamPtr6 = &val)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &indx)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &pntrb)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (int* __refParamPtr9 = &pntre)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (float* __refParamPtr10 = &b)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (int* __refParamPtr11 = &ldb)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    fixed (float* __refParamPtr12 = &beta)
                                                    {
                                                        var __arg12 = __refParamPtr12;
                                                        fixed (float* __refParamPtr13 = &c)
                                                        {
                                                            var __arg13 = __refParamPtr13;
                                                            fixed (int* __refParamPtr14 = &ldc)
                                                            {
                                                                var __arg14 = __refParamPtr14;
                                                                __Internal.MklScscmm(transa, __arg1, __arg2, __arg3, __arg4, matdescra, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12, __arg13, __arg14);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklScscsm(string transa, ref int m, ref int n, ref float alpha, string matdescra, ref float val, ref int indx, ref int pntrb, ref int pntre, ref float b, ref int ldb, ref float c, ref int ldc)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &n)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &alpha)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (float* __refParamPtr5 = &val)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &indx)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &pntrb)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &pntre)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (float* __refParamPtr9 = &b)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (int* __refParamPtr10 = &ldb)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (float* __refParamPtr11 = &c)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    fixed (int* __refParamPtr12 = &ldc)
                                                    {
                                                        var __arg12 = __refParamPtr12;
                                                        __Internal.MklScscsm(transa, __arg1, __arg2, __arg3, matdescra, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklScoomm(string transa, ref int m, ref int n, ref int k, ref float alpha, string matdescra, ref float val, ref int rowind, ref int colind, ref int nnz, ref float b, ref int ldb, ref float beta, ref float c, ref int ldc)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &n)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &k)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (float* __refParamPtr4 = &alpha)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (float* __refParamPtr6 = &val)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &rowind)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &colind)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (int* __refParamPtr9 = &nnz)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (float* __refParamPtr10 = &b)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (int* __refParamPtr11 = &ldb)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    fixed (float* __refParamPtr12 = &beta)
                                                    {
                                                        var __arg12 = __refParamPtr12;
                                                        fixed (float* __refParamPtr13 = &c)
                                                        {
                                                            var __arg13 = __refParamPtr13;
                                                            fixed (int* __refParamPtr14 = &ldc)
                                                            {
                                                                var __arg14 = __refParamPtr14;
                                                                __Internal.MklScoomm(transa, __arg1, __arg2, __arg3, __arg4, matdescra, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12, __arg13, __arg14);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklScoosm(string transa, ref int m, ref int n, ref float alpha, string matdescra, ref float val, ref int rowind, ref int colind, ref int nnz, ref float b, ref int ldb, ref float c, ref int ldc)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &n)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &alpha)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (float* __refParamPtr5 = &val)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &rowind)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &colind)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &nnz)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (float* __refParamPtr9 = &b)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (int* __refParamPtr10 = &ldb)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (float* __refParamPtr11 = &c)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    fixed (int* __refParamPtr12 = &ldc)
                                                    {
                                                        var __arg12 = __refParamPtr12;
                                                        __Internal.MklScoosm(transa, __arg1, __arg2, __arg3, matdescra, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklSdiamm(string transa, ref int m, ref int n, ref int k, ref float alpha, string matdescra, ref float val, ref int lval, ref int idiag, ref int ndiag, ref float b, ref int ldb, ref float beta, ref float c, ref int ldc)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &n)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &k)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (float* __refParamPtr4 = &alpha)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (float* __refParamPtr6 = &val)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &lval)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &idiag)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (int* __refParamPtr9 = &ndiag)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (float* __refParamPtr10 = &b)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (int* __refParamPtr11 = &ldb)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    fixed (float* __refParamPtr12 = &beta)
                                                    {
                                                        var __arg12 = __refParamPtr12;
                                                        fixed (float* __refParamPtr13 = &c)
                                                        {
                                                            var __arg13 = __refParamPtr13;
                                                            fixed (int* __refParamPtr14 = &ldc)
                                                            {
                                                                var __arg14 = __refParamPtr14;
                                                                __Internal.MklSdiamm(transa, __arg1, __arg2, __arg3, __arg4, matdescra, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12, __arg13, __arg14);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklSdiasm(string transa, ref int m, ref int n, ref float alpha, string matdescra, ref float val, ref int lval, ref int idiag, ref int ndiag, ref float b, ref int ldb, ref float c, ref int ldc)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &n)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &alpha)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (float* __refParamPtr5 = &val)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &lval)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &idiag)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &ndiag)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (float* __refParamPtr9 = &b)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (int* __refParamPtr10 = &ldb)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (float* __refParamPtr11 = &c)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    fixed (int* __refParamPtr12 = &ldc)
                                                    {
                                                        var __arg12 = __refParamPtr12;
                                                        __Internal.MklSdiasm(transa, __arg1, __arg2, __arg3, matdescra, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklSskysm(string transa, ref int m, ref int n, ref float alpha, string matdescra, ref float val, ref int pntr, ref float b, ref int ldb, ref float c, ref int ldc)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &n)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (float* __refParamPtr3 = &alpha)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (float* __refParamPtr5 = &val)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &pntr)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (float* __refParamPtr7 = &b)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &ldb)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (float* __refParamPtr9 = &c)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (int* __refParamPtr10 = &ldc)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                __Internal.MklSskysm(transa, __arg1, __arg2, __arg3, matdescra, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklSskymm(string transa, ref int m, ref int n, ref int k, ref float alpha, string matdescra, ref float val, ref int pntr, ref float b, ref int ldb, ref float beta, ref float c, ref int ldc)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &n)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &k)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (float* __refParamPtr4 = &alpha)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (float* __refParamPtr6 = &val)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &pntr)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (float* __refParamPtr8 = &b)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (int* __refParamPtr9 = &ldb)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (float* __refParamPtr10 = &beta)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (float* __refParamPtr11 = &c)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    fixed (int* __refParamPtr12 = &ldc)
                                                    {
                                                        var __arg12 = __refParamPtr12;
                                                        __Internal.MklSskymm(transa, __arg1, __arg2, __arg3, __arg4, matdescra, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklSbsrmm(string transa, ref int m, ref int n, ref int k, ref int lb, ref float alpha, string matdescra, ref float val, ref int indx, ref int pntrb, ref int pntre, ref float b, ref int ldb, ref float beta, ref float c, ref int ldc)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &n)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &k)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &lb)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (float* __refParamPtr5 = &alpha)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (float* __refParamPtr7 = &val)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &indx)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (int* __refParamPtr9 = &pntrb)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (int* __refParamPtr10 = &pntre)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (float* __refParamPtr11 = &b)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    fixed (int* __refParamPtr12 = &ldb)
                                                    {
                                                        var __arg12 = __refParamPtr12;
                                                        fixed (float* __refParamPtr13 = &beta)
                                                        {
                                                            var __arg13 = __refParamPtr13;
                                                            fixed (float* __refParamPtr14 = &c)
                                                            {
                                                                var __arg14 = __refParamPtr14;
                                                                fixed (int* __refParamPtr15 = &ldc)
                                                                {
                                                                    var __arg15 = __refParamPtr15;
                                                                    __Internal.MklSbsrmm(transa, __arg1, __arg2, __arg3, __arg4, __arg5, matdescra, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12, __arg13, __arg14, __arg15);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklSbsrsm(string transa, ref int m, ref int n, ref int lb, ref float alpha, string matdescra, ref float val, ref int indx, ref int pntrb, ref int pntre, ref float b, ref int ldb, ref float c, ref int ldc)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &n)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &lb)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (float* __refParamPtr4 = &alpha)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (float* __refParamPtr6 = &val)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &indx)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &pntrb)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (int* __refParamPtr9 = &pntre)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (float* __refParamPtr10 = &b)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (int* __refParamPtr11 = &ldb)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    fixed (float* __refParamPtr12 = &c)
                                                    {
                                                        var __arg12 = __refParamPtr12;
                                                        fixed (int* __refParamPtr13 = &ldc)
                                                        {
                                                            var __arg13 = __refParamPtr13;
                                                            __Internal.MklSbsrsm(transa, __arg1, __arg2, __arg3, __arg4, matdescra, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12, __arg13);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDcsrmv(string transa, ref int m, ref int k, ref double alpha, string matdescra, ref double val, ref int indx, ref int pntrb, ref int pntre, ref double x, ref double beta, ref double y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &k)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &alpha)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (double* __refParamPtr5 = &val)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &indx)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &pntrb)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &pntre)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (double* __refParamPtr9 = &x)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (double* __refParamPtr10 = &beta)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (double* __refParamPtr11 = &y)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    __Internal.MklDcsrmv(transa, __arg1, __arg2, __arg3, matdescra, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDcsrsv(string transa, ref int m, ref double alpha, string matdescra, ref double val, ref int indx, ref int pntrb, ref int pntre, ref double x, ref double y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &alpha)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr4 = &val)
                    {
                        var __arg4 = __refParamPtr4;
                        fixed (int* __refParamPtr5 = &indx)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &pntrb)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &pntre)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (double* __refParamPtr8 = &x)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (double* __refParamPtr9 = &y)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            __Internal.MklDcsrsv(transa, __arg1, __arg2, matdescra, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDcsrgemv(string transa, ref int m, ref double a, ref int ia, ref int ja, ref double x, ref double y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &a)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &ia)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &ja)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (double* __refParamPtr5 = &x)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (double* __refParamPtr6 = &y)
                                {
                                    var __arg6 = __refParamPtr6;
                                    __Internal.MklDcsrgemv(transa, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklCspblasDcsrgemv(string transa, ref int m, ref double a, ref int ia, ref int ja, ref double x, ref double y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &a)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &ia)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &ja)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (double* __refParamPtr5 = &x)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (double* __refParamPtr6 = &y)
                                {
                                    var __arg6 = __refParamPtr6;
                                    __Internal.MklCspblasDcsrgemv(transa, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDcsrsymv(string uplo, ref int m, ref double a, ref int ia, ref int ja, ref double x, ref double y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &a)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &ia)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &ja)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (double* __refParamPtr5 = &x)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (double* __refParamPtr6 = &y)
                                {
                                    var __arg6 = __refParamPtr6;
                                    __Internal.MklDcsrsymv(uplo, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklCspblasDcsrsymv(string uplo, ref int m, ref double a, ref int ia, ref int ja, ref double x, ref double y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &a)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &ia)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &ja)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (double* __refParamPtr5 = &x)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (double* __refParamPtr6 = &y)
                                {
                                    var __arg6 = __refParamPtr6;
                                    __Internal.MklCspblasDcsrsymv(uplo, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDcsrtrsv(string uplo, string transa, string diag, ref int m, ref double a, ref int ia, ref int ja, ref double x, ref double y)
        {
            fixed (int* __refParamPtr3 = &m)
            {
                var __arg3 = __refParamPtr3;
                fixed (double* __refParamPtr4 = &a)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (int* __refParamPtr5 = &ia)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (int* __refParamPtr6 = &ja)
                        {
                            var __arg6 = __refParamPtr6;
                            fixed (double* __refParamPtr7 = &x)
                            {
                                var __arg7 = __refParamPtr7;
                                fixed (double* __refParamPtr8 = &y)
                                {
                                    var __arg8 = __refParamPtr8;
                                    __Internal.MklDcsrtrsv(uplo, transa, diag, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklCspblasDcsrtrsv(string uplo, string transa, string diag, ref int m, ref double a, ref int ia, ref int ja, ref double x, ref double y)
        {
            fixed (int* __refParamPtr3 = &m)
            {
                var __arg3 = __refParamPtr3;
                fixed (double* __refParamPtr4 = &a)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (int* __refParamPtr5 = &ia)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (int* __refParamPtr6 = &ja)
                        {
                            var __arg6 = __refParamPtr6;
                            fixed (double* __refParamPtr7 = &x)
                            {
                                var __arg7 = __refParamPtr7;
                                fixed (double* __refParamPtr8 = &y)
                                {
                                    var __arg8 = __refParamPtr8;
                                    __Internal.MklCspblasDcsrtrsv(uplo, transa, diag, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDcscmv(string transa, ref int m, ref int k, ref double alpha, string matdescra, ref double val, ref int indx, ref int pntrb, ref int pntre, ref double x, ref double beta, ref double y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &k)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &alpha)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (double* __refParamPtr5 = &val)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &indx)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &pntrb)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &pntre)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (double* __refParamPtr9 = &x)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (double* __refParamPtr10 = &beta)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (double* __refParamPtr11 = &y)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    __Internal.MklDcscmv(transa, __arg1, __arg2, __arg3, matdescra, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDcscsv(string transa, ref int m, ref double alpha, string matdescra, ref double val, ref int indx, ref int pntrb, ref int pntre, ref double x, ref double y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &alpha)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr4 = &val)
                    {
                        var __arg4 = __refParamPtr4;
                        fixed (int* __refParamPtr5 = &indx)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &pntrb)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &pntre)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (double* __refParamPtr8 = &x)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (double* __refParamPtr9 = &y)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            __Internal.MklDcscsv(transa, __arg1, __arg2, matdescra, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDcoomv(string transa, ref int m, ref int k, ref double alpha, string matdescra, ref double val, ref int rowind, ref int colind, ref int nnz, ref double x, ref double beta, ref double y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &k)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &alpha)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (double* __refParamPtr5 = &val)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &rowind)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &colind)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &nnz)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (double* __refParamPtr9 = &x)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (double* __refParamPtr10 = &beta)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (double* __refParamPtr11 = &y)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    __Internal.MklDcoomv(transa, __arg1, __arg2, __arg3, matdescra, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDcoosv(string transa, ref int m, ref double alpha, string matdescra, ref double val, ref int rowind, ref int colind, ref int nnz, ref double x, ref double y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &alpha)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr4 = &val)
                    {
                        var __arg4 = __refParamPtr4;
                        fixed (int* __refParamPtr5 = &rowind)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &colind)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &nnz)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (double* __refParamPtr8 = &x)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (double* __refParamPtr9 = &y)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            __Internal.MklDcoosv(transa, __arg1, __arg2, matdescra, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDcoogemv(string transa, ref int m, ref double val, ref int rowind, ref int colind, ref int nnz, ref double x, ref double y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &val)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &rowind)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &colind)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (int* __refParamPtr5 = &nnz)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (double* __refParamPtr6 = &x)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (double* __refParamPtr7 = &y)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        __Internal.MklDcoogemv(transa, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklCspblasDcoogemv(string transa, ref int m, ref double val, ref int rowind, ref int colind, ref int nnz, ref double x, ref double y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &val)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &rowind)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &colind)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (int* __refParamPtr5 = &nnz)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (double* __refParamPtr6 = &x)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (double* __refParamPtr7 = &y)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        __Internal.MklCspblasDcoogemv(transa, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDcoosymv(string uplo, ref int m, ref double val, ref int rowind, ref int colind, ref int nnz, ref double x, ref double y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &val)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &rowind)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &colind)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (int* __refParamPtr5 = &nnz)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (double* __refParamPtr6 = &x)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (double* __refParamPtr7 = &y)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        __Internal.MklDcoosymv(uplo, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklCspblasDcoosymv(string uplo, ref int m, ref double val, ref int rowind, ref int colind, ref int nnz, ref double x, ref double y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &val)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &rowind)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &colind)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (int* __refParamPtr5 = &nnz)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (double* __refParamPtr6 = &x)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (double* __refParamPtr7 = &y)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        __Internal.MklCspblasDcoosymv(uplo, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDcootrsv(string uplo, string transa, string diag, ref int m, ref double val, ref int rowind, ref int colind, ref int nnz, ref double x, ref double y)
        {
            fixed (int* __refParamPtr3 = &m)
            {
                var __arg3 = __refParamPtr3;
                fixed (double* __refParamPtr4 = &val)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (int* __refParamPtr5 = &rowind)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (int* __refParamPtr6 = &colind)
                        {
                            var __arg6 = __refParamPtr6;
                            fixed (int* __refParamPtr7 = &nnz)
                            {
                                var __arg7 = __refParamPtr7;
                                fixed (double* __refParamPtr8 = &x)
                                {
                                    var __arg8 = __refParamPtr8;
                                    fixed (double* __refParamPtr9 = &y)
                                    {
                                        var __arg9 = __refParamPtr9;
                                        __Internal.MklDcootrsv(uplo, transa, diag, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklCspblasDcootrsv(string uplo, string transa, string diag, ref int m, ref double val, ref int rowind, ref int colind, ref int nnz, ref double x, ref double y)
        {
            fixed (int* __refParamPtr3 = &m)
            {
                var __arg3 = __refParamPtr3;
                fixed (double* __refParamPtr4 = &val)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (int* __refParamPtr5 = &rowind)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (int* __refParamPtr6 = &colind)
                        {
                            var __arg6 = __refParamPtr6;
                            fixed (int* __refParamPtr7 = &nnz)
                            {
                                var __arg7 = __refParamPtr7;
                                fixed (double* __refParamPtr8 = &x)
                                {
                                    var __arg8 = __refParamPtr8;
                                    fixed (double* __refParamPtr9 = &y)
                                    {
                                        var __arg9 = __refParamPtr9;
                                        __Internal.MklCspblasDcootrsv(uplo, transa, diag, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDdiamv(string transa, ref int m, ref int k, ref double alpha, string matdescra, ref double val, ref int lval, ref int idiag, ref int ndiag, ref double x, ref double beta, ref double y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &k)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &alpha)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (double* __refParamPtr5 = &val)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &lval)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &idiag)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &ndiag)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (double* __refParamPtr9 = &x)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (double* __refParamPtr10 = &beta)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (double* __refParamPtr11 = &y)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    __Internal.MklDdiamv(transa, __arg1, __arg2, __arg3, matdescra, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDdiasv(string transa, ref int m, ref double alpha, string matdescra, ref double val, ref int lval, ref int idiag, ref int ndiag, ref double x, ref double y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &alpha)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr4 = &val)
                    {
                        var __arg4 = __refParamPtr4;
                        fixed (int* __refParamPtr5 = &lval)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &idiag)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &ndiag)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (double* __refParamPtr8 = &x)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (double* __refParamPtr9 = &y)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            __Internal.MklDdiasv(transa, __arg1, __arg2, matdescra, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDdiagemv(string transa, ref int m, ref double val, ref int lval, ref int idiag, ref int ndiag, ref double x, ref double y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &val)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &lval)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &idiag)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (int* __refParamPtr5 = &ndiag)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (double* __refParamPtr6 = &x)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (double* __refParamPtr7 = &y)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        __Internal.MklDdiagemv(transa, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDdiasymv(string uplo, ref int m, ref double val, ref int lval, ref int idiag, ref int ndiag, ref double x, ref double y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &val)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &lval)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &idiag)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (int* __refParamPtr5 = &ndiag)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (double* __refParamPtr6 = &x)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (double* __refParamPtr7 = &y)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        __Internal.MklDdiasymv(uplo, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDdiatrsv(string uplo, string transa, string diag, ref int m, ref double val, ref int lval, ref int idiag, ref int ndiag, ref double x, ref double y)
        {
            fixed (int* __refParamPtr3 = &m)
            {
                var __arg3 = __refParamPtr3;
                fixed (double* __refParamPtr4 = &val)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (int* __refParamPtr5 = &lval)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (int* __refParamPtr6 = &idiag)
                        {
                            var __arg6 = __refParamPtr6;
                            fixed (int* __refParamPtr7 = &ndiag)
                            {
                                var __arg7 = __refParamPtr7;
                                fixed (double* __refParamPtr8 = &x)
                                {
                                    var __arg8 = __refParamPtr8;
                                    fixed (double* __refParamPtr9 = &y)
                                    {
                                        var __arg9 = __refParamPtr9;
                                        __Internal.MklDdiatrsv(uplo, transa, diag, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDskymv(string transa, ref int m, ref int k, ref double alpha, string matdescra, ref double val, ref int pntr, ref double x, ref double beta, ref double y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &k)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &alpha)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (double* __refParamPtr5 = &val)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &pntr)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (double* __refParamPtr7 = &x)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (double* __refParamPtr8 = &beta)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (double* __refParamPtr9 = &y)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            __Internal.MklDskymv(transa, __arg1, __arg2, __arg3, matdescra, __arg5, __arg6, __arg7, __arg8, __arg9);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDskysv(string transa, ref int m, ref double alpha, string matdescra, ref double val, ref int pntr, ref double x, ref double y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (double* __refParamPtr2 = &alpha)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr4 = &val)
                    {
                        var __arg4 = __refParamPtr4;
                        fixed (int* __refParamPtr5 = &pntr)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (double* __refParamPtr6 = &x)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (double* __refParamPtr7 = &y)
                                {
                                    var __arg7 = __refParamPtr7;
                                    __Internal.MklDskysv(transa, __arg1, __arg2, matdescra, __arg4, __arg5, __arg6, __arg7);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDbsrmv(string transa, ref int m, ref int k, ref int lb, ref double alpha, string matdescra, ref double val, ref int indx, ref int pntrb, ref int pntre, ref double x, ref double beta, ref double y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &k)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &lb)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (double* __refParamPtr4 = &alpha)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (double* __refParamPtr6 = &val)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &indx)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &pntrb)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (int* __refParamPtr9 = &pntre)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (double* __refParamPtr10 = &x)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (double* __refParamPtr11 = &beta)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    fixed (double* __refParamPtr12 = &y)
                                                    {
                                                        var __arg12 = __refParamPtr12;
                                                        __Internal.MklDbsrmv(transa, __arg1, __arg2, __arg3, __arg4, matdescra, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDbsrsv(string transa, ref int m, ref int lb, ref double alpha, string matdescra, ref double val, ref int indx, ref int pntrb, ref int pntre, ref double x, ref double y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &lb)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &alpha)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (double* __refParamPtr5 = &val)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &indx)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &pntrb)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &pntre)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (double* __refParamPtr9 = &x)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (double* __refParamPtr10 = &y)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                __Internal.MklDbsrsv(transa, __arg1, __arg2, __arg3, matdescra, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDbsrgemv(string transa, ref int m, ref int lb, ref double a, ref int ia, ref int ja, ref double x, ref double y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &lb)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &a)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &ia)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (int* __refParamPtr5 = &ja)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (double* __refParamPtr6 = &x)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (double* __refParamPtr7 = &y)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        __Internal.MklDbsrgemv(transa, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklCspblasDbsrgemv(string transa, ref int m, ref int lb, ref double a, ref int ia, ref int ja, ref double x, ref double y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &lb)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &a)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &ia)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (int* __refParamPtr5 = &ja)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (double* __refParamPtr6 = &x)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (double* __refParamPtr7 = &y)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        __Internal.MklCspblasDbsrgemv(transa, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDbsrsymv(string uplo, ref int m, ref int lb, ref double a, ref int ia, ref int ja, ref double x, ref double y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &lb)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &a)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &ia)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (int* __refParamPtr5 = &ja)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (double* __refParamPtr6 = &x)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (double* __refParamPtr7 = &y)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        __Internal.MklDbsrsymv(uplo, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklCspblasDbsrsymv(string uplo, ref int m, ref int lb, ref double a, ref int ia, ref int ja, ref double x, ref double y)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &lb)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &a)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &ia)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (int* __refParamPtr5 = &ja)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (double* __refParamPtr6 = &x)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (double* __refParamPtr7 = &y)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        __Internal.MklCspblasDbsrsymv(uplo, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDbsrtrsv(string uplo, string transa, string diag, ref int m, ref int lb, ref double a, ref int ia, ref int ja, ref double x, ref double y)
        {
            fixed (int* __refParamPtr3 = &m)
            {
                var __arg3 = __refParamPtr3;
                fixed (int* __refParamPtr4 = &lb)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (double* __refParamPtr5 = &a)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (int* __refParamPtr6 = &ia)
                        {
                            var __arg6 = __refParamPtr6;
                            fixed (int* __refParamPtr7 = &ja)
                            {
                                var __arg7 = __refParamPtr7;
                                fixed (double* __refParamPtr8 = &x)
                                {
                                    var __arg8 = __refParamPtr8;
                                    fixed (double* __refParamPtr9 = &y)
                                    {
                                        var __arg9 = __refParamPtr9;
                                        __Internal.MklDbsrtrsv(uplo, transa, diag, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklCspblasDbsrtrsv(string uplo, string transa, string diag, ref int m, ref int lb, ref double a, ref int ia, ref int ja, ref double x, ref double y)
        {
            fixed (int* __refParamPtr3 = &m)
            {
                var __arg3 = __refParamPtr3;
                fixed (int* __refParamPtr4 = &lb)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (double* __refParamPtr5 = &a)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (int* __refParamPtr6 = &ia)
                        {
                            var __arg6 = __refParamPtr6;
                            fixed (int* __refParamPtr7 = &ja)
                            {
                                var __arg7 = __refParamPtr7;
                                fixed (double* __refParamPtr8 = &x)
                                {
                                    var __arg8 = __refParamPtr8;
                                    fixed (double* __refParamPtr9 = &y)
                                    {
                                        var __arg9 = __refParamPtr9;
                                        __Internal.MklCspblasDbsrtrsv(uplo, transa, diag, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDcsrmm(string transa, ref int m, ref int n, ref int k, ref double alpha, string matdescra, ref double val, ref int indx, ref int pntrb, ref int pntre, ref double b, ref int ldb, ref double beta, ref double c, ref int ldc)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &n)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &k)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (double* __refParamPtr4 = &alpha)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (double* __refParamPtr6 = &val)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &indx)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &pntrb)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (int* __refParamPtr9 = &pntre)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (double* __refParamPtr10 = &b)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (int* __refParamPtr11 = &ldb)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    fixed (double* __refParamPtr12 = &beta)
                                                    {
                                                        var __arg12 = __refParamPtr12;
                                                        fixed (double* __refParamPtr13 = &c)
                                                        {
                                                            var __arg13 = __refParamPtr13;
                                                            fixed (int* __refParamPtr14 = &ldc)
                                                            {
                                                                var __arg14 = __refParamPtr14;
                                                                __Internal.MklDcsrmm(transa, __arg1, __arg2, __arg3, __arg4, matdescra, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12, __arg13, __arg14);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDcsrsm(string transa, ref int m, ref int n, ref double alpha, string matdescra, ref double val, ref int indx, ref int pntrb, ref int pntre, ref double b, ref int ldb, ref double c, ref int ldc)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &n)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &alpha)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (double* __refParamPtr5 = &val)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &indx)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &pntrb)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &pntre)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (double* __refParamPtr9 = &b)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (int* __refParamPtr10 = &ldb)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (double* __refParamPtr11 = &c)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    fixed (int* __refParamPtr12 = &ldc)
                                                    {
                                                        var __arg12 = __refParamPtr12;
                                                        __Internal.MklDcsrsm(transa, __arg1, __arg2, __arg3, matdescra, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDcscmm(string transa, ref int m, ref int n, ref int k, ref double alpha, string matdescra, ref double val, ref int indx, ref int pntrb, ref int pntre, ref double b, ref int ldb, ref double beta, ref double c, ref int ldc)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &n)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &k)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (double* __refParamPtr4 = &alpha)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (double* __refParamPtr6 = &val)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &indx)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &pntrb)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (int* __refParamPtr9 = &pntre)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (double* __refParamPtr10 = &b)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (int* __refParamPtr11 = &ldb)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    fixed (double* __refParamPtr12 = &beta)
                                                    {
                                                        var __arg12 = __refParamPtr12;
                                                        fixed (double* __refParamPtr13 = &c)
                                                        {
                                                            var __arg13 = __refParamPtr13;
                                                            fixed (int* __refParamPtr14 = &ldc)
                                                            {
                                                                var __arg14 = __refParamPtr14;
                                                                __Internal.MklDcscmm(transa, __arg1, __arg2, __arg3, __arg4, matdescra, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12, __arg13, __arg14);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDcscsm(string transa, ref int m, ref int n, ref double alpha, string matdescra, ref double val, ref int indx, ref int pntrb, ref int pntre, ref double b, ref int ldb, ref double c, ref int ldc)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &n)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &alpha)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (double* __refParamPtr5 = &val)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &indx)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &pntrb)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &pntre)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (double* __refParamPtr9 = &b)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (int* __refParamPtr10 = &ldb)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (double* __refParamPtr11 = &c)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    fixed (int* __refParamPtr12 = &ldc)
                                                    {
                                                        var __arg12 = __refParamPtr12;
                                                        __Internal.MklDcscsm(transa, __arg1, __arg2, __arg3, matdescra, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDcoomm(string transa, ref int m, ref int n, ref int k, ref double alpha, string matdescra, ref double val, ref int rowind, ref int colind, ref int nnz, ref double b, ref int ldb, ref double beta, ref double c, ref int ldc)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &n)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &k)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (double* __refParamPtr4 = &alpha)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (double* __refParamPtr6 = &val)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &rowind)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &colind)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (int* __refParamPtr9 = &nnz)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (double* __refParamPtr10 = &b)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (int* __refParamPtr11 = &ldb)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    fixed (double* __refParamPtr12 = &beta)
                                                    {
                                                        var __arg12 = __refParamPtr12;
                                                        fixed (double* __refParamPtr13 = &c)
                                                        {
                                                            var __arg13 = __refParamPtr13;
                                                            fixed (int* __refParamPtr14 = &ldc)
                                                            {
                                                                var __arg14 = __refParamPtr14;
                                                                __Internal.MklDcoomm(transa, __arg1, __arg2, __arg3, __arg4, matdescra, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12, __arg13, __arg14);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDcoosm(string transa, ref int m, ref int n, ref double alpha, string matdescra, ref double val, ref int rowind, ref int colind, ref int nnz, ref double b, ref int ldb, ref double c, ref int ldc)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &n)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &alpha)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (double* __refParamPtr5 = &val)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &rowind)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &colind)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &nnz)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (double* __refParamPtr9 = &b)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (int* __refParamPtr10 = &ldb)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (double* __refParamPtr11 = &c)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    fixed (int* __refParamPtr12 = &ldc)
                                                    {
                                                        var __arg12 = __refParamPtr12;
                                                        __Internal.MklDcoosm(transa, __arg1, __arg2, __arg3, matdescra, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDdiamm(string transa, ref int m, ref int n, ref int k, ref double alpha, string matdescra, ref double val, ref int lval, ref int idiag, ref int ndiag, ref double b, ref int ldb, ref double beta, ref double c, ref int ldc)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &n)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &k)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (double* __refParamPtr4 = &alpha)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (double* __refParamPtr6 = &val)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &lval)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &idiag)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (int* __refParamPtr9 = &ndiag)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (double* __refParamPtr10 = &b)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (int* __refParamPtr11 = &ldb)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    fixed (double* __refParamPtr12 = &beta)
                                                    {
                                                        var __arg12 = __refParamPtr12;
                                                        fixed (double* __refParamPtr13 = &c)
                                                        {
                                                            var __arg13 = __refParamPtr13;
                                                            fixed (int* __refParamPtr14 = &ldc)
                                                            {
                                                                var __arg14 = __refParamPtr14;
                                                                __Internal.MklDdiamm(transa, __arg1, __arg2, __arg3, __arg4, matdescra, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12, __arg13, __arg14);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDdiasm(string transa, ref int m, ref int n, ref double alpha, string matdescra, ref double val, ref int lval, ref int idiag, ref int ndiag, ref double b, ref int ldb, ref double c, ref int ldc)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &n)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &alpha)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (double* __refParamPtr5 = &val)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &lval)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &idiag)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &ndiag)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (double* __refParamPtr9 = &b)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (int* __refParamPtr10 = &ldb)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (double* __refParamPtr11 = &c)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    fixed (int* __refParamPtr12 = &ldc)
                                                    {
                                                        var __arg12 = __refParamPtr12;
                                                        __Internal.MklDdiasm(transa, __arg1, __arg2, __arg3, matdescra, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDskysm(string transa, ref int m, ref int n, ref double alpha, string matdescra, ref double val, ref int pntr, ref double b, ref int ldb, ref double c, ref int ldc)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &n)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (double* __refParamPtr3 = &alpha)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (double* __refParamPtr5 = &val)
                        {
                            var __arg5 = __refParamPtr5;
                            fixed (int* __refParamPtr6 = &pntr)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (double* __refParamPtr7 = &b)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &ldb)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (double* __refParamPtr9 = &c)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (int* __refParamPtr10 = &ldc)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                __Internal.MklDskysm(transa, __arg1, __arg2, __arg3, matdescra, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDskymm(string transa, ref int m, ref int n, ref int k, ref double alpha, string matdescra, ref double val, ref int pntr, ref double b, ref int ldb, ref double beta, ref double c, ref int ldc)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &n)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &k)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (double* __refParamPtr4 = &alpha)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (double* __refParamPtr6 = &val)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &pntr)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (double* __refParamPtr8 = &b)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (int* __refParamPtr9 = &ldb)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (double* __refParamPtr10 = &beta)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (double* __refParamPtr11 = &c)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    fixed (int* __refParamPtr12 = &ldc)
                                                    {
                                                        var __arg12 = __refParamPtr12;
                                                        __Internal.MklDskymm(transa, __arg1, __arg2, __arg3, __arg4, matdescra, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDbsrmm(string transa, ref int m, ref int n, ref int k, ref int lb, ref double alpha, string matdescra, ref double val, ref int indx, ref int pntrb, ref int pntre, ref double b, ref int ldb, ref double beta, ref double c, ref int ldc)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &n)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &k)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &lb)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (double* __refParamPtr5 = &alpha)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (double* __refParamPtr7 = &val)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &indx)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (int* __refParamPtr9 = &pntrb)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (int* __refParamPtr10 = &pntre)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (double* __refParamPtr11 = &b)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    fixed (int* __refParamPtr12 = &ldb)
                                                    {
                                                        var __arg12 = __refParamPtr12;
                                                        fixed (double* __refParamPtr13 = &beta)
                                                        {
                                                            var __arg13 = __refParamPtr13;
                                                            fixed (double* __refParamPtr14 = &c)
                                                            {
                                                                var __arg14 = __refParamPtr14;
                                                                fixed (int* __refParamPtr15 = &ldc)
                                                                {
                                                                    var __arg15 = __refParamPtr15;
                                                                    __Internal.MklDbsrmm(transa, __arg1, __arg2, __arg3, __arg4, __arg5, matdescra, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12, __arg13, __arg14, __arg15);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDbsrsm(string transa, ref int m, ref int n, ref int lb, ref double alpha, string matdescra, ref double val, ref int indx, ref int pntrb, ref int pntre, ref double b, ref int ldb, ref double c, ref int ldc)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &n)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &lb)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (double* __refParamPtr4 = &alpha)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (double* __refParamPtr6 = &val)
                            {
                                var __arg6 = __refParamPtr6;
                                fixed (int* __refParamPtr7 = &indx)
                                {
                                    var __arg7 = __refParamPtr7;
                                    fixed (int* __refParamPtr8 = &pntrb)
                                    {
                                        var __arg8 = __refParamPtr8;
                                        fixed (int* __refParamPtr9 = &pntre)
                                        {
                                            var __arg9 = __refParamPtr9;
                                            fixed (double* __refParamPtr10 = &b)
                                            {
                                                var __arg10 = __refParamPtr10;
                                                fixed (int* __refParamPtr11 = &ldb)
                                                {
                                                    var __arg11 = __refParamPtr11;
                                                    fixed (double* __refParamPtr12 = &c)
                                                    {
                                                        var __arg12 = __refParamPtr12;
                                                        fixed (int* __refParamPtr13 = &ldc)
                                                        {
                                                            var __arg13 = __refParamPtr13;
                                                            __Internal.MklDbsrsm(transa, __arg1, __arg2, __arg3, __arg4, matdescra, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12, __arg13);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDcsrbsr(ref int job, ref int m, ref int mblk, ref int ldAbsr, ref double Acsr, ref int AJ, ref int AI, ref double Absr, ref int AJB, ref int AIB, ref int info)
        {
            fixed (int* __refParamPtr0 = &job)
            {
                var __arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &m)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &mblk)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (int* __refParamPtr3 = &ldAbsr)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (double* __refParamPtr4 = &Acsr)
                            {
                                var __arg4 = __refParamPtr4;
                                fixed (int* __refParamPtr5 = &AJ)
                                {
                                    var __arg5 = __refParamPtr5;
                                    fixed (int* __refParamPtr6 = &AI)
                                    {
                                        var __arg6 = __refParamPtr6;
                                        fixed (double* __refParamPtr7 = &Absr)
                                        {
                                            var __arg7 = __refParamPtr7;
                                            fixed (int* __refParamPtr8 = &AJB)
                                            {
                                                var __arg8 = __refParamPtr8;
                                                fixed (int* __refParamPtr9 = &AIB)
                                                {
                                                    var __arg9 = __refParamPtr9;
                                                    fixed (int* __refParamPtr10 = &info)
                                                    {
                                                        var __arg10 = __refParamPtr10;
                                                        __Internal.MklDcsrbsr(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDcsrcoo(ref int job, ref int n, ref double Acsr, ref int AJR, ref int AIR, ref int nnz, ref double Acoo, ref int ir, ref int jc, ref int info)
        {
            fixed (int* __refParamPtr0 = &job)
            {
                var __arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &n)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (double* __refParamPtr2 = &Acsr)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (int* __refParamPtr3 = &AJR)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (int* __refParamPtr4 = &AIR)
                            {
                                var __arg4 = __refParamPtr4;
                                fixed (int* __refParamPtr5 = &nnz)
                                {
                                    var __arg5 = __refParamPtr5;
                                    fixed (double* __refParamPtr6 = &Acoo)
                                    {
                                        var __arg6 = __refParamPtr6;
                                        fixed (int* __refParamPtr7 = &ir)
                                        {
                                            var __arg7 = __refParamPtr7;
                                            fixed (int* __refParamPtr8 = &jc)
                                            {
                                                var __arg8 = __refParamPtr8;
                                                fixed (int* __refParamPtr9 = &info)
                                                {
                                                    var __arg9 = __refParamPtr9;
                                                    __Internal.MklDcsrcoo(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDdnscsr(ref int job, ref int m, ref int n, ref double Adns, ref int lda, ref double Acsr, ref int AJ, ref int AI, ref int info)
        {
            fixed (int* __refParamPtr0 = &job)
            {
                var __arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &m)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &n)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (double* __refParamPtr3 = &Adns)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (int* __refParamPtr4 = &lda)
                            {
                                var __arg4 = __refParamPtr4;
                                fixed (double* __refParamPtr5 = &Acsr)
                                {
                                    var __arg5 = __refParamPtr5;
                                    fixed (int* __refParamPtr6 = &AJ)
                                    {
                                        var __arg6 = __refParamPtr6;
                                        fixed (int* __refParamPtr7 = &AI)
                                        {
                                            var __arg7 = __refParamPtr7;
                                            fixed (int* __refParamPtr8 = &info)
                                            {
                                                var __arg8 = __refParamPtr8;
                                                __Internal.MklDdnscsr(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDcsrcsc(ref int job, ref int n, ref double Acsr, ref int AJ0, ref int AI0, ref double Acsc, ref int AJ1, ref int AI1, ref int info)
        {
            fixed (int* __refParamPtr0 = &job)
            {
                var __arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &n)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (double* __refParamPtr2 = &Acsr)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (int* __refParamPtr3 = &AJ0)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (int* __refParamPtr4 = &AI0)
                            {
                                var __arg4 = __refParamPtr4;
                                fixed (double* __refParamPtr5 = &Acsc)
                                {
                                    var __arg5 = __refParamPtr5;
                                    fixed (int* __refParamPtr6 = &AJ1)
                                    {
                                        var __arg6 = __refParamPtr6;
                                        fixed (int* __refParamPtr7 = &AI1)
                                        {
                                            var __arg7 = __refParamPtr7;
                                            fixed (int* __refParamPtr8 = &info)
                                            {
                                                var __arg8 = __refParamPtr8;
                                                __Internal.MklDcsrcsc(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDcsrdia(ref int job, ref int n, ref double Acsr, ref int AJ0, ref int AI0, ref double Adia, ref int ndiag, ref int distance, ref int idiag, ref double Acsr_rem, ref int AJ0_rem, ref int AI0_rem, ref int info)
        {
            fixed (int* __refParamPtr0 = &job)
            {
                var __arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &n)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (double* __refParamPtr2 = &Acsr)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (int* __refParamPtr3 = &AJ0)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (int* __refParamPtr4 = &AI0)
                            {
                                var __arg4 = __refParamPtr4;
                                fixed (double* __refParamPtr5 = &Adia)
                                {
                                    var __arg5 = __refParamPtr5;
                                    fixed (int* __refParamPtr6 = &ndiag)
                                    {
                                        var __arg6 = __refParamPtr6;
                                        fixed (int* __refParamPtr7 = &distance)
                                        {
                                            var __arg7 = __refParamPtr7;
                                            fixed (int* __refParamPtr8 = &idiag)
                                            {
                                                var __arg8 = __refParamPtr8;
                                                fixed (double* __refParamPtr9 = &Acsr_rem)
                                                {
                                                    var __arg9 = __refParamPtr9;
                                                    fixed (int* __refParamPtr10 = &AJ0_rem)
                                                    {
                                                        var __arg10 = __refParamPtr10;
                                                        fixed (int* __refParamPtr11 = &AI0_rem)
                                                        {
                                                            var __arg11 = __refParamPtr11;
                                                            fixed (int* __refParamPtr12 = &info)
                                                            {
                                                                var __arg12 = __refParamPtr12;
                                                                __Internal.MklDcsrdia(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDcsrsky(ref int job, ref int n, ref double Acsr, ref int AJ0, ref int AI0, ref double Asky, ref int pointers, ref int info)
        {
            fixed (int* __refParamPtr0 = &job)
            {
                var __arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &n)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (double* __refParamPtr2 = &Acsr)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (int* __refParamPtr3 = &AJ0)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (int* __refParamPtr4 = &AI0)
                            {
                                var __arg4 = __refParamPtr4;
                                fixed (double* __refParamPtr5 = &Asky)
                                {
                                    var __arg5 = __refParamPtr5;
                                    fixed (int* __refParamPtr6 = &pointers)
                                    {
                                        var __arg6 = __refParamPtr6;
                                        fixed (int* __refParamPtr7 = &info)
                                        {
                                            var __arg7 = __refParamPtr7;
                                            __Internal.MklDcsrsky(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklScsrbsr(ref int job, ref int m, ref int mblk, ref int ldAbsr, ref float Acsr, ref int AJ, ref int AI, ref float Absr, ref int AJB, ref int AIB, ref int info)
        {
            fixed (int* __refParamPtr0 = &job)
            {
                var __arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &m)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &mblk)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (int* __refParamPtr3 = &ldAbsr)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (float* __refParamPtr4 = &Acsr)
                            {
                                var __arg4 = __refParamPtr4;
                                fixed (int* __refParamPtr5 = &AJ)
                                {
                                    var __arg5 = __refParamPtr5;
                                    fixed (int* __refParamPtr6 = &AI)
                                    {
                                        var __arg6 = __refParamPtr6;
                                        fixed (float* __refParamPtr7 = &Absr)
                                        {
                                            var __arg7 = __refParamPtr7;
                                            fixed (int* __refParamPtr8 = &AJB)
                                            {
                                                var __arg8 = __refParamPtr8;
                                                fixed (int* __refParamPtr9 = &AIB)
                                                {
                                                    var __arg9 = __refParamPtr9;
                                                    fixed (int* __refParamPtr10 = &info)
                                                    {
                                                        var __arg10 = __refParamPtr10;
                                                        __Internal.MklScsrbsr(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklScsrcoo(ref int job, ref int n, ref float Acsr, ref int AJR, ref int AIR, ref int nnz, ref float Acoo, ref int ir, ref int jc, ref int info)
        {
            fixed (int* __refParamPtr0 = &job)
            {
                var __arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &n)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &Acsr)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (int* __refParamPtr3 = &AJR)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (int* __refParamPtr4 = &AIR)
                            {
                                var __arg4 = __refParamPtr4;
                                fixed (int* __refParamPtr5 = &nnz)
                                {
                                    var __arg5 = __refParamPtr5;
                                    fixed (float* __refParamPtr6 = &Acoo)
                                    {
                                        var __arg6 = __refParamPtr6;
                                        fixed (int* __refParamPtr7 = &ir)
                                        {
                                            var __arg7 = __refParamPtr7;
                                            fixed (int* __refParamPtr8 = &jc)
                                            {
                                                var __arg8 = __refParamPtr8;
                                                fixed (int* __refParamPtr9 = &info)
                                                {
                                                    var __arg9 = __refParamPtr9;
                                                    __Internal.MklScsrcoo(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklSdnscsr(ref int job, ref int m, ref int n, ref float Adns, ref int lda, ref float Acsr, ref int AJ, ref int AI, ref int info)
        {
            fixed (int* __refParamPtr0 = &job)
            {
                var __arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &m)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &n)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (float* __refParamPtr3 = &Adns)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (int* __refParamPtr4 = &lda)
                            {
                                var __arg4 = __refParamPtr4;
                                fixed (float* __refParamPtr5 = &Acsr)
                                {
                                    var __arg5 = __refParamPtr5;
                                    fixed (int* __refParamPtr6 = &AJ)
                                    {
                                        var __arg6 = __refParamPtr6;
                                        fixed (int* __refParamPtr7 = &AI)
                                        {
                                            var __arg7 = __refParamPtr7;
                                            fixed (int* __refParamPtr8 = &info)
                                            {
                                                var __arg8 = __refParamPtr8;
                                                __Internal.MklSdnscsr(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklScsrcsc(ref int job, ref int n, ref float Acsr, ref int AJ0, ref int AI0, ref float Acsc, ref int AJ1, ref int AI1, ref int info)
        {
            fixed (int* __refParamPtr0 = &job)
            {
                var __arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &n)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &Acsr)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (int* __refParamPtr3 = &AJ0)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (int* __refParamPtr4 = &AI0)
                            {
                                var __arg4 = __refParamPtr4;
                                fixed (float* __refParamPtr5 = &Acsc)
                                {
                                    var __arg5 = __refParamPtr5;
                                    fixed (int* __refParamPtr6 = &AJ1)
                                    {
                                        var __arg6 = __refParamPtr6;
                                        fixed (int* __refParamPtr7 = &AI1)
                                        {
                                            var __arg7 = __refParamPtr7;
                                            fixed (int* __refParamPtr8 = &info)
                                            {
                                                var __arg8 = __refParamPtr8;
                                                __Internal.MklScsrcsc(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklScsrdia(ref int job, ref int n, ref float Acsr, ref int AJ0, ref int AI0, ref float Adia, ref int ndiag, ref int distance, ref int idiag, ref float Acsr_rem, ref int AJ0_rem, ref int AI0_rem, ref int info)
        {
            fixed (int* __refParamPtr0 = &job)
            {
                var __arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &n)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &Acsr)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (int* __refParamPtr3 = &AJ0)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (int* __refParamPtr4 = &AI0)
                            {
                                var __arg4 = __refParamPtr4;
                                fixed (float* __refParamPtr5 = &Adia)
                                {
                                    var __arg5 = __refParamPtr5;
                                    fixed (int* __refParamPtr6 = &ndiag)
                                    {
                                        var __arg6 = __refParamPtr6;
                                        fixed (int* __refParamPtr7 = &distance)
                                        {
                                            var __arg7 = __refParamPtr7;
                                            fixed (int* __refParamPtr8 = &idiag)
                                            {
                                                var __arg8 = __refParamPtr8;
                                                fixed (float* __refParamPtr9 = &Acsr_rem)
                                                {
                                                    var __arg9 = __refParamPtr9;
                                                    fixed (int* __refParamPtr10 = &AJ0_rem)
                                                    {
                                                        var __arg10 = __refParamPtr10;
                                                        fixed (int* __refParamPtr11 = &AI0_rem)
                                                        {
                                                            var __arg11 = __refParamPtr11;
                                                            fixed (int* __refParamPtr12 = &info)
                                                            {
                                                                var __arg12 = __refParamPtr12;
                                                                __Internal.MklScsrdia(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklScsrsky(ref int job, ref int n, ref float Acsr, ref int AJ0, ref int AI0, ref float Asky, ref int pointers, ref int info)
        {
            fixed (int* __refParamPtr0 = &job)
            {
                var __arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &n)
                {
                    var __arg1 = __refParamPtr1;
                    fixed (float* __refParamPtr2 = &Acsr)
                    {
                        var __arg2 = __refParamPtr2;
                        fixed (int* __refParamPtr3 = &AJ0)
                        {
                            var __arg3 = __refParamPtr3;
                            fixed (int* __refParamPtr4 = &AI0)
                            {
                                var __arg4 = __refParamPtr4;
                                fixed (float* __refParamPtr5 = &Asky)
                                {
                                    var __arg5 = __refParamPtr5;
                                    fixed (int* __refParamPtr6 = &pointers)
                                    {
                                        var __arg6 = __refParamPtr6;
                                        fixed (int* __refParamPtr7 = &info)
                                        {
                                            var __arg7 = __refParamPtr7;
                                            __Internal.MklScsrsky(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDcsrmultcsr(string transa, ref int job, ref int sort, ref int m, ref int n, ref int k, ref double a, ref int ja, ref int ia, ref double b, ref int jb, ref int ib, ref double c, ref int jc, ref int ic, ref int nnzmax, ref int ierr)
        {
            fixed (int* __refParamPtr1 = &job)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &sort)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &m)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &n)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (int* __refParamPtr5 = &k)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (double* __refParamPtr6 = &a)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (int* __refParamPtr7 = &ja)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        fixed (int* __refParamPtr8 = &ia)
                                        {
                                            var __arg8 = __refParamPtr8;
                                            fixed (double* __refParamPtr9 = &b)
                                            {
                                                var __arg9 = __refParamPtr9;
                                                fixed (int* __refParamPtr10 = &jb)
                                                {
                                                    var __arg10 = __refParamPtr10;
                                                    fixed (int* __refParamPtr11 = &ib)
                                                    {
                                                        var __arg11 = __refParamPtr11;
                                                        fixed (double* __refParamPtr12 = &c)
                                                        {
                                                            var __arg12 = __refParamPtr12;
                                                            fixed (int* __refParamPtr13 = &jc)
                                                            {
                                                                var __arg13 = __refParamPtr13;
                                                                fixed (int* __refParamPtr14 = &ic)
                                                                {
                                                                    var __arg14 = __refParamPtr14;
                                                                    fixed (int* __refParamPtr15 = &nnzmax)
                                                                    {
                                                                        var __arg15 = __refParamPtr15;
                                                                        fixed (int* __refParamPtr16 = &ierr)
                                                                        {
                                                                            var __arg16 = __refParamPtr16;
                                                                            __Internal.MklDcsrmultcsr(transa, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12, __arg13, __arg14, __arg15, __arg16);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDcsrmultd(string transa, ref int m, ref int n, ref int k, ref double a, ref int ja, ref int ia, ref double b, ref int jb, ref int ib, ref double c, ref int ldc)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &n)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &k)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (double* __refParamPtr4 = &a)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (int* __refParamPtr5 = &ja)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (int* __refParamPtr6 = &ia)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (double* __refParamPtr7 = &b)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        fixed (int* __refParamPtr8 = &jb)
                                        {
                                            var __arg8 = __refParamPtr8;
                                            fixed (int* __refParamPtr9 = &ib)
                                            {
                                                var __arg9 = __refParamPtr9;
                                                fixed (double* __refParamPtr10 = &c)
                                                {
                                                    var __arg10 = __refParamPtr10;
                                                    fixed (int* __refParamPtr11 = &ldc)
                                                    {
                                                        var __arg11 = __refParamPtr11;
                                                        __Internal.MklDcsrmultd(transa, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklDcsradd(string transa, ref int job, ref int sort, ref int m, ref int n, ref double a, ref int ja, ref int ia, ref double beta, ref double b, ref int jb, ref int ib, ref double c, ref int jc, ref int ic, ref int nnzmax, ref int ierr)
        {
            fixed (int* __refParamPtr1 = &job)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &sort)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &m)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &n)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (double* __refParamPtr5 = &a)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (int* __refParamPtr6 = &ja)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (int* __refParamPtr7 = &ia)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        fixed (double* __refParamPtr8 = &beta)
                                        {
                                            var __arg8 = __refParamPtr8;
                                            fixed (double* __refParamPtr9 = &b)
                                            {
                                                var __arg9 = __refParamPtr9;
                                                fixed (int* __refParamPtr10 = &jb)
                                                {
                                                    var __arg10 = __refParamPtr10;
                                                    fixed (int* __refParamPtr11 = &ib)
                                                    {
                                                        var __arg11 = __refParamPtr11;
                                                        fixed (double* __refParamPtr12 = &c)
                                                        {
                                                            var __arg12 = __refParamPtr12;
                                                            fixed (int* __refParamPtr13 = &jc)
                                                            {
                                                                var __arg13 = __refParamPtr13;
                                                                fixed (int* __refParamPtr14 = &ic)
                                                                {
                                                                    var __arg14 = __refParamPtr14;
                                                                    fixed (int* __refParamPtr15 = &nnzmax)
                                                                    {
                                                                        var __arg15 = __refParamPtr15;
                                                                        fixed (int* __refParamPtr16 = &ierr)
                                                                        {
                                                                            var __arg16 = __refParamPtr16;
                                                                            __Internal.MklDcsradd(transa, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12, __arg13, __arg14, __arg15, __arg16);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklScsrmultcsr(string transa, ref int job, ref int sort, ref int m, ref int n, ref int k, ref float a, ref int ja, ref int ia, ref float b, ref int jb, ref int ib, ref float c, ref int jc, ref int ic, ref int nnzmax, ref int ierr)
        {
            fixed (int* __refParamPtr1 = &job)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &sort)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &m)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &n)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (int* __refParamPtr5 = &k)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (float* __refParamPtr6 = &a)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (int* __refParamPtr7 = &ja)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        fixed (int* __refParamPtr8 = &ia)
                                        {
                                            var __arg8 = __refParamPtr8;
                                            fixed (float* __refParamPtr9 = &b)
                                            {
                                                var __arg9 = __refParamPtr9;
                                                fixed (int* __refParamPtr10 = &jb)
                                                {
                                                    var __arg10 = __refParamPtr10;
                                                    fixed (int* __refParamPtr11 = &ib)
                                                    {
                                                        var __arg11 = __refParamPtr11;
                                                        fixed (float* __refParamPtr12 = &c)
                                                        {
                                                            var __arg12 = __refParamPtr12;
                                                            fixed (int* __refParamPtr13 = &jc)
                                                            {
                                                                var __arg13 = __refParamPtr13;
                                                                fixed (int* __refParamPtr14 = &ic)
                                                                {
                                                                    var __arg14 = __refParamPtr14;
                                                                    fixed (int* __refParamPtr15 = &nnzmax)
                                                                    {
                                                                        var __arg15 = __refParamPtr15;
                                                                        fixed (int* __refParamPtr16 = &ierr)
                                                                        {
                                                                            var __arg16 = __refParamPtr16;
                                                                            __Internal.MklScsrmultcsr(transa, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12, __arg13, __arg14, __arg15, __arg16);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklScsrmultd(string transa, ref int m, ref int n, ref int k, ref float a, ref int ja, ref int ia, ref float b, ref int jb, ref int ib, ref float c, ref int ldc)
        {
            fixed (int* __refParamPtr1 = &m)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &n)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &k)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (float* __refParamPtr4 = &a)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (int* __refParamPtr5 = &ja)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (int* __refParamPtr6 = &ia)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (float* __refParamPtr7 = &b)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        fixed (int* __refParamPtr8 = &jb)
                                        {
                                            var __arg8 = __refParamPtr8;
                                            fixed (int* __refParamPtr9 = &ib)
                                            {
                                                var __arg9 = __refParamPtr9;
                                                fixed (float* __refParamPtr10 = &c)
                                                {
                                                    var __arg10 = __refParamPtr10;
                                                    fixed (int* __refParamPtr11 = &ldc)
                                                    {
                                                        var __arg11 = __refParamPtr11;
                                                        __Internal.MklScsrmultd(transa, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void MklScsradd(string transa, ref int job, ref int sort, ref int m, ref int n, ref float a, ref int ja, ref int ia, ref float beta, ref float b, ref int jb, ref int ib, ref float c, ref int jc, ref int ic, ref int nnzmax, ref int ierr)
        {
            fixed (int* __refParamPtr1 = &job)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &sort)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &m)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &n)
                        {
                            var __arg4 = __refParamPtr4;
                            fixed (float* __refParamPtr5 = &a)
                            {
                                var __arg5 = __refParamPtr5;
                                fixed (int* __refParamPtr6 = &ja)
                                {
                                    var __arg6 = __refParamPtr6;
                                    fixed (int* __refParamPtr7 = &ia)
                                    {
                                        var __arg7 = __refParamPtr7;
                                        fixed (float* __refParamPtr8 = &beta)
                                        {
                                            var __arg8 = __refParamPtr8;
                                            fixed (float* __refParamPtr9 = &b)
                                            {
                                                var __arg9 = __refParamPtr9;
                                                fixed (int* __refParamPtr10 = &jb)
                                                {
                                                    var __arg10 = __refParamPtr10;
                                                    fixed (int* __refParamPtr11 = &ib)
                                                    {
                                                        var __arg11 = __refParamPtr11;
                                                        fixed (float* __refParamPtr12 = &c)
                                                        {
                                                            var __arg12 = __refParamPtr12;
                                                            fixed (int* __refParamPtr13 = &jc)
                                                            {
                                                                var __arg13 = __refParamPtr13;
                                                                fixed (int* __refParamPtr14 = &ic)
                                                                {
                                                                    var __arg14 = __refParamPtr14;
                                                                    fixed (int* __refParamPtr15 = &nnzmax)
                                                                    {
                                                                        var __arg15 = __refParamPtr15;
                                                                        fixed (int* __refParamPtr16 = &ierr)
                                                                        {
                                                                            var __arg16 = __refParamPtr16;
                                                                            __Internal.MklScsradd(transa, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10, __arg11, __arg12, __arg13, __arg14, __arg15, __arg16);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseSetSpmspvdHint(global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.SparseOperationT operation, global::IntelMKL.LP64.MatrixDescr descr, int expectedCalls)
        {
            var ____arg0 = A.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __arg2 = descr.__Instance;
            var __ret = __Internal.MklSparseSetSpmspvdHint(__arg0, operation, __arg2, expectedCalls);
            return __ret;
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseSSpmspvd(global::IntelMKL.LP64.SparseOperationT op, global::IntelMKL.LP64.ReplaceOperation replace_op, float alpha, global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.MatrixDescr descr, global::IntelMKL.LP64.SparseVector x, float beta, ref float y)
        {
            var __arg1 = replace_op.__Instance;
            var ____arg3 = A.__Instance;
            var __arg3 = new global::System.IntPtr(&____arg3);
            var __arg4 = descr.__Instance;
            var ____arg5 = x.__Instance;
            var __arg5 = new global::System.IntPtr(&____arg5);
            fixed (float* __refParamPtr7 = &y)
            {
                var __arg7 = __refParamPtr7;
                var __ret = __Internal.MklSparseSSpmspvd(op, __arg1, alpha, __arg3, __arg4, __arg5, beta, __arg7);
                return __ret;
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseDSpmspvd(global::IntelMKL.LP64.SparseOperationT op, global::IntelMKL.LP64.ReplaceOperation replace_op, double alpha, global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.MatrixDescr descr, global::IntelMKL.LP64.SparseVector x, double beta, ref double y)
        {
            var __arg1 = replace_op.__Instance;
            var ____arg3 = A.__Instance;
            var __arg3 = new global::System.IntPtr(&____arg3);
            var __arg4 = descr.__Instance;
            var ____arg5 = x.__Instance;
            var __arg5 = new global::System.IntPtr(&____arg5);
            fixed (double* __refParamPtr7 = &y)
            {
                var __arg7 = __refParamPtr7;
                var __ret = __Internal.MklSparseDSpmspvd(op, __arg1, alpha, __arg3, __arg4, __arg5, beta, __arg7);
                return __ret;
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseSCreateVector(global::IntelMKL.LP64.SparseVector V, global::IntelMKL.LP64.SparseIndexBaseT indexing, int n, int nnz, ref int indx, ref float values)
        {
            var ____arg0 = V.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (int* __refParamPtr4 = &indx)
            {
                var __arg4 = __refParamPtr4;
                fixed (float* __refParamPtr5 = &values)
                {
                    var __arg5 = __refParamPtr5;
                    var __ret = __Internal.MklSparseSCreateVector(__arg0, indexing, n, nnz, __arg4, __arg5);
                    return __ret;
                }
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseDCreateVector(global::IntelMKL.LP64.SparseVector V, global::IntelMKL.LP64.SparseIndexBaseT indexing, int n, int nnz, ref int indx, ref double values)
        {
            var ____arg0 = V.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (int* __refParamPtr4 = &indx)
            {
                var __arg4 = __refParamPtr4;
                fixed (double* __refParamPtr5 = &values)
                {
                    var __arg5 = __refParamPtr5;
                    var __ret = __Internal.MklSparseDCreateVector(__arg0, indexing, n, nnz, __arg4, __arg5);
                    return __ret;
                }
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseSExportVector(global::IntelMKL.LP64.SparseVector source, global::IntelMKL.LP64.SparseIndexBaseT* indexing, ref int n, ref int mmz, int** indx, float** values)
        {
            var ____arg0 = source.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (int* __refParamPtr2 = &n)
            {
                var __arg2 = __refParamPtr2;
                fixed (int* __refParamPtr3 = &mmz)
                {
                    var __arg3 = __refParamPtr3;
                    var __ret = __Internal.MklSparseSExportVector(__arg0, indexing, __arg2, __arg3, indx, values);
                    return __ret;
                }
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseDExportVector(global::IntelMKL.LP64.SparseVector source, global::IntelMKL.LP64.SparseIndexBaseT* indexing, ref int n, ref int mmz, int** indx, double** values)
        {
            var ____arg0 = source.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (int* __refParamPtr2 = &n)
            {
                var __arg2 = __refParamPtr2;
                fixed (int* __refParamPtr3 = &mmz)
                {
                    var __arg3 = __refParamPtr3;
                    var __ret = __Internal.MklSparseDExportVector(__arg0, indexing, __arg2, __arg3, indx, values);
                    return __ret;
                }
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseDestroyVector(global::IntelMKL.LP64.SparseVector A)
        {
            var ____arg0 = A.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = __Internal.MklSparseDestroyVector(__arg0);
            return __ret;
        }

        /// <summary>**************************************************************************************</summary>
        /// <remarks>
        /// <para>************************************* Creation routines ******************************</para>
        /// <para>**************************************************************************************</para>
        /// </remarks>
        public static global::IntelMKL.LP64.SparseStatusT MklSparseSCreateCoo(global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.SparseIndexBaseT indexing, int rows, int cols, int nnz, ref int row_indx, ref int col_indx, ref float values)
        {
            var ____arg0 = A.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (int* __refParamPtr5 = &row_indx)
            {
                var __arg5 = __refParamPtr5;
                fixed (int* __refParamPtr6 = &col_indx)
                {
                    var __arg6 = __refParamPtr6;
                    fixed (float* __refParamPtr7 = &values)
                    {
                        var __arg7 = __refParamPtr7;
                        var __ret = __Internal.MklSparseSCreateCoo(__arg0, indexing, rows, cols, nnz, __arg5, __arg6, __arg7);
                        return __ret;
                    }
                }
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseDCreateCoo(global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.SparseIndexBaseT indexing, int rows, int cols, int nnz, ref int row_indx, ref int col_indx, ref double values)
        {
            var ____arg0 = A.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (int* __refParamPtr5 = &row_indx)
            {
                var __arg5 = __refParamPtr5;
                fixed (int* __refParamPtr6 = &col_indx)
                {
                    var __arg6 = __refParamPtr6;
                    fixed (double* __refParamPtr7 = &values)
                    {
                        var __arg7 = __refParamPtr7;
                        var __ret = __Internal.MklSparseDCreateCoo(__arg0, indexing, rows, cols, nnz, __arg5, __arg6, __arg7);
                        return __ret;
                    }
                }
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseSCreateCsr(global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.SparseIndexBaseT indexing, int rows, int cols, ref int rows_start, ref int rows_end, ref int col_indx, ref float values)
        {
            var ____arg0 = A.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (int* __refParamPtr4 = &rows_start)
            {
                var __arg4 = __refParamPtr4;
                fixed (int* __refParamPtr5 = &rows_end)
                {
                    var __arg5 = __refParamPtr5;
                    fixed (int* __refParamPtr6 = &col_indx)
                    {
                        var __arg6 = __refParamPtr6;
                        fixed (float* __refParamPtr7 = &values)
                        {
                            var __arg7 = __refParamPtr7;
                            var __ret = __Internal.MklSparseSCreateCsr(__arg0, indexing, rows, cols, __arg4, __arg5, __arg6, __arg7);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseDCreateCsr(global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.SparseIndexBaseT indexing, int rows, int cols, ref int rows_start, ref int rows_end, ref int col_indx, ref double values)
        {
            var ____arg0 = A.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (int* __refParamPtr4 = &rows_start)
            {
                var __arg4 = __refParamPtr4;
                fixed (int* __refParamPtr5 = &rows_end)
                {
                    var __arg5 = __refParamPtr5;
                    fixed (int* __refParamPtr6 = &col_indx)
                    {
                        var __arg6 = __refParamPtr6;
                        fixed (double* __refParamPtr7 = &values)
                        {
                            var __arg7 = __refParamPtr7;
                            var __ret = __Internal.MklSparseDCreateCsr(__arg0, indexing, rows, cols, __arg4, __arg5, __arg6, __arg7);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseSCreateCsc(global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.SparseIndexBaseT indexing, int rows, int cols, ref int rows_start, ref int rows_end, ref int col_indx, ref float values)
        {
            var ____arg0 = A.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (int* __refParamPtr4 = &rows_start)
            {
                var __arg4 = __refParamPtr4;
                fixed (int* __refParamPtr5 = &rows_end)
                {
                    var __arg5 = __refParamPtr5;
                    fixed (int* __refParamPtr6 = &col_indx)
                    {
                        var __arg6 = __refParamPtr6;
                        fixed (float* __refParamPtr7 = &values)
                        {
                            var __arg7 = __refParamPtr7;
                            var __ret = __Internal.MklSparseSCreateCsc(__arg0, indexing, rows, cols, __arg4, __arg5, __arg6, __arg7);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseDCreateCsc(global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.SparseIndexBaseT indexing, int rows, int cols, ref int rows_start, ref int rows_end, ref int col_indx, ref double values)
        {
            var ____arg0 = A.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (int* __refParamPtr4 = &rows_start)
            {
                var __arg4 = __refParamPtr4;
                fixed (int* __refParamPtr5 = &rows_end)
                {
                    var __arg5 = __refParamPtr5;
                    fixed (int* __refParamPtr6 = &col_indx)
                    {
                        var __arg6 = __refParamPtr6;
                        fixed (double* __refParamPtr7 = &values)
                        {
                            var __arg7 = __refParamPtr7;
                            var __ret = __Internal.MklSparseDCreateCsc(__arg0, indexing, rows, cols, __arg4, __arg5, __arg6, __arg7);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseSCreateBsr(global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.SparseIndexBaseT indexing, global::IntelMKL.LP64.SparseLayoutT block_layout, int rows, int cols, int block_size, ref int rows_start, ref int rows_end, ref int col_indx, ref float values)
        {
            var ____arg0 = A.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (int* __refParamPtr6 = &rows_start)
            {
                var __arg6 = __refParamPtr6;
                fixed (int* __refParamPtr7 = &rows_end)
                {
                    var __arg7 = __refParamPtr7;
                    fixed (int* __refParamPtr8 = &col_indx)
                    {
                        var __arg8 = __refParamPtr8;
                        fixed (float* __refParamPtr9 = &values)
                        {
                            var __arg9 = __refParamPtr9;
                            var __ret = __Internal.MklSparseSCreateBsr(__arg0, indexing, block_layout, rows, cols, block_size, __arg6, __arg7, __arg8, __arg9);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseDCreateBsr(global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.SparseIndexBaseT indexing, global::IntelMKL.LP64.SparseLayoutT block_layout, int rows, int cols, int block_size, ref int rows_start, ref int rows_end, ref int col_indx, ref double values)
        {
            var ____arg0 = A.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (int* __refParamPtr6 = &rows_start)
            {
                var __arg6 = __refParamPtr6;
                fixed (int* __refParamPtr7 = &rows_end)
                {
                    var __arg7 = __refParamPtr7;
                    fixed (int* __refParamPtr8 = &col_indx)
                    {
                        var __arg8 = __refParamPtr8;
                        fixed (double* __refParamPtr9 = &values)
                        {
                            var __arg9 = __refParamPtr9;
                            var __ret = __Internal.MklSparseDCreateBsr(__arg0, indexing, block_layout, rows, cols, block_size, __arg6, __arg7, __arg8, __arg9);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseCopy(global::IntelMKL.LP64.SparseMatrix source, global::IntelMKL.LP64.MatrixDescr descr, global::IntelMKL.LP64.SparseMatrix dest)
        {
            var ____arg0 = source.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __arg1 = descr.__Instance;
            var ____arg2 = dest.__Instance;
            var __arg2 = new global::System.IntPtr(&____arg2);
            var __ret = __Internal.MklSparseCopy(__arg0, __arg1, __arg2);
            return __ret;
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseDestroy(global::IntelMKL.LP64.SparseMatrix A)
        {
            var ____arg0 = A.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = __Internal.MklSparseDestroy(__arg0);
            return __ret;
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseGetErrorInfo(global::IntelMKL.LP64.SparseMatrix A, ref int info)
        {
            var ____arg0 = A.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (int* __refParamPtr1 = &info)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.MklSparseGetErrorInfo(__arg0, __arg1);
                return __ret;
            }
        }

        /// <summary>**************************************************************************************</summary>
        /// <remarks>
        /// <para>********************** Converters of internal representation  ************************</para>
        /// <para>**************************************************************************************</para>
        /// </remarks>
        public static global::IntelMKL.LP64.SparseStatusT MklSparseConvertCsr(global::IntelMKL.LP64.SparseMatrix source, global::IntelMKL.LP64.SparseOperationT operation, global::IntelMKL.LP64.SparseMatrix dest)
        {
            var ____arg0 = source.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg2 = dest.__Instance;
            var __arg2 = new global::System.IntPtr(&____arg2);
            var __ret = __Internal.MklSparseConvertCsr(__arg0, operation, __arg2);
            return __ret;
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseConvertBsr(global::IntelMKL.LP64.SparseMatrix source, int block_size, global::IntelMKL.LP64.SparseLayoutT block_layout, global::IntelMKL.LP64.SparseOperationT operation, global::IntelMKL.LP64.SparseMatrix dest)
        {
            var ____arg0 = source.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg4 = dest.__Instance;
            var __arg4 = new global::System.IntPtr(&____arg4);
            var __ret = __Internal.MklSparseConvertBsr(__arg0, block_size, block_layout, operation, __arg4);
            return __ret;
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseSExportBsr(global::IntelMKL.LP64.SparseMatrix source, global::IntelMKL.LP64.SparseIndexBaseT* indexing, global::IntelMKL.LP64.SparseLayoutT* block_layout, ref int rows, ref int cols, ref int block_size, int** rows_start, int** rows_end, int** col_indx, float** values)
        {
            var ____arg0 = source.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (int* __refParamPtr3 = &rows)
            {
                var __arg3 = __refParamPtr3;
                fixed (int* __refParamPtr4 = &cols)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (int* __refParamPtr5 = &block_size)
                    {
                        var __arg5 = __refParamPtr5;
                        var __ret = __Internal.MklSparseSExportBsr(__arg0, indexing, block_layout, __arg3, __arg4, __arg5, rows_start, rows_end, col_indx, values);
                        return __ret;
                    }
                }
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseDExportBsr(global::IntelMKL.LP64.SparseMatrix source, global::IntelMKL.LP64.SparseIndexBaseT* indexing, global::IntelMKL.LP64.SparseLayoutT* block_layout, ref int rows, ref int cols, ref int block_size, int** rows_start, int** rows_end, int** col_indx, double** values)
        {
            var ____arg0 = source.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (int* __refParamPtr3 = &rows)
            {
                var __arg3 = __refParamPtr3;
                fixed (int* __refParamPtr4 = &cols)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (int* __refParamPtr5 = &block_size)
                    {
                        var __arg5 = __refParamPtr5;
                        var __ret = __Internal.MklSparseDExportBsr(__arg0, indexing, block_layout, __arg3, __arg4, __arg5, rows_start, rows_end, col_indx, values);
                        return __ret;
                    }
                }
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseSExportCsr(global::IntelMKL.LP64.SparseMatrix source, global::IntelMKL.LP64.SparseIndexBaseT* indexing, ref int rows, ref int cols, int** rows_start, int** rows_end, int** col_indx, float** values)
        {
            var ____arg0 = source.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (int* __refParamPtr2 = &rows)
            {
                var __arg2 = __refParamPtr2;
                fixed (int* __refParamPtr3 = &cols)
                {
                    var __arg3 = __refParamPtr3;
                    var __ret = __Internal.MklSparseSExportCsr(__arg0, indexing, __arg2, __arg3, rows_start, rows_end, col_indx, values);
                    return __ret;
                }
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseDExportCsr(global::IntelMKL.LP64.SparseMatrix source, global::IntelMKL.LP64.SparseIndexBaseT* indexing, ref int rows, ref int cols, int** rows_start, int** rows_end, int** col_indx, double** values)
        {
            var ____arg0 = source.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (int* __refParamPtr2 = &rows)
            {
                var __arg2 = __refParamPtr2;
                fixed (int* __refParamPtr3 = &cols)
                {
                    var __arg3 = __refParamPtr3;
                    var __ret = __Internal.MklSparseDExportCsr(__arg0, indexing, __arg2, __arg3, rows_start, rows_end, col_indx, values);
                    return __ret;
                }
            }
        }

        /// <summary>**************************************************************************************</summary>
        /// <remarks>
        /// <para>************************ Step-by-step modification routines **************************</para>
        /// <para>**************************************************************************************</para>
        /// </remarks>
        public static global::IntelMKL.LP64.SparseStatusT MklSparseSSetValue(global::IntelMKL.LP64.SparseMatrix A, int row, int col, float value)
        {
            var ____arg0 = A.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = __Internal.MklSparseSSetValue(__arg0, row, col, value);
            return __ret;
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseDSetValue(global::IntelMKL.LP64.SparseMatrix A, int row, int col, double value)
        {
            var ____arg0 = A.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = __Internal.MklSparseDSetValue(__arg0, row, col, value);
            return __ret;
        }

        /// <summary>**************************************************************************************</summary>
        /// <remarks>
        /// <para>**************************** Verbose mode routine ************************************</para>
        /// <para>**************************************************************************************</para>
        /// </remarks>
        public static global::IntelMKL.LP64.SparseStatusT MklSparseSetVerboseMode(global::IntelMKL.LP64.VerboseModeT verbose)
        {
            var __ret = __Internal.MklSparseSetVerboseMode(verbose);
            return __ret;
        }

        /// <summary>**************************************************************************************</summary>
        /// <remarks>
        /// <para>**************************** Optimization routines ***********************************</para>
        /// <para>**************************************************************************************</para>
        /// </remarks>
        public static global::IntelMKL.LP64.SparseStatusT MklSparseSetMvHint(global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.SparseOperationT operation, global::IntelMKL.LP64.MatrixDescr descr, int expected_calls)
        {
            var ____arg0 = A.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __arg2 = descr.__Instance;
            var __ret = __Internal.MklSparseSetMvHint(__arg0, operation, __arg2, expected_calls);
            return __ret;
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseSetMmHint(global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.SparseOperationT operation, global::IntelMKL.LP64.MatrixDescr descr, global::IntelMKL.LP64.SparseLayoutT layout, int dense_matrix_size, int expected_calls)
        {
            var ____arg0 = A.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __arg2 = descr.__Instance;
            var __ret = __Internal.MklSparseSetMmHint(__arg0, operation, __arg2, layout, dense_matrix_size, expected_calls);
            return __ret;
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseSetSvHint(global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.SparseOperationT operation, global::IntelMKL.LP64.MatrixDescr descr, int expected_calls)
        {
            var ____arg0 = A.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __arg2 = descr.__Instance;
            var __ret = __Internal.MklSparseSetSvHint(__arg0, operation, __arg2, expected_calls);
            return __ret;
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseSetSmHint(global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.SparseOperationT operation, global::IntelMKL.LP64.MatrixDescr descr, global::IntelMKL.LP64.SparseLayoutT layout, int dense_matrix_size, int expected_calls)
        {
            var ____arg0 = A.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __arg2 = descr.__Instance;
            var __ret = __Internal.MklSparseSetSmHint(__arg0, operation, __arg2, layout, dense_matrix_size, expected_calls);
            return __ret;
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseSetMemoryHint(global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.SparseMemoryUsageT policy)
        {
            var ____arg0 = A.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = __Internal.MklSparseSetMemoryHint(__arg0, policy);
            return __ret;
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseOptimize(global::IntelMKL.LP64.SparseMatrix A)
        {
            var ____arg0 = A.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = __Internal.MklSparseOptimize(__arg0);
            return __ret;
        }

        /// <summary>**************************************************************************************</summary>
        /// <remarks>
        /// <para>**************************** Computational routines **********************************</para>
        /// <para>**************************************************************************************</para>
        /// </remarks>
        public static global::IntelMKL.LP64.SparseStatusT MklSparseSMv(global::IntelMKL.LP64.SparseOperationT operation, float alpha, global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.MatrixDescr descr, ref float x, float beta, ref float y)
        {
            var ____arg2 = A.__Instance;
            var __arg2 = new global::System.IntPtr(&____arg2);
            var __arg3 = descr.__Instance;
            fixed (float* __refParamPtr4 = &x)
            {
                var __arg4 = __refParamPtr4;
                fixed (float* __refParamPtr6 = &y)
                {
                    var __arg6 = __refParamPtr6;
                    var __ret = __Internal.MklSparseSMv(operation, alpha, __arg2, __arg3, __arg4, beta, __arg6);
                    return __ret;
                }
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseDMv(global::IntelMKL.LP64.SparseOperationT operation, double alpha, global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.MatrixDescr descr, ref double x, double beta, ref double y)
        {
            var ____arg2 = A.__Instance;
            var __arg2 = new global::System.IntPtr(&____arg2);
            var __arg3 = descr.__Instance;
            fixed (double* __refParamPtr4 = &x)
            {
                var __arg4 = __refParamPtr4;
                fixed (double* __refParamPtr6 = &y)
                {
                    var __arg6 = __refParamPtr6;
                    var __ret = __Internal.MklSparseDMv(operation, alpha, __arg2, __arg3, __arg4, beta, __arg6);
                    return __ret;
                }
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseSTrsv(global::IntelMKL.LP64.SparseOperationT operation, float alpha, global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.MatrixDescr descr, ref float x, ref float y)
        {
            var ____arg2 = A.__Instance;
            var __arg2 = new global::System.IntPtr(&____arg2);
            var __arg3 = descr.__Instance;
            fixed (float* __refParamPtr4 = &x)
            {
                var __arg4 = __refParamPtr4;
                fixed (float* __refParamPtr5 = &y)
                {
                    var __arg5 = __refParamPtr5;
                    var __ret = __Internal.MklSparseSTrsv(operation, alpha, __arg2, __arg3, __arg4, __arg5);
                    return __ret;
                }
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseDTrsv(global::IntelMKL.LP64.SparseOperationT operation, double alpha, global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.MatrixDescr descr, ref double x, ref double y)
        {
            var ____arg2 = A.__Instance;
            var __arg2 = new global::System.IntPtr(&____arg2);
            var __arg3 = descr.__Instance;
            fixed (double* __refParamPtr4 = &x)
            {
                var __arg4 = __refParamPtr4;
                fixed (double* __refParamPtr5 = &y)
                {
                    var __arg5 = __refParamPtr5;
                    var __ret = __Internal.MklSparseDTrsv(operation, alpha, __arg2, __arg3, __arg4, __arg5);
                    return __ret;
                }
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseSMm(global::IntelMKL.LP64.SparseOperationT operation, float alpha, global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.MatrixDescr descr, global::IntelMKL.LP64.SparseLayoutT layout, ref float x, int columns, int ldx, float beta, ref float y, int ldy)
        {
            var ____arg2 = A.__Instance;
            var __arg2 = new global::System.IntPtr(&____arg2);
            var __arg3 = descr.__Instance;
            fixed (float* __refParamPtr5 = &x)
            {
                var __arg5 = __refParamPtr5;
                fixed (float* __refParamPtr9 = &y)
                {
                    var __arg9 = __refParamPtr9;
                    var __ret = __Internal.MklSparseSMm(operation, alpha, __arg2, __arg3, layout, __arg5, columns, ldx, beta, __arg9, ldy);
                    return __ret;
                }
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseDMm(global::IntelMKL.LP64.SparseOperationT operation, double alpha, global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.MatrixDescr descr, global::IntelMKL.LP64.SparseLayoutT layout, ref double x, int columns, int ldx, double beta, ref double y, int ldy)
        {
            var ____arg2 = A.__Instance;
            var __arg2 = new global::System.IntPtr(&____arg2);
            var __arg3 = descr.__Instance;
            fixed (double* __refParamPtr5 = &x)
            {
                var __arg5 = __refParamPtr5;
                fixed (double* __refParamPtr9 = &y)
                {
                    var __arg9 = __refParamPtr9;
                    var __ret = __Internal.MklSparseDMm(operation, alpha, __arg2, __arg3, layout, __arg5, columns, ldx, beta, __arg9, ldy);
                    return __ret;
                }
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseSTrsm(global::IntelMKL.LP64.SparseOperationT operation, float alpha, global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.MatrixDescr descr, global::IntelMKL.LP64.SparseLayoutT layout, ref float x, int columns, int ldx, ref float y, int ldy)
        {
            var ____arg2 = A.__Instance;
            var __arg2 = new global::System.IntPtr(&____arg2);
            var __arg3 = descr.__Instance;
            fixed (float* __refParamPtr5 = &x)
            {
                var __arg5 = __refParamPtr5;
                fixed (float* __refParamPtr8 = &y)
                {
                    var __arg8 = __refParamPtr8;
                    var __ret = __Internal.MklSparseSTrsm(operation, alpha, __arg2, __arg3, layout, __arg5, columns, ldx, __arg8, ldy);
                    return __ret;
                }
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseDTrsm(global::IntelMKL.LP64.SparseOperationT operation, double alpha, global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.MatrixDescr descr, global::IntelMKL.LP64.SparseLayoutT layout, ref double x, int columns, int ldx, ref double y, int ldy)
        {
            var ____arg2 = A.__Instance;
            var __arg2 = new global::System.IntPtr(&____arg2);
            var __arg3 = descr.__Instance;
            fixed (double* __refParamPtr5 = &x)
            {
                var __arg5 = __refParamPtr5;
                fixed (double* __refParamPtr8 = &y)
                {
                    var __arg8 = __refParamPtr8;
                    var __ret = __Internal.MklSparseDTrsm(operation, alpha, __arg2, __arg3, layout, __arg5, columns, ldx, __arg8, ldy);
                    return __ret;
                }
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseSAdd(global::IntelMKL.LP64.SparseOperationT operation, global::IntelMKL.LP64.SparseMatrix A, float alpha, global::IntelMKL.LP64.SparseMatrix B, global::IntelMKL.LP64.SparseMatrix C)
        {
            var ____arg1 = A.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            var ____arg3 = B.__Instance;
            var __arg3 = new global::System.IntPtr(&____arg3);
            var ____arg4 = C.__Instance;
            var __arg4 = new global::System.IntPtr(&____arg4);
            var __ret = __Internal.MklSparseSAdd(operation, __arg1, alpha, __arg3, __arg4);
            return __ret;
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseDAdd(global::IntelMKL.LP64.SparseOperationT operation, global::IntelMKL.LP64.SparseMatrix A, double alpha, global::IntelMKL.LP64.SparseMatrix B, global::IntelMKL.LP64.SparseMatrix C)
        {
            var ____arg1 = A.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            var ____arg3 = B.__Instance;
            var __arg3 = new global::System.IntPtr(&____arg3);
            var ____arg4 = C.__Instance;
            var __arg4 = new global::System.IntPtr(&____arg4);
            var __ret = __Internal.MklSparseDAdd(operation, __arg1, alpha, __arg3, __arg4);
            return __ret;
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseSpmm(global::IntelMKL.LP64.SparseOperationT operation, global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.SparseMatrix B, global::IntelMKL.LP64.SparseMatrix C)
        {
            var ____arg1 = A.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            var ____arg2 = B.__Instance;
            var __arg2 = new global::System.IntPtr(&____arg2);
            var ____arg3 = C.__Instance;
            var __arg3 = new global::System.IntPtr(&____arg3);
            var __ret = __Internal.MklSparseSpmm(operation, __arg1, __arg2, __arg3);
            return __ret;
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseSyrk(global::IntelMKL.LP64.SparseOperationT operation, global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.SparseMatrix C)
        {
            var ____arg1 = A.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            var ____arg2 = C.__Instance;
            var __arg2 = new global::System.IntPtr(&____arg2);
            var __ret = __Internal.MklSparseSyrk(operation, __arg1, __arg2);
            return __ret;
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseOrder(global::IntelMKL.LP64.SparseMatrix A)
        {
            var ____arg0 = A.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = __Internal.MklSparseOrder(__arg0);
            return __ret;
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseSSpmmd(global::IntelMKL.LP64.SparseOperationT operation, global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.SparseMatrix B, global::IntelMKL.LP64.SparseLayoutT layout, ref float C, int ldc)
        {
            var ____arg1 = A.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            var ____arg2 = B.__Instance;
            var __arg2 = new global::System.IntPtr(&____arg2);
            fixed (float* __refParamPtr4 = &C)
            {
                var __arg4 = __refParamPtr4;
                var __ret = __Internal.MklSparseSSpmmd(operation, __arg1, __arg2, layout, __arg4, ldc);
                return __ret;
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseDSpmmd(global::IntelMKL.LP64.SparseOperationT operation, global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.SparseMatrix B, global::IntelMKL.LP64.SparseLayoutT layout, ref double C, int ldc)
        {
            var ____arg1 = A.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            var ____arg2 = B.__Instance;
            var __arg2 = new global::System.IntPtr(&____arg2);
            fixed (double* __refParamPtr4 = &C)
            {
                var __arg4 = __refParamPtr4;
                var __ret = __Internal.MklSparseDSpmmd(operation, __arg1, __arg2, layout, __arg4, ldc);
                return __ret;
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseSetSymgsHint(global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.SparseOperationT operation, global::IntelMKL.LP64.MatrixDescr descr, int expected_calls)
        {
            var ____arg0 = A.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __arg2 = descr.__Instance;
            var __ret = __Internal.MklSparseSetSymgsHint(__arg0, operation, __arg2, expected_calls);
            return __ret;
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseDSymgsMv(global::IntelMKL.LP64.SparseOperationT op, global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.MatrixDescr descr, double alpha, ref double b, ref double x, ref double y)
        {
            var ____arg1 = A.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            var __arg2 = descr.__Instance;
            fixed (double* __refParamPtr4 = &b)
            {
                var __arg4 = __refParamPtr4;
                fixed (double* __refParamPtr5 = &x)
                {
                    var __arg5 = __refParamPtr5;
                    fixed (double* __refParamPtr6 = &y)
                    {
                        var __arg6 = __refParamPtr6;
                        var __ret = __Internal.MklSparseDSymgsMv(op, __arg1, __arg2, alpha, __arg4, __arg5, __arg6);
                        return __ret;
                    }
                }
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseDSymgs(global::IntelMKL.LP64.SparseOperationT op, global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.MatrixDescr descr, double alpha, ref double b, ref double x)
        {
            var ____arg1 = A.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            var __arg2 = descr.__Instance;
            fixed (double* __refParamPtr4 = &b)
            {
                var __arg4 = __refParamPtr4;
                fixed (double* __refParamPtr5 = &x)
                {
                    var __arg5 = __refParamPtr5;
                    var __ret = __Internal.MklSparseDSymgs(op, __arg1, __arg2, alpha, __arg4, __arg5);
                    return __ret;
                }
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseSetDotmvHint(global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.SparseOperationT operation, global::IntelMKL.LP64.MatrixDescr descr, int expectedCalls)
        {
            var ____arg0 = A.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __arg2 = descr.__Instance;
            var __ret = __Internal.MklSparseSetDotmvHint(__arg0, operation, __arg2, expectedCalls);
            return __ret;
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseDDotmv(global::IntelMKL.LP64.SparseOperationT transA, double alpha, global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.MatrixDescr descr, ref double x, double beta, ref double y, ref double d)
        {
            var ____arg2 = A.__Instance;
            var __arg2 = new global::System.IntPtr(&____arg2);
            var __arg3 = descr.__Instance;
            fixed (double* __refParamPtr4 = &x)
            {
                var __arg4 = __refParamPtr4;
                fixed (double* __refParamPtr6 = &y)
                {
                    var __arg6 = __refParamPtr6;
                    fixed (double* __refParamPtr7 = &d)
                    {
                        var __arg7 = __refParamPtr7;
                        var __ret = __Internal.MklSparseDDotmv(transA, alpha, __arg2, __arg3, __arg4, beta, __arg6, __arg7);
                        return __ret;
                    }
                }
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseSSymgsMv(global::IntelMKL.LP64.SparseOperationT op, global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.MatrixDescr descr, float alpha, ref float b, ref float x, ref float y)
        {
            var ____arg1 = A.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            var __arg2 = descr.__Instance;
            fixed (float* __refParamPtr4 = &b)
            {
                var __arg4 = __refParamPtr4;
                fixed (float* __refParamPtr5 = &x)
                {
                    var __arg5 = __refParamPtr5;
                    fixed (float* __refParamPtr6 = &y)
                    {
                        var __arg6 = __refParamPtr6;
                        var __ret = __Internal.MklSparseSSymgsMv(op, __arg1, __arg2, alpha, __arg4, __arg5, __arg6);
                        return __ret;
                    }
                }
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseSSymgs(global::IntelMKL.LP64.SparseOperationT op, global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.MatrixDescr descr, float alpha, ref float b, ref float x)
        {
            var ____arg1 = A.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            var __arg2 = descr.__Instance;
            fixed (float* __refParamPtr4 = &b)
            {
                var __arg4 = __refParamPtr4;
                fixed (float* __refParamPtr5 = &x)
                {
                    var __arg5 = __refParamPtr5;
                    var __ret = __Internal.MklSparseSSymgs(op, __arg1, __arg2, alpha, __arg4, __arg5);
                    return __ret;
                }
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseSDotmv(global::IntelMKL.LP64.SparseOperationT transA, float alpha, global::IntelMKL.LP64.SparseMatrix A, global::IntelMKL.LP64.MatrixDescr descr, ref float x, float beta, ref float y, ref float d)
        {
            var ____arg2 = A.__Instance;
            var __arg2 = new global::System.IntPtr(&____arg2);
            var __arg3 = descr.__Instance;
            fixed (float* __refParamPtr4 = &x)
            {
                var __arg4 = __refParamPtr4;
                fixed (float* __refParamPtr6 = &y)
                {
                    var __arg6 = __refParamPtr6;
                    fixed (float* __refParamPtr7 = &d)
                    {
                        var __arg7 = __refParamPtr7;
                        var __ret = __Internal.MklSparseSDotmv(transA, alpha, __arg2, __arg3, __arg4, beta, __arg6, __arg7);
                        return __ret;
                    }
                }
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseSSyrkd(global::IntelMKL.LP64.SparseOperationT operation, global::IntelMKL.LP64.SparseMatrix A, float alpha, float beta, ref float C, global::IntelMKL.LP64.SparseLayoutT layout, int ldc)
        {
            var ____arg1 = A.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            fixed (float* __refParamPtr4 = &C)
            {
                var __arg4 = __refParamPtr4;
                var __ret = __Internal.MklSparseSSyrkd(operation, __arg1, alpha, beta, __arg4, layout, ldc);
                return __ret;
            }
        }

        public static global::IntelMKL.LP64.SparseStatusT MklSparseDSyrkd(global::IntelMKL.LP64.SparseOperationT operation, global::IntelMKL.LP64.SparseMatrix A, double alpha, double beta, ref double C, global::IntelMKL.LP64.SparseLayoutT layout, int ldc)
        {
            var ____arg1 = A.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            fixed (double* __refParamPtr4 = &C)
            {
                var __arg4 = __refParamPtr4;
                var __ret = __Internal.MklSparseDSyrkd(operation, __arg1, alpha, beta, __arg4, layout, ldc);
                return __ret;
            }
        }
    }
}
